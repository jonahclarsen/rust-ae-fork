/* automatically generated by rust-bindgen 0.72.0 */

pub const A_INTERNAL_TEST_TWO: u32 = 1;
pub const PF_Vers_BUILD_BITS: u32 = 511;
pub const PF_Vers_BUILD_SHIFT: u32 = 0;
pub const PF_Vers_STAGE_BITS: u32 = 3;
pub const PF_Vers_STAGE_SHIFT: u32 = 9;
pub const PF_Vers_BUGFIX_BITS: u32 = 15;
pub const PF_Vers_BUGFIX_SHIFT: u32 = 11;
pub const PF_Vers_SUBVERS_BITS: u32 = 15;
pub const PF_Vers_SUBVERS_SHIFT: u32 = 15;
pub const PF_Vers_VERS_BITS: u32 = 7;
pub const PF_Vers_VERS_SHIFT: u32 = 19;
pub const PF_Vers_VERS_HIGH_BITS: u32 = 15;
pub const PF_Vers_VERS_HIGH_SHIFT: u32 = 26;
pub const PF_Vers_VERS_LOW_SHIFT: u32 = 3;
pub const PF_AE234_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE234_PLUG_IN_SUBVERS: u32 = 28;
pub const PF_AE220_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE220_PLUG_IN_SUBVERS: u32 = 27;
pub const PF_AE184_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE184_PLUG_IN_SUBVERS: u32 = 26;
pub const PF_AE182_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE182_PLUG_IN_SUBVERS: u32 = 25;
pub const PF_AE180_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE180_PLUG_IN_SUBVERS: u32 = 24;
pub const PF_AE177_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE177_PLUG_IN_SUBVERS: u32 = 23;
pub const PF_AE176_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE176_PLUG_IN_SUBVERS: u32 = 22;
pub const PF_AE175_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE175_PLUG_IN_SUBVERS: u32 = 21;
pub const PF_AE171_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE171_PLUG_IN_SUBVERS: u32 = 20;
pub const PF_AE170_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE170_PLUG_IN_SUBVERS: u32 = 18;
pub const PF_AE161_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE161_PLUG_IN_SUBVERS: u32 = 17;
pub const PF_AE160_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE160_PLUG_IN_SUBVERS: u32 = 16;
pub const PF_AE151_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE151_PLUG_IN_SUBVERS: u32 = 15;
pub const PF_AE150_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE150_PLUG_IN_SUBVERS: u32 = 15;
pub const PF_AE142_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE142_PLUG_IN_SUBVERS: u32 = 14;
pub const PF_AE140_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE140_PLUG_IN_SUBVERS: u32 = 13;
pub const PF_AE138_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE138_PLUG_IN_SUBVERS: u32 = 11;
pub const PF_AE136_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE136_PLUG_IN_SUBVERS: u32 = 10;
pub const PF_AE135_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE135_PLUG_IN_SUBVERS: u32 = 9;
pub const PF_AE130_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE130_PLUG_IN_SUBVERS: u32 = 7;
pub const PF_AE122_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE122_PLUG_IN_SUBVERS: u32 = 6;
pub const PF_AE121_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE121_PLUG_IN_SUBVERS: u32 = 5;
pub const PF_AE120_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE120_PLUG_IN_SUBVERS: u32 = 4;
pub const PF_AE1101_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE1101_PLUG_IN_SUBVERS: u32 = 3;
pub const PF_AE110_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE110_PLUG_IN_SUBVERS: u32 = 2;
pub const PF_AE105_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE105_PLUG_IN_SUBVERS: u32 = 1;
pub const PF_AE100_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE100_PLUG_IN_SUBVERS: u32 = 0;
pub const PF_AE90_PLUG_IN_VERSION: u32 = 12;
pub const PF_AE90_PLUG_IN_SUBVERS: u32 = 14;
pub const PF_AE80_PLUG_IN_VERSION: u32 = 12;
pub const PF_AE80_PLUG_IN_SUBVERS: u32 = 13;
pub const PF_AE70_PLUG_IN_VERSION: u32 = 12;
pub const PF_AE70_PLUG_IN_SUBVERS: u32 = 12;
pub const PF_AE65_PLUG_IN_VERSION: u32 = 12;
pub const PF_AE65_PLUG_IN_SUBVERS: u32 = 11;
pub const PF_AE41_PLUG_IN_VERSION: u32 = 12;
pub const PF_AE41_PLUG_IN_SUBVERS: u32 = 2;
pub const PF_AE40_PLUG_IN_VERSION: u32 = 12;
pub const PF_AE40_PLUG_IN_SUBVERS: u32 = 1;
pub const PF_AE31_PLUG_IN_VERSION: u32 = 11;
pub const PF_AE31_PLUG_IN_SUBVERS: u32 = 6;
pub const PF_AE31_PLUG_IN_SUBVERS_STRICTIFY: u32 = 8;
pub const PF_AE_PLUG_IN_VERSION: u32 = 13;
pub const PF_AE_PLUG_IN_SUBVERS: u32 = 28;
pub const PF_MAX_EFFECT_NAME_LEN: u32 = 31;
pub const PF_MAX_EFFECT_CATEGORY_NAME_LEN: u32 = 31;
pub const PF_MAX_EFFECT_PARAM_NAME_LEN: u32 = 31;
pub const PF_MAX_PARAM_DESCRIPTION_LEN: u32 = 31;
pub const PF_MAX_PARAM_VALUE_LEN: u32 = 31;
pub const PF_MAX_EFFECT_MSG_LEN: u32 = 255;
pub const PF_AE65_AND_EARLIER_MAX_NUM_EFFECT_PARAMS: u32 = 127;
pub const PF_MAX_WORLD_WIDTH: u32 = 30000;
pub const PF_MAX_WORLD_HEIGHT: u32 = 30000;
pub const PF_FIRST_ERR: u32 = 512;
pub const PF_Category_BLUR_AND_SHARPEN: &[u8; 15] = b"Blur & Sharpen\0";
pub const PF_Category_CHANNEL: &[u8; 8] = b"Channel\0";
pub const PF_Category_DISTORT: &[u8; 8] = b"Distort\0";
pub const PF_Category_IMAGE_CONTROL: &[u8; 14] = b"Image Control\0";
pub const PF_Category_KEYING: &[u8; 7] = b"Keying\0";
pub const PF_Category_PERSPECTIVE: &[u8; 12] = b"Perspective\0";
pub const PF_Category_STYLIZE: &[u8; 8] = b"Stylize\0";
pub const PF_Category_TEXT: &[u8; 5] = b"Text\0";
pub const PF_Category_VIDEO: &[u8; 6] = b"Video\0";
pub const PF_Category_TRANSITION: &[u8; 11] = b"Transition\0";
pub const PF_Category_AUDIO: &[u8; 6] = b"Audio\0";
pub const PF_Category_OTHER: &[u8; 6] = b"Other\0";
pub const PF_MAX_CHAN8: u32 = 255;
pub const PF_HALF_CHAN8: u32 = 128;
pub const PF_MAX_CHAN16: u32 = 32768;
pub const PF_HALF_CHAN16: u32 = 16384;
pub const PF_HUE_UNDEFINED: u32 = 2147483648;
pub const PF_CHANNEL_NAME_LEN: u32 = 63;
pub const PF_CONTEXT_MAGIC: u32 = 99251998;
pub const kSPNoError: u32 = 0;
pub const kSPBasicSuite: &[u8; 15] = b"SP Basic Suite\0";
pub const kSPBasicSuiteVersion: u32 = 4;
pub const kPFAdvAppSuite: &[u8; 20] = b"PF AE Adv App Suite\0";
pub const kPFAdvAppSuiteVersion1: u32 = 1;
pub const kPFAdvAppSuiteVersion2: u32 = 2;
pub const PF_MAX_TIME_LEN: u32 = 31;
pub const kPFAdvTimeSuite: &[u8; 21] = b"PF AE Adv Time Suite\0";
pub const kPFAdvTimeSuiteVersion4: u32 = 4;
pub const kPFAdvTimeSuiteVersion3: u32 = 3;
pub const kPFAdvTimeSuiteVersion2: u32 = 2;
pub const kPFAdvTimeSuiteVersion1: u32 = 1;
pub const kPFAdvItemSuite: &[u8; 21] = b"PF AE Adv Item Suite\0";
pub const kPFAdvItemSuiteVersion1: u32 = 1;
pub const kPFCacheOnLoadSuite: &[u8; 23] = b"PF Cache On Load Suite\0";
pub const kPFCacheOnLoadSuiteVersion1: u32 = 1;
pub const PF_CHANNEL_DEPTH_INFINITY: f64 = 10000000.0;
pub const kPFChannelSuite1: &[u8; 20] = b"PF AE Channel Suite\0";
pub const kPFChannelSuiteVersion1: u32 = 1;
pub const PF_PI: f64 = 3.141592653589793;
pub const PF_2PI: f64 = 6.283185307179586;
pub const PF_HALF_PI: f64 = 1.5707963267948966;
pub const PF_E: f64 = 2.718281828459045;
pub const PF_SQRT2: f64 = 1.4142135623730951;
pub const PF_RAD_PER_DEGREE: f64 = 0.017453292519943295;
pub const PF_KernelFlag_2D: u32 = 0;
pub const PF_KernelFlag_1D: u32 = 1;
pub const PF_KernelFlag_UNNORMALIZED: u32 = 0;
pub const PF_KernelFlag_NORMALIZED: u32 = 2;
pub const PF_KernelFlag_CLAMP: u32 = 0;
pub const PF_KernelFlag_NO_CLAMP: u32 = 4;
pub const PF_KernelFlag_USE_LONG: u32 = 0;
pub const PF_KernelFlag_USE_CHAR: u32 = 8;
pub const PF_KernelFlag_USE_FIXED: u32 = 16;
pub const PF_KernelFlag_USE_UNDEFINED: u32 = 24;
pub const PF_KernelFlag_HORIZONTAL: u32 = 0;
pub const PF_KernelFlag_VERTICAL: u32 = 32;
pub const PF_KernelFlag_TRANSPARENT_BORDERS: u32 = 0;
pub const PF_KernelFlag_REPLICATE_BORDERS: u32 = 64;
pub const PF_KernelFlag_STRAIGHT_CONVOLVE: u32 = 0;
pub const PF_KernelFlag_ALPHA_WEIGHT_CONVOLVE: u32 = 128;
pub const PF_Iterations_ONCE_PER_PROCESSOR: i32 = -1;
pub const PF_Iteratations_ONCE_PER_PROCESSOR: i32 = -1;
pub const kPFHandleSuite: &[u8; 16] = b"PF Handle Suite\0";
pub const kPFHandleSuiteVersion1: u32 = 2;
pub const kPFANSISuite: &[u8; 14] = b"PF ANSI Suite\0";
pub const kPFANSISuiteVersion1: u32 = 1;
pub const kPFPixelDataSuite: &[u8; 20] = b"PF Pixel Data Suite\0";
pub const kPFPixelDataSuiteVersion1: u32 = 1;
pub const kPFPixelDataSuiteVersion2: u32 = 2;
pub const kPFColorCallbacksSuite: &[u8; 15] = b"PF Color Suite\0";
pub const kPFColorCallbacksSuiteVersion1: u32 = 1;
pub const kPFColorCallbacks16Suite: &[u8; 17] = b"PF Color16 Suite\0";
pub const kPFColorCallbacks16SuiteVersion1: u32 = 1;
pub const kPFColorCallbacksFloatSuite: &[u8; 20] = b"PF ColorFloat Suite\0";
pub const kPFColorCallbacksFloatSuiteVersion1: u32 = 1;
pub const kPFBatchSamplingSuite: &[u8; 24] = b"PF Batch Sampling Suite\0";
pub const kPFBatchSamplingSuiteVersion1: u32 = 1;
pub const kPFSampling8Suite: &[u8; 19] = b"PF Sampling8 Suite\0";
pub const kPFSampling8SuiteVersion1: u32 = 1;
pub const kPFSampling16Suite: &[u8; 20] = b"PF Sampling16 Suite\0";
pub const kPFSampling16SuiteVersion1: u32 = 1;
pub const kPFSamplingFloatSuite: &[u8; 23] = b"PF SamplingFloat Suite\0";
pub const kPFSamplingFloatSuiteVersion1: u32 = 1;
pub const kPFWorldSuite: &[u8; 15] = b"PF World Suite\0";
pub const kPFWorldSuiteVersion2: u32 = 2;
pub const kPFPixelFormatSuite: &[u8; 22] = b"PF Pixel Format Suite\0";
pub const kPFPixelFormatSuiteVersion2: u32 = 2;
pub const kPFWorldSuiteVersion1: u32 = 1;
pub const kPFIterate8Suite: &[u8; 18] = b"PF Iterate8 Suite\0";
pub const kPFIterate8SuiteVersion1: u32 = 1;
pub const kPFIterate8SuiteVersion2: u32 = 2;
pub const kPFIterate16Suite: &[u8; 19] = b"PF iterate16 Suite\0";
pub const kPFIterate16SuiteVersion1: u32 = 1;
pub const kPFIterate16SuiteVersion2: u32 = 2;
pub const kPFIterateFloatSuite: &[u8; 22] = b"PF iterateFloat Suite\0";
pub const kPFIterateFloatSuiteVersion1: u32 = 1;
pub const kPFIterateFloatSuiteVersion2: u32 = 2;
pub const kPFWorldTransformSuite: &[u8; 25] = b"PF World Transform Suite\0";
pub const kPFWorldTransformSuiteVersion1: u32 = 1;
pub const kPFFillMatteSuite: &[u8; 20] = b"PF Fill Matte Suite\0";
pub const kPFFillMatteSuiteVersion2: u32 = 2;
pub const PF_CUDAVersion: u32 = 11080;
pub const kPFGPUDeviceSuite: &[u8; 20] = b"PF GPU Device Suite\0";
pub const kPFGPUDeviceSuiteVersion1: u32 = 1;
pub const kPFPathQuerySuite: &[u8; 20] = b"PF Path Query Suite\0";
pub const kPFPathQuerySuiteVersion1: u32 = 1;
pub const kPFPathDataSuite: &[u8; 19] = b"PF Path Data Suite\0";
pub const kPFPathDataSuiteVersion1: u32 = 1;
pub const PF_MAX_PATH_NAME_LEN: u32 = 31;
pub const kPFParamUtilsSuite: &[u8; 21] = b"PF Param Utils Suite\0";
pub const kPFParamUtilsSuiteVersion3: u32 = 3;
pub const PF_ParamIndex_NONE: i32 = -1;
pub const PF_ParamIndex_CHECK_ALL: i32 = -2;
pub const PF_ParamIndex_CHECK_ALL_EXCEPT_LAYER_PARAMS: i32 = -3;
pub const PF_ParamIndex_CHECK_ALL_HONOR_EXCLUDE: i32 = -4;
pub const PF_KeyIndex_NONE: i32 = -1;
pub const kPFColorParamSuite: &[u8; 19] = b"PF ColorParamSuite\0";
pub const kPFColorParamSuiteVersion1: u32 = 1;
pub const kPFPointParamSuite: &[u8; 19] = b"PF PointParamSuite\0";
pub const kPFPointParamSuiteVersion1: u32 = 1;
pub const kPFAngleParamSuite: &[u8; 19] = b"PF AngleParamSuite\0";
pub const kPFAngleParamSuiteVersion1: u32 = 1;
pub const kPFAppSuite: &[u8; 16] = b"PF AE App Suite\0";
pub const kPFAppSuiteVersion6: u32 = 1;
pub const PF_APP_MAX_PERS_LEN: u32 = 63;
pub const PF_FONT_NAME_LEN: u32 = 255;
pub const PF_APP_LANG_TAG_SIZE: u32 = 6;
pub const kPFEffectUISuite: &[u8; 19] = b"PF Effect UI Suite\0";
pub const kPFEffectUISuiteVersion1: u32 = 1;
pub const kPFEffectCustomUISuite: &[u8; 26] = b"PF Effect Custom UI Suite\0";
pub const kPFEffectCustomUISuiteVersion2: u32 = 2;
pub const kPFEffectCustomUIOverlayThemeSuite: &[u8; 40] =
    b"PF Effect Custom UI Overlay Theme Suite\0";
pub const kPFEffectCustomUIOverlayThemeSuiteVersion1: u32 = 1;
pub const kPFParamUtilsSuiteVersion1: u32 = 2;
pub const kPFAppSuiteVersion4: u32 = 6;
pub const kPFAppSuiteVersion5: u32 = 7;
pub const kPFEffectCustomUISuiteVersion1: u32 = 1;
pub const kPFHelperSuite: &[u8; 23] = b"AE Plugin Helper Suite\0";
pub const kPFHelperSuiteVersion1: u32 = 1;
pub const kPFHelperSuiteVersion: u32 = 1;
pub const kPFHelperSuite2: &[u8; 24] = b"AE Plugin Helper Suite2\0";
pub const kPFHelperSuite2Version1: u32 = 1;
pub const kPFHelperSuite2Version2: u32 = 2;
pub const kPFHelperSuite2Version: u32 = 2;
pub const PF_PLUG_IN_VERSION: u32 = 13;
pub const PF_PLUG_IN_SUBVERS: u32 = 28;
pub const FIEL_Label_VERSION: u32 = 1;
pub const FIEL_ResID: u32 = 128;
pub const PR_ARTISAN_EXTENSION: &[u8; 5] = b".aex\0";
pub const PR_ARTISAN_API_VERSION_MAJOR: u32 = 1;
pub const PR_ARTISAN_API_VERSION_MINOR: u32 = 0;
pub const PR_PUBLIC_MATCH_NAME_LEN: u32 = 31;
pub const PR_PUBLIC_ARTISAN_NAME_LEN: u32 = 31;
pub const PF_MASKS_MAJOR_VERSION: u32 = 1;
pub const PF_MASKS_MINOR_VERSION: u32 = 0;
pub const kPF_MaskSuite: &[u8; 16] = b"AEGP Mask Suite\0";
pub const kPF_MaskSuiteVersion1: u32 = 1;
pub const AEIO_MAX_MODULE_NAME_LEN: u32 = 31;
pub const AEIO_MAX_TYPES: u32 = 16;
pub const AEIO_MAX_SEQ_NAME_LEN: u32 = 31;
pub const AEIO_MAX_MESSAGE_LEN: u32 = 127;
pub const AEIO_MAX_AUX_EXT: u32 = 16;
pub const AEIO_ANY_CREATOR: i32 = -1;
pub const AEIO_AlphaLabel_VERSION: u32 = 257;
pub const AEIO_FileType_DIR: i32 = -2;
pub const AEIO_FileType_NONE: i32 = -1;
pub const AEIO_FileType_ANY: u32 = 0;
pub const AEIO_FileType_GENERIC: u32 = 1;
pub const AEGP_INITFUNC_MAJOR_VERSION: u32 = 1;
pub const AEGP_INITFUNC_MINOR_VERSION: u32 = 9;
pub const AEGP_SubLayer_ALL: i32 = -1;
pub const AEGP_MAX_PATH_SIZE: u32 = 260;
pub const AEGP_MAX_ABOUT_STRING_SIZE: u32 = 256;
pub const AEGP_MAX_RQITEM_COMMENT_SIZE: u32 = 256;
pub const AEGP_MAX_TYPE_NAME_SIZE: u32 = 32;
pub const AEGP_MAX_ITEM_NAME_SIZE: u32 = 32;
pub const AEGP_MAX_LAYER_NAME_SIZE: u32 = 32;
pub const AEGP_MAX_MASK_NAME_SIZE: u32 = 32;
pub const AEGP_MAX_EFFECT_NAME_SIZE: u32 = 48;
pub const AEGP_MAX_EFFECT_MATCH_NAME_SIZE: u32 = 48;
pub const AEGP_MAX_EFFECT_CATEGORY_NAME_SIZE: u32 = 32;
pub const AEGP_MAX_STREAM_NAME_SIZE: u32 = 32;
pub const AEGP_MAX_STREAM_UNITS_SIZE: u32 = 32;
pub const AEGP_MAX_PROJ_NAME_SIZE: u32 = 48;
pub const AEGP_MAX_PLUGIN_NAME_SIZE: u32 = 32;
pub const AEGP_MAX_MARKER_NAME_SIZE: u32 = 64;
pub const AEGP_MAX_MARKER_URL_SIZE: u32 = 1024;
pub const AEGP_MAX_MARKER_TARGET_SIZE: u32 = 128;
pub const AEGP_MAX_MARKER_CHAPTER_SIZE: u32 = 128;
pub const AEGP_LayerIDVal_NONE: u32 = 0;
pub const AEGP_MaskIDVal_NONE: u32 = 0;
pub const AEGP_FramesPerFoot_35MM: u32 = 16;
pub const AEGP_FramesPerFoot_16MM: u32 = 40;
pub const kAEGPProjSuite: &[u8; 16] = b"AEGP Proj Suite\0";
pub const kAEGPProjSuiteVersion6: u32 = 9;
pub const kAEGPItemSuite: &[u8; 16] = b"AEGP Item Suite\0";
pub const kAEGPItemSuiteVersion9: u32 = 14;
pub const kAEGPItemViewSuite: &[u8; 21] = b"AEGP Item View Suite\0";
pub const kAEGPItemViewSuiteVersion1: u32 = 1;
pub const kAEGPSoundDataSuite: &[u8; 22] = b"AEGP Sound Data Suite\0";
pub const kAEGPSoundDataVersion1: u32 = 1;
pub const kAEGPCompSuite: &[u8; 16] = b"AEGP Comp Suite\0";
pub const kAEGPCompSuiteVersion12: u32 = 26;
pub const kAEGPMemorySuite: &[u8; 18] = b"AEGP Memory Suite\0";
pub const kAEGPMemorySuiteVersion1: u32 = 1;
pub const AEGP_REORDER_LAYER_TO_END: i32 = -1;
pub const kAEGPLayerSuite: &[u8; 17] = b"AEGP Layer Suite\0";
pub const kAEGPLayerSuiteVersion9: u32 = 15;
pub const kAEGPStreamSuite: &[u8; 18] = b"AEGP Stream Suite\0";
pub const kAEGPStreamSuiteVersion6: u32 = 11;
pub const AEGP_MAX_STREAM_MATCH_NAME_SIZE: u32 = 40;
pub const AEGP_StreamGroupName_MASK_PARADE: &[u8; 17] = b"ADBE Mask Parade\0";
pub const AEGP_StreamGroupName_MASK_ATOM: &[u8; 15] = b"ADBE Mask Atom\0";
pub const AEGP_StreamName_MASK_FEATHER: &[u8; 18] = b"ADBE Mask Feather\0";
pub const AEGP_StreamName_MASK_OPACITY: &[u8; 18] = b"ADBE Mask Opacity\0";
pub const AEGP_StreamName_MASK_OFFSET: &[u8; 17] = b"ADBE Mask Offset\0";
pub const AEGP_StreamGroupName_EFFECT_PARADE: &[u8; 19] = b"ADBE Effect Parade\0";
pub const AEGP_StreamGroupName_LAYER: &[u8; 20] = b"ADBE Abstract Layer\0";
pub const AEGP_StreamGroupName_AV_LAYER: &[u8; 14] = b"ADBE AV Layer\0";
pub const AEGP_StreamGroupName_TEXT_LAYER: &[u8; 16] = b"ADBE Text Layer\0";
pub const AEGP_StreamGroupName_CAMERA_LAYER: &[u8; 18] = b"ADBE Camera Layer\0";
pub const AEGP_StreamGroupName_LIGHT_LAYER: &[u8; 17] = b"ADBE Light Layer\0";
pub const AEGP_StreamGroupName_AUDIO: &[u8; 17] = b"ADBE Audio Group\0";
pub const AEGP_StreamGroupName_MATERIAL_OPTIONS: &[u8; 28] = b"ADBE Material Options Group\0";
pub const AEGP_StreamGroupName_TRANSFORM: &[u8; 21] = b"ADBE Transform Group\0";
pub const AEGP_StreamGroupName_LIGHT_OPTIONS: &[u8; 25] = b"ADBE Light Options Group\0";
pub const AEGP_StreamGroupName_CAMERA_OPTIONS: &[u8; 26] = b"ADBE Camera Options Group\0";
pub const kAEGPDynamicStreamSuite: &[u8; 26] = b"AEGP Dynamic Stream Suite\0";
pub const kAEGPDynamicStreamSuiteVersion4: u32 = 5;
pub const kAEGPKeyframeSuite: &[u8; 20] = b"AEGP Keyframe Suite\0";
pub const kAEGPKeyframeSuiteVersion5: u32 = 5;
pub const kAEGPTextDocumentSuite: &[u8; 25] = b"AEGP Text Document Suite\0";
pub const kAEGPTextDocumentSuiteVersion1: u32 = 1;
pub const kAEGPMarkerSuite: &[u8; 18] = b"AEGP Marker Suite\0";
pub const kAEGPMarkerSuiteVersion3: u32 = 3;
pub const kAEGPTextLayerSuite: &[u8; 22] = b"AEGP Text Layer Suite\0";
pub const kAEGPTextLayerSuiteVersion1: u32 = 1;
pub const AEGP_InstalledEffectKey_NONE: u32 = 0;
pub const kAEGPEffectSuite: &[u8; 18] = b"AEGP Effect Suite\0";
pub const kAEGPEffectSuiteVersion5: u32 = 5;
pub const kAEGPMaskSuite: &[u8; 22] = b"AEGP Layer Mask Suite\0";
pub const kAEGPMaskSuiteVersion6: u32 = 7;
pub const AEGP_VertexIndex_END: u32 = 10922;
pub const kAEGPMaskOutlineSuite: &[u8; 24] = b"AEGP Mask Outline Suite\0";
pub const kAEGPMaskOutlineSuiteVersion3: u32 = 5;
pub const AEGP_FOOTAGE_LAYER_NAME_LEN: u32 = 63;
pub const AEGP_LayerIndex_UNKNOWN: i32 = -2;
pub const AEGP_LayerIndex_MERGED: i32 = -1;
pub const AEGP_LayerID_UNKNOWN: i32 = -1;
pub const AEGP_ANY_FRAME: i32 = -1;
pub const AEGP_FOOTAGE_MAIN_FILE_INDEX: u32 = 0;
pub const kAEGPFootageSuite: &[u8; 19] = b"AEGP Footage Suite\0";
pub const kAEGPFootageSuiteVersion5: u32 = 11;
pub const AEGP_Command_ALL: u32 = 0;
pub const kAEGPRegisterSuite: &[u8; 20] = b"AEGP Register Suite\0";
pub const kAEGPRegisterSuiteVersion5: u32 = 6;
pub const AEGP_MENU_INSERT_SORTED: i32 = -2;
pub const AEGP_MENU_INSERT_AT_BOTTOM: i32 = -1;
pub const AEGP_MENU_INSERT_AT_TOP: u32 = 0;
pub const kAEGPCommandSuite: &[u8; 19] = b"AEGP Command Suite\0";
pub const kAEGPCommandSuiteVersion1: u32 = 1;
pub const kAEGPUtilitySuite: &[u8; 19] = b"AEGP Utility Suite\0";
pub const kAEGPUtilitySuiteVersion6: u32 = 13;
pub const kAEGPMathSuite: &[u8; 16] = b"AEGP Math Suite\0";
pub const kAEGPMathSuiteVersion1: u32 = 1;
pub const kAEGPColorSettingsSuite: &[u8; 24] = b"PF Color Settings Suite\0";
pub const kAEGPColorSettingsSuiteVersion6: u32 = 7;
pub const kAEGPRenderQueueSuite: &[u8; 24] = b"AEGP Render Queue Suite\0";
pub const kAEGPRenderQueueSuiteVersion1: u32 = 1;
pub const kAEGPRQItemSuite: &[u8; 29] = b"AEGP Render Queue Item Suite\0";
pub const kAEGPRQItemSuiteVersion4: u32 = 5;
pub const kAEGPOutputModuleSuite: &[u8; 25] = b"AEGP Output Module Suite\0";
pub const kAEGPOutputModuleSuiteVersion4: u32 = 4;
pub const kAEGPCanvasSuite: &[u8; 18] = b"AEGP Canvas Suite\0";
pub const kAEGPCanvasSuiteVersion8: u32 = 14;
pub const kAEGPArtisanUtilSuite: &[u8; 24] = b"AEGP Artisan Util Suite\0";
pub const kAEGPArtisanUtilSuiteVersion1: u32 = 1;
pub const kAEGPCameraSuite: &[u8; 18] = b"AEGP Camera Suite\0";
pub const kAEGPCameraSuiteVersion2: u32 = 2;
pub const kAEGPLightSuiteVersion2: u32 = 2;
pub const kAEGPLightSuite: &[u8; 17] = b"AEGP Light Suite\0";
pub const kAEGPLightSuiteVersion3: u32 = 3;
pub const kAEGPQueryXformSuite: &[u8; 22] = b"AEGP QueryXform Suite\0";
pub const kAEGPQueryXformSuiteVersion2: u32 = 4;
pub const kAEGPCompositeSuite: &[u8; 21] = b"AEGP Composite Suite\0";
pub const kAEGPCompositeSuiteVersion2: u32 = 4;
pub const kAEGPIterateSuite: &[u8; 19] = b"AEGP Iterate Suite\0";
pub const kAEGPIterateSuiteVersion2: u32 = 2;
pub const kAEGPPFInterfaceSuite: &[u8; 24] = b"AEGP PF Interface Suite\0";
pub const kAEGPPFInterfaceSuiteVersion1: u32 = 1;
pub const kAEGPIOInSuite: &[u8; 17] = b"AEGP IO In Suite\0";
pub const kAEGPIOInSuiteVersion6: u32 = 7;
pub const kAEGPIOOutSuite: &[u8; 18] = b"AEGP IO Out Suite\0";
pub const kAEGPIOOutSuiteVersion5: u32 = 8;
pub const kAEGPFIMSuite: &[u8; 31] = b"AEGP File Import Manager Suite\0";
pub const kAEGPFIMSuiteVersion4: u32 = 4;
pub const kAEGPPersistentDataSuite: &[u8; 27] = b"AEGP Persistent Data Suite\0";
pub const kAEGPPersistentDataSuiteVersion4: u32 = 4;
pub const kAEGPCollectionSuite: &[u8; 22] = b"AEGP Collection Suite\0";
pub const kAEGPCollectionSuiteVersion2: u32 = 2;
pub const kAEGPWorldSuite: &[u8; 17] = b"AEGP World Suite\0";
pub const kAEGPWorldSuiteVersion3: u32 = 3;
pub const kAEGPRenderOptionsSuite: &[u8; 26] = b"AEGP Render Options Suite\0";
pub const kAEGPRenderOptionsSuiteVersion4: u32 = 4;
pub const kAEGPLayerRenderOptionsSuite: &[u8; 32] = b"AEGP Layer Render Options Suite\0";
pub const kAEGPLayerRenderOptionsSuiteVersion2: u32 = 2;
pub const kAEGPRenderSuite: &[u8; 18] = b"AEGP Render Suite\0";
pub const kAEGPRenderSuiteVersion5: u32 = 8;
pub const kAEGPRenderAsyncManagerSuite: &[u8; 31] = b"AEGP Render Asyc Manager Suite\0";
pub const kAEGPRenderAsyncManagerSuiteVersion1: u32 = 1;
pub const kAEGPTrackerSuite: &[u8; 19] = b"AEGP Tracker Suite\0";
pub const kAEGPTrackerSuiteVersion1: u32 = 1;
pub const kAEGPTrackerUtilitySuite: &[u8; 27] = b"AEGP Tracker Utility Suite\0";
pub const kAEGPTrackerUtilitySuiteVersion1: u32 = 1;
pub const kAEGPRenderQueueMonitorSuite: &[u8; 31] = b"AEGP RenderQueue Monitor Suite\0";
pub const kAEGPRenderQueueMonitorSuiteVersion1: u32 = 1;
pub const kPFEffectSequenceDataSuite: &[u8; 30] = b"PF Effect Sequence Data Suite\0";
pub const kPFEffectSequenceDataSuiteVersion1: u32 = 1;
pub const kAEGPCanvasSuiteVersion1: u32 = 4;
pub const kAEGPRQItemSuiteVersion3: u32 = 4;
pub const kAEGPRQItemSuiteVersion2: u32 = 3;
pub const kAEGPRQItemSuiteVersion1: u32 = 1;
pub const kAEGPCanvasSuiteVersion2: u32 = 6;
pub const kAEGPCanvasSuiteVersion4: u32 = 9;
pub const kAEGPCanvasSuiteVersion5: u32 = 10;
pub const kAEGPCanvasSuiteVersion6: u32 = 11;
pub const kAEGPCanvasSuiteVersion7: u32 = 13;
pub const kAEGPMaskOutlineSuiteVersion2: u32 = 3;
pub const kAEGPMaskOutlineSuiteVersion1: u32 = 2;
pub const kAEGPCompSuiteVersion11: u32 = 25;
pub const kAEGPCompSuiteVersion10: u32 = 21;
pub const kAEGPCompSuiteVersion9: u32 = 19;
pub const kAEGPCompSuiteVersion8: u32 = 18;
pub const kAEGPCompSuiteVersion7: u32 = 15;
pub const kAEGPCompSuiteVersion6: u32 = 14;
pub const kAEGPCompSuiteVersion5: u32 = 11;
pub const kAEGPCompSuiteVersion4: u32 = 9;
pub const kAEGPCompSuiteVersion3: u32 = 7;
pub const kAEGPCompSuiteVersion2: u32 = 6;
pub const kAEGPCompSuiteVersion1: u32 = 4;
pub const kAEGPLayerSuiteVersion8: u32 = 14;
pub const kAEGPLayerSuiteVersion7: u32 = 13;
pub const kAEGPLayerSuiteVersion6: u32 = 12;
pub const kAEGPLayerSuiteVersion5: u32 = 11;
pub const kAEGPLayerSuiteVersion4: u32 = 10;
pub const kAEGPLayerSuiteVersion3: u32 = 8;
pub const kAEGPStreamSuiteVersion5: u32 = 10;
pub const kAEGPStreamSuiteVersion4: u32 = 9;
pub const kAEGPStreamSuiteVersion3: u32 = 8;
pub const kAEGPStreamSuiteVersion2: u32 = 7;
pub const kAEGPStreamSuiteVersion1: u32 = 4;
pub const kAEGPLayerSuiteVersion1: u32 = 5;
pub const kAEGPLayerSuiteVersion2: u32 = 7;
pub const kAEGPEffectSuiteVersion1: u32 = 1;
pub const kAEGPEffectSuiteVersion2: u32 = 2;
pub const kAEGPEffectSuiteVersion3: u32 = 3;
pub const kAEGPEffectSuiteVersion4: u32 = 4;
pub const kAEGPLightSuiteVersion1: u32 = 1;
pub const kAEGPMaskSuiteVersion5: u32 = 6;
pub const kAEGPMaskSuiteVersion4: u32 = 5;
pub const kAEGPMaskSuiteVersion3: u32 = 4;
pub const kAEGPMaskSuiteVersion1: u32 = 2;
pub const kAEGPMaskSuiteVersion2: u32 = 3;
pub const kAEGPCameraSuiteVersion1: u32 = 1;
pub const kAEGPItemSuiteVersion8: u32 = 13;
pub const kAEGPItemSuiteVersion7: u32 = 11;
pub const kAEGPItemSuiteVersion6: u32 = 10;
pub const kAEGPItemSuiteVersion5: u32 = 7;
pub const kAEGPItemSuiteVersion4: u32 = 6;
pub const kAEGPItemSuiteVersion3: u32 = 5;
pub const kAEGPKeyframeSuiteVersion4: u32 = 4;
pub const kAEGPKeyframeSuiteVersion3: u32 = 3;
pub const kAEGPKeyframeSuiteVersion2: u32 = 2;
pub const kAEGPKeyframeSuiteVersion1: u32 = 1;
pub const kAEGPItemSuiteVersion2: u32 = 4;
pub const kAEGPItemSuiteVersion1: u32 = 3;
pub const kAEGPUtilitySuiteVersion5: u32 = 11;
pub const kAEGPUtilitySuiteVersion4: u32 = 10;
pub const kAEGPUtilitySuiteVersion3: u32 = 7;
pub const kAEGPUtilitySuiteVersion2: u32 = 5;
pub const kAEGPUtilitySuiteVersion1: u32 = 3;
pub const kAEGPQueryXformSuiteVersion1: u32 = 1;
pub const kAEGPRenderSuiteVersion1: u32 = 1;
pub const kAEGPRenderSuiteVersion2: u32 = 2;
pub const kAEGPRenderSuiteVersion3: u32 = 3;
pub const kAEGPRenderSuiteVersion4: u32 = 5;
pub const kAEGPWorldSuiteVersion2: u32 = 2;
pub const kAEGPWorldSuiteVersion1: u32 = 1;
pub const kAEGPCollectionSuiteVersion1: u32 = 1;
pub const kAEGPDynamicStreamSuiteVersion1: u32 = 1;
pub const kAEGPDynamicStreamSuiteVersion2: u32 = 2;
pub const kAEGPDynamicStreamSuiteVersion3: u32 = 3;
pub const kAEGPRenderOptionsSuiteVersion3: u32 = 3;
pub const kAEGPRenderOptionsSuiteVersion2: u32 = 2;
pub const kAEGPRenderOptionsSuiteVersion1: u32 = 1;
pub const kAEGPLayerRenderOptionsSuiteVersion1: u32 = 1;
pub const kAEGPColorSettingsSuiteVersion1: u32 = 1;
pub const kAEGPColorSettingsSuiteVersion2: u32 = 3;
pub const kAEGPColorSettingsSuiteVersion3: u32 = 4;
pub const kAEGPColorSettingsSuiteVersion4: u32 = 5;
pub const kAEGPColorSettingsSuiteVersion5: u32 = 6;
pub const kAEGPMarkerSuiteVersion1: u32 = 1;
pub const kAEGPMarkerSuiteVersion2: u32 = 2;
pub const kAEGPProjSuiteVersion5: u32 = 8;
pub const kAEGPPersistentDataSuiteVersion3: u32 = 3;
pub const kAEGPIterateSuiteVersion1: u32 = 1;
pub const kAEGPIOInSuiteVersion5: u32 = 6;
pub const kAEGPIOInSuiteVersion4: u32 = 5;
pub const kAEGPIOOutSuiteVersion4: u32 = 7;
pub const kAEGPFIMSuiteVersion3: u32 = 3;
pub const kPFPixelFormatSuiteVersion1: u32 = 1;
pub const kPFPixelFormatSuiteVersion: u32 = 1;
pub const kPFBackgroundFrameSuite: &[u8; 26] = b"PF Background Frame Suite\0";
pub const kPFBackgroundFrameSuiteVersion1: u32 = 1;
pub const kPFBackgroundFrameSuiteVersion: u32 = 1;
pub const kPFUtilitySuite: &[u8; 17] = b"PF Utility Suite\0";
pub const kPFUtilitySuiteVersion2: u32 = 2;
pub const kPFUtilitySuiteVersion3: u32 = 3;
pub const kPFUtilitySuiteVersion4: u32 = 4;
pub const kPFUtilitySuiteVersion5: u32 = 5;
pub const kPFUtilitySuiteVersion6: u32 = 6;
pub const kPFUtilitySuiteVersion7: u32 = 7;
pub const kPFUtilitySuiteVersion8: u32 = 8;
pub const kPFUtilitySuiteVersion9: u32 = 9;
pub const kPFUtilitySuiteVersion: u32 = 9;
pub const kPFSourceSettingsSuite: &[u8; 25] = b"PF Source Settings Suite\0";
pub const kPFSourceSettingsSuiteVersion: u32 = 1;
pub const kPFTransitionSuite: &[u8; 20] = b"PF Transition Suite\0";
pub const kPFTransitionSuiteVersion1: u32 = 1;
pub const kPFTransitionSuiteVersion2: u32 = 2;
pub const kPFTransitionSuiteVersion: u32 = 2;
pub const kDRAWBOT_DrawSuite: &[u8; 19] = b"DRAWBOT Draw Suite\0";
pub const kDRAWBOT_DrawSuite_Version1: u32 = 1;
pub const kDRAWBOT_DrawSuite_VersionCurrent: u32 = 1;
pub const kDRAWBOT_SupplierSuite: &[u8; 23] = b"DRAWBOT Supplier Suite\0";
pub const kDRAWBOT_SupplierSuite_Version1: u32 = 1;
pub const kDRAWBOT_SupplierSuite_VersionCurrent: u32 = 1;
pub const kDRAWBOT_SurfaceSuite: &[u8; 22] = b"DRAWBOT Surface Suite\0";
pub const kDRAWBOT_SurfaceSuite_Version1: u32 = 1;
pub const kDRAWBOT_SurfaceSuite_Version2: u32 = 2;
pub const kDRAWBOT_SurfaceSuite_VersionCurrent: u32 = 2;
pub const kDRAWBOT_PathSuite: &[u8; 19] = b"DRAWBOT Path Suite\0";
pub const kDRAWBOT_PathSuite_Version1: u32 = 1;
pub const kDRAWBOT_PathSuite_VersionCurrent: u32 = 1;
pub const kDRAWBOT_PenSuite: &[u8; 18] = b"DRAWBOT Pen Suite\0";
pub const kDRAWBOT_PenSuite_Version1: u32 = 1;
pub const kDRAWBOT_PenSuite_VersionCurrent: u32 = 1;
pub const kDRAWBOT_ImageSuite: &[u8; 20] = b"DRAWBOT Image Suite\0";
pub const kDRAWBOT_ImageSuite_Version1: u32 = 1;
pub const kDRAWBOT_ImageSuite_VersionCurrent: u32 = 1;
pub const kPrSDKStringSuite: &[u8; 22] = b"MediaCore StringSuite\0";
pub const kPrSDKStringSuiteVersion: u32 = 1;
pub type A_long = i32;
pub type A_u_long = u32;
pub type A_char = ::std::os::raw::c_char;
pub type A_FpLong = f64;
pub type A_FpShort = f32;
pub type A_Err = A_long;
pub type A_Handle = *mut ::std::os::raw::c_void;
pub type A_Fixed = A_long;
pub type A_UFixed = A_u_long;
pub type A_short = ::std::os::raw::c_short;
pub type A_u_short = ::std::os::raw::c_ushort;
pub type A_u_char = ::std::os::raw::c_uchar;
pub type A_Boolean = ::std::os::raw::c_uchar;
pub type A_intptr_t = ::std::os::raw::c_longlong;
pub type A_u_longlong = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct A_Time {
    pub value: A_long,
    pub scale: A_u_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct A_Ratio {
    pub num: A_long,
    pub den: A_u_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct A_FloatPoint {
    pub x: A_FpLong,
    pub y: A_FpLong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct A_FloatPoint3 {
    pub x: A_FpLong,
    pub y: A_FpLong,
    pub z: A_FpLong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct A_FloatRect {
    pub left: A_FpLong,
    pub top: A_FpLong,
    pub right: A_FpLong,
    pub bottom: A_FpLong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct A_Matrix3 {
    pub mat: [[A_FpLong; 3usize]; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct A_Matrix4 {
    pub mat: [[A_FpLong; 4usize]; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct A_LegacyRect {
    pub top: A_short,
    pub left: A_short,
    pub bottom: A_short,
    pub right: A_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct A_LRect {
    pub left: A_long,
    pub top: A_long,
    pub right: A_long,
    pub bottom: A_long,
}
pub type A_Rect = A_LRect;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct A_LPoint {
    pub x: A_long,
    pub y: A_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct A_FloatPolar {
    pub radius: A_FpLong,
    pub angle: A_FpLong,
}
pub type A_HandleSize = A_u_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct A_Color {
    pub alpha: A_FpLong,
    pub red: A_FpLong,
    pub green: A_FpLong,
    pub blue: A_FpLong,
}
pub const A_Err_NONE: _bindgen_ty_1 = 0;
pub const A_Err_GENERIC: _bindgen_ty_1 = 1;
pub const A_Err_STRUCT: _bindgen_ty_1 = 2;
pub const A_Err_PARAMETER: _bindgen_ty_1 = 3;
pub const A_Err_ALLOC: _bindgen_ty_1 = 4;
pub const A_Err_WRONG_THREAD: _bindgen_ty_1 = 5;
pub const A_Err_CONST_PROJECT_MODIFICATION: _bindgen_ty_1 = 6;
pub const A_Err_RESERVED_7: _bindgen_ty_1 = 7;
pub const A_Err_RESERVED_8: _bindgen_ty_1 = 8;
pub const A_Err_RESERVED_9: _bindgen_ty_1 = 9;
pub const A_Err_RESERVED_10: _bindgen_ty_1 = 10;
pub const A_Err_RESERVED_11: _bindgen_ty_1 = 11;
pub const A_Err_RESERVED_12: _bindgen_ty_1 = 12;
pub const A_Err_MISSING_SUITE: _bindgen_ty_1 = 13;
pub const A_Err_RESERVED_14: _bindgen_ty_1 = 14;
pub const A_Err_RESERVED_15: _bindgen_ty_1 = 15;
pub const A_Err_RESERVED_16: _bindgen_ty_1 = 16;
pub const A_Err_RESERVED_17: _bindgen_ty_1 = 17;
pub const A_Err_RESERVED_18: _bindgen_ty_1 = 18;
pub const A_Err_RESERVED_19: _bindgen_ty_1 = 19;
pub const A_Err_RESERVED_20: _bindgen_ty_1 = 20;
pub const A_Err_RESERVED_21: _bindgen_ty_1 = 21;
pub const A_Err_NOT_IN_CACHE_OR_COMPUTE_PENDING: _bindgen_ty_1 = 22;
pub const A_Err_PROJECT_LOAD_FATAL: _bindgen_ty_1 = 23;
pub const A_Err_EFFECT_APPLY_FATAL: _bindgen_ty_1 = 24;
pub const A_Err_LAST: _bindgen_ty_1 = 25;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct A_Version {
    pub majorS: A_short,
    pub minorS: A_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Up_OpaqueMem {
    _unused: [u8; 0],
}
pub type AEGP_MemHandle = *mut *mut _Up_OpaqueMem;
pub type A_UTF16Char = A_u_short;
pub type A_LegacyEnumType = A_long;
pub type PFVersionInfo = A_u_long;
pub const PF_Stage_DEVELOP: _bindgen_ty_2 = 0;
pub const PF_Stage_ALPHA: _bindgen_ty_2 = 1;
pub const PF_Stage_BETA: _bindgen_ty_2 = 2;
pub const PF_Stage_RELEASE: _bindgen_ty_2 = 3;
pub type _bindgen_ty_2 = ::std::os::raw::c_int;
pub type PF_Stage = A_long;
pub const PF_Quality_DRAWING_AUDIO: _bindgen_ty_3 = -1;
pub const PF_Quality_LO: _bindgen_ty_3 = 0;
pub const PF_Quality_HI: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = ::std::os::raw::c_int;
pub type PF_Quality = A_long;
pub const PF_MF_Alpha_PREMUL: _bindgen_ty_4 = 0;
pub const PF_MF_Alpha_STRAIGHT: _bindgen_ty_4 = 1;
pub type _bindgen_ty_4 = ::std::os::raw::c_int;
pub type PF_ModeFlags = A_long;
pub const PF_Field_FRAME: _bindgen_ty_5 = 0;
pub const PF_Field_UPPER: _bindgen_ty_5 = 1;
pub const PF_Field_LOWER: _bindgen_ty_5 = 2;
pub type _bindgen_ty_5 = ::std::os::raw::c_int;
pub type PF_Field = A_long;
pub const PF_Param_RESERVED: _bindgen_ty_6 = -1;
pub const PF_Param_LAYER: _bindgen_ty_6 = 0;
pub const PF_Param_SLIDER: _bindgen_ty_6 = 1;
pub const PF_Param_FIX_SLIDER: _bindgen_ty_6 = 2;
pub const PF_Param_ANGLE: _bindgen_ty_6 = 3;
pub const PF_Param_CHECKBOX: _bindgen_ty_6 = 4;
pub const PF_Param_COLOR: _bindgen_ty_6 = 5;
pub const PF_Param_POINT: _bindgen_ty_6 = 6;
pub const PF_Param_POPUP: _bindgen_ty_6 = 7;
pub const PF_Param_CUSTOM: _bindgen_ty_6 = 8;
pub const PF_Param_NO_DATA: _bindgen_ty_6 = 9;
pub const PF_Param_FLOAT_SLIDER: _bindgen_ty_6 = 10;
pub const PF_Param_ARBITRARY_DATA: _bindgen_ty_6 = 11;
pub const PF_Param_PATH: _bindgen_ty_6 = 12;
pub const PF_Param_GROUP_START: _bindgen_ty_6 = 13;
pub const PF_Param_GROUP_END: _bindgen_ty_6 = 14;
pub const PF_Param_BUTTON: _bindgen_ty_6 = 15;
pub const PF_Param_RESERVED2: _bindgen_ty_6 = 16;
pub const PF_Param_RESERVED3: _bindgen_ty_6 = 17;
pub const PF_Param_POINT_3D: _bindgen_ty_6 = 18;
pub type _bindgen_ty_6 = ::std::os::raw::c_int;
pub type PF_ParamType = A_long;
pub const PF_ParamFlag_RESERVED1: _bindgen_ty_7 = 1;
pub const PF_ParamFlag_CANNOT_TIME_VARY: _bindgen_ty_7 = 2;
pub const PF_ParamFlag_CANNOT_INTERP: _bindgen_ty_7 = 4;
pub const PF_ParamFlag_RESERVED2: _bindgen_ty_7 = 8;
pub const PF_ParamFlag_RESERVED3: _bindgen_ty_7 = 16;
pub const PF_ParamFlag_COLLAPSE_TWIRLY: _bindgen_ty_7 = 32;
pub const PF_ParamFlag_SUPERVISE: _bindgen_ty_7 = 64;
pub const PF_ParamFlag_START_COLLAPSED: _bindgen_ty_7 = 32;
pub const PF_ParamFlag_USE_VALUE_FOR_OLD_PROJECTS: _bindgen_ty_7 = 128;
pub const PF_ParamFlag_LAYER_PARAM_IS_TRACKMATTE: _bindgen_ty_7 = 128;
pub const PF_ParamFlag_EXCLUDE_FROM_HAVE_INPUTS_CHANGED: _bindgen_ty_7 = 256;
pub const PF_ParamFlag_SKIP_REVEAL_WHEN_UNHIDDEN: _bindgen_ty_7 = 512;
pub type _bindgen_ty_7 = ::std::os::raw::c_int;
pub type PF_ParamFlags = A_long;
pub const PF_Err_NONE: _bindgen_ty_8 = 0;
pub const PF_Err_OUT_OF_MEMORY: _bindgen_ty_8 = 4;
pub const PF_Err_INTERNAL_STRUCT_DAMAGED: _bindgen_ty_8 = 512;
pub const PF_Err_INVALID_INDEX: _bindgen_ty_8 = 513;
pub const PF_Err_UNRECOGNIZED_PARAM_TYPE: _bindgen_ty_8 = 514;
pub const PF_Err_INVALID_CALLBACK: _bindgen_ty_8 = 515;
pub const PF_Err_BAD_CALLBACK_PARAM: _bindgen_ty_8 = 516;
pub const PF_Interrupt_CANCEL: _bindgen_ty_8 = 517;
pub const PF_Err_CANNOT_PARSE_KEYFRAME_TEXT: _bindgen_ty_8 = 518;
pub type _bindgen_ty_8 = ::std::os::raw::c_int;
pub type PF_Err = A_long;
pub const PF_WorldFlag_DEEP: _bindgen_ty_9 = 1;
pub const PF_WorldFlag_WRITEABLE: _bindgen_ty_9 = 2;
pub const PF_WorldFlag_RESERVED0: _bindgen_ty_9 = 16777216;
pub const PF_WorldFlag_RESERVED1: _bindgen_ty_9 = 33554432;
pub const PF_WorldFlag_RESERVED2: _bindgen_ty_9 = 67108864;
pub const PF_WorldFlag_RESERVED3: _bindgen_ty_9 = 134217728;
pub const PF_WorldFlag_RESERVED4: _bindgen_ty_9 = 268435456;
pub const PF_WorldFlag_RESERVED5: _bindgen_ty_9 = 536870912;
pub const PF_WorldFlag_RESERVED6: _bindgen_ty_9 = 1073741824;
pub const PF_WorldFlag_RESERVED: _bindgen_ty_9 = -2147483648;
pub type _bindgen_ty_9 = ::std::os::raw::c_int;
pub type PF_WorldFlags = A_long;
pub const PF_OutFlag_NONE: _bindgen_ty_10 = 0;
pub const PF_OutFlag_KEEP_RESOURCE_OPEN: _bindgen_ty_10 = 1;
pub const PF_OutFlag_WIDE_TIME_INPUT: _bindgen_ty_10 = 2;
pub const PF_OutFlag_NON_PARAM_VARY: _bindgen_ty_10 = 4;
pub const PF_OutFlag_RESERVED6: _bindgen_ty_10 = 8;
pub const PF_OutFlag_SEQUENCE_DATA_NEEDS_FLATTENING: _bindgen_ty_10 = 16;
pub const PF_OutFlag_I_DO_DIALOG: _bindgen_ty_10 = 32;
pub const PF_OutFlag_USE_OUTPUT_EXTENT: _bindgen_ty_10 = 64;
pub const PF_OutFlag_SEND_DO_DIALOG: _bindgen_ty_10 = 128;
pub const PF_OutFlag_DISPLAY_ERROR_MESSAGE: _bindgen_ty_10 = 256;
pub const PF_OutFlag_I_EXPAND_BUFFER: _bindgen_ty_10 = 512;
pub const PF_OutFlag_PIX_INDEPENDENT: _bindgen_ty_10 = 1024;
pub const PF_OutFlag_I_WRITE_INPUT_BUFFER: _bindgen_ty_10 = 2048;
pub const PF_OutFlag_I_SHRINK_BUFFER: _bindgen_ty_10 = 4096;
pub const PF_OutFlag_WORKS_IN_PLACE: _bindgen_ty_10 = 8192;
pub const PF_OutFlag_RESERVED8: _bindgen_ty_10 = 16384;
pub const PF_OutFlag_CUSTOM_UI: _bindgen_ty_10 = 32768;
pub const PF_OutFlag_RESERVED7: _bindgen_ty_10 = 65536;
pub const PF_OutFlag_REFRESH_UI: _bindgen_ty_10 = 131072;
pub const PF_OutFlag_NOP_RENDER: _bindgen_ty_10 = 262144;
pub const PF_OutFlag_I_USE_SHUTTER_ANGLE: _bindgen_ty_10 = 524288;
pub const PF_OutFlag_I_USE_AUDIO: _bindgen_ty_10 = 1048576;
pub const PF_OutFlag_I_AM_OBSOLETE: _bindgen_ty_10 = 2097152;
pub const PF_OutFlag_FORCE_RERENDER: _bindgen_ty_10 = 4194304;
pub const PF_OutFlag_PiPL_OVERRIDES_OUTDATA_OUTFLAGS: _bindgen_ty_10 = 8388608;
pub const PF_OutFlag_I_HAVE_EXTERNAL_DEPENDENCIES: _bindgen_ty_10 = 16777216;
pub const PF_OutFlag_DEEP_COLOR_AWARE: _bindgen_ty_10 = 33554432;
pub const PF_OutFlag_SEND_UPDATE_PARAMS_UI: _bindgen_ty_10 = 67108864;
pub const PF_OutFlag_AUDIO_FLOAT_ONLY: _bindgen_ty_10 = 134217728;
pub const PF_OutFlag_AUDIO_IIR: _bindgen_ty_10 = 268435456;
pub const PF_OutFlag_I_SYNTHESIZE_AUDIO: _bindgen_ty_10 = 536870912;
pub const PF_OutFlag_AUDIO_EFFECT_TOO: _bindgen_ty_10 = 1073741824;
pub const PF_OutFlag_AUDIO_EFFECT_ONLY: _bindgen_ty_10 = -2147483648;
#[doc = " -------------------- Output Flags --------------------\n\nThe out_flags field of the OutData can be set to an OR-ed\ncombination of these flags to communicate various things to\nthe driver program.  The flags are described here:\n\nPF_OutFlag_NONE\nThis is the \"empty\" setting -- no outflags.\n\nPF_OutFlag_WIDE_TIME_INPUT\nSet this flag if the effect calls get_param to inquire a\nparameter at a time besides the current one (e.g. to get\nthe previous video frame). This should be sent, if it is\ngoing to be sent, at PF_Cmd_GLOBAL_SETUP. Can be over-ridden\ndynamically during PF_Cmd_QUERY_DYNAMIC_FLAGS.\n\nAs of AE10, this flag is no longer recommended. It still works the\nsame way and is safe to set, but there's a more efficient option.\nSee PF_OutFlag2_AUTOMATIC_WIDE_TIME_INPUT.\n\nPF_OutFlag_NON_PARAM_VARY\nSet this if the effect uses information other than the parameters\nin the param list to generate its output at the current time.\nFor instance, if the effect uses the current time of the frame\nor some random value to decide the output, set this flag.  This\nflag should be sent at PF_Cmd_GLOBAL_SETUP.  If the effect\nproduces changing frames when applied to a still image and\nall parameters are constant, that's a sure sign that this bit\nshould be set (e.g. Wave Warp).\tCan be over-ridden dynamically\nduring PF_Cmd_QUERY_DYNAMIC_FLAGS.\n\nPF_OutFlag_SEQUENCE_DATA_NEEDS_FLATTENING\nWhen you allocate a sequence data handle, the app\nmay write the handle out to disk and reuse it\nlater. Pass this flag if the handle is not \"flat\"\n(i.e. has pointers or handles hanging off of it).\nBasically, this gives you a chance to alter the\nhandle contents before it is written out to disk,\nso  you won't get invalid handles or pointers. Once\nyou have flattened a handle, you will get an\nopportunity to un-flatten it before the effect\nneeds to continue. For sequence data, you will be\ninvoked with a PF_Cmd_SEQUENCE_RESETUP call. You\nshould store a boolean at a common  offset in your\nunflattened and flattened data that says whether\nthe data is flat or not. If you get a\nPF_Cmd_SEQUENCE_RESETUP and the boolean indicated\nthe data is flattened, you should  unflatten the\ndata, free the flattened data handle, and set the\nsequence_data handle in the  PF_OutData. If you\never set the data to NULL when you flatten it, you\nwill NOT get the sequence  resetup call to\nunflatten it. Instead, you may just get a RENDER\ncall with NULL data. Forewarned is  forearmed. This\nflag, indicating if the data will need to be\nflattened, should be set at  PF_Cmd_GLOBAL_SETUP time.\n\nPF_OutFlag_I_DO_DIALOG\nSet this is the effect responds to a PF_Cmd_DO_DIALOG, i.e. Does this\neffect bring up an options dialog box.  PF_Cmd_DO_DIALOG is generated\nwhen the user presses the Options button on the Effect floater.\nThis flag should be set at PF_Cmd_GLOBAL_SETUP time.\n\nPF_OutFlag_USE_OUTPUT_EXTENT\nThe output layer is passed with an \"extent rect\" indicating\nthe area of the layer that actually contains visible image data.  If\nthe effect changes its behavior based on the extent rect (for instance,\nby not iterating over the entire image), set this flag, so the\napplication will know whether having the extent\tchange should cause\nthe frame to re-render.  Specify this flag at PF_Cmd_GLOBAL_SETUP.\n\nPF_OutFlag_SEND_DO_DIALOG\nSome filters need their options dialog box to be brought up at least\nonce to be valid.  You can set this flag, and the driver app will\nautomatically send a PF_Cmd_DO_DIALOG to the effect when it is applied.\nThe DO_DIALOG will be sent after PF_Cmd_SEQUENCE_SETUP.  This flag\nshould be set in PF_Cmd_SEQUENCE_SETUP if it is going to be set.\n\nPF_OutFlag_DISPLAY_ERROR_MESSAGE\nWhenever the return_msg field in the PF_OutData is set to a string,\nAfter Effects will bring up a simple dialog box containing that\nstring.  If you set this flag, the dialog box will be made to look\nlike an error message dialog box.  If you don't set this flag, it\nwill be an undecorated dialog box.  Using this flag, an effects module\ncan have and display its own error messages and not worry about the\ncode for dialog boxes -- the program will do it for you.\nThis flag can be sent after any command.\n\nPF_OutFlag_I_EXPAND_BUFFER\nStarting with After Effects 2.0, effects will be able to expand their buffers\nbeyond the current layer's dimensions. This has always been part of the\nPF specification, but as an extra precaution (and hint to the AE rendering\nengine) set this flag at PF_Cmd_GLOBAL_SETUP if you plan to expand your\nbuffer.\n\nPF_OutFlag_I_SHRINK_BUFFER\nSet this flag if you can shrink your buffer based on the extent-rects passed\nto you in order to be more memory efficient.\n\nPF_OutFlag_PIX_INDEPENDENT\nSet this flag if the output at a given pixel is not dependent on the values\nof the pixels around it. If this is set, the pixels After Effects does not\ncare about (because of field rendering, for example) could be filled with garbage\ncolors.  Please set this flag at PF_Cmd_GLOBAL_SETUP. Can be over-ridden\ndynamically during PF_Cmd_QUERY_DYNAMIC_FLAGS.\n\nPF_OutFlag_I_WRITE_INPUT_BUFFER\nSet this flag if your effect would like to write into the input buffer. This\ncan be useful if you need an scratch buffer, but it also invalidates some speedups\nin the AE rendering pipeline, so use it with some discretion. Please set this\nflag at PF_Cmd_GLOBAL_SETUP.\n\nPF_OutFlag_KEEP_RESOURCE_OPEN\n\nObsoleted in AE 2015 (does nothing when set).\n\nSet this flag if your effect expects its Macintosh resource fork to be open\nat any time other than global setup.  Note that this does not mean that\nthe resource fork will be kept open at all times, just whenever the\neffect is being executed.\n\nPF_OutFlag_NOP_RENDER\n\nSet this flag in PF_Cmd_GLOBAL_SETUP if the render would never result in changes\nto the source image (or audio?). For example, an expression control would set this.\n\nPF_OutFlag_CUSTOM_UI\n\nThis flag must be set if your effect has a custom UI in the Effect Controls\nWindow, Layer Window or Comp Window.\n\nPF_OutFlag2_CUSTOM_UI_ASYNC_MANAGER\t(new in 13.5)\n\nThis flags enables use of AEGP_CheckoutOrRender_*_AsyncManager() calls\nwhich avoid the need for plugin management of the lifetime of async custom UI renders from the UI thread.\nThe plugin asks for what frames it needs and the manager calls PF_Event_DRAW again when they are available\n(or cancels them as needed automatically).  The plugin responds in PF_Event_DRAW by asking for what it needs\nand drawing what it can from what is available.\n\nDue to separation of Render thread and UI thread in 13.5, frames for custom UI should no longer be\nrendered synchronously (see RenderSuite5 for more details). The manager simplifies this, especially when\nthere are multiple requests needed for DRAW.\n\nWhen enabled, this flag associates a \"PF_AsyncManager\" with the NEW_CONTEXT/CLOSE_CONTEXT and PF_Event_DRAW\nthat will automatically track completion of 1 or more asynch render requests made for drawing custom UI.\nAs requests complete,  PF_Event_DRAW will be called again and the current state of the CUSTOM_UI can be drawn.\nSuch requests may be canceled automatically as the user scrubs the time needle or project changes are made and\nbecome invalid.\n\nThis flag is used in addition to the CUSTOM_UI flag during PF_Cmd_GLOBAL_SETUP\n\nPF_OutFlag_REFRESH_UI\n\nCan be returned from PF_Cmd_EVENT, PF_Cmd_RENDER, and PF_Cmd_DO_DIALOG.\nCauses the effects control window, layer window, and comp window to be re-drawn.\n\nPF_OutFlag_I_USE_SHUTTER_ANGLE\n\nMust be set at PF_Cmd_GLOBAL_SETUP time if the effect uses\nthe shutter_angle or the shutter_phase. Can be over-ridden dynamically during\nPF_Cmd_QUERY_DYNAMIC_FLAGS.\n\nPF_OutFlag_I_USE_AUDIO\n\nMust be set at PF_Cmd_GLOBAL_SETUP time for a visual effect\nthat calls the audio checkout calls.\n\nPF_OutFlag_I_AM_OBSOLETE\n\nSet at PF_Cmd_GLOBAL_SETUP time for effects that don't\nwant to appear in the AE Effects menu (but will still be invoked\nif you load a project that has an old copy of the effect applied).\n\nPF_OutFlag_FORCE_RERENDER\n\nSet at PF_Cmd_EVENT if the effect modified sequence data,\nor did anything else that requires the effect needs to re-render.\nNote that setting PF_ChangeFlag_CHANGED_VALUE automatically\ncauses a re-render, so don't worry about setting PF_OutFlag_FORCE_RERENDER\nin that case. Also, I_MIX_GUID_DEPENDENCIES can be used to trigger a rerender on\ndependant changes if sequence_data has not been changed.\n\nIMPORTANT: FORCE_RERENDER should be used as a last resort. Long term we should be eliminating the need for this\nbecause it causes forced cache invalidation that doesn't work well with undo.\nOnce we have the full set of APIs in place needed to manage render state, we will be able to deprecate this.\nPrefer using ARB data + CHANGED_VALUE or I_MIX_GUID_DEPENDENCIES when possible instead.\n\nIn 13.5 the split between a UI and render threads means that FORCE_RERENDER will now also have the needed\nside effect of copying sequence_data state to the render project.  This can be expensive if the sequence_data is large.\nSupport GET_FLATTENED_SEQUENCE_DATA to prevent deallocation of your sequence_data, which can help.\nGET_FLATTENED_SEQUENCE_DATA support is required for FORCE_RERENDER use in custom mouse/key events.\n\nPF_OutFlag_PiPL_OVERRIDES_OUTDATA_OUTFLAGS\n\nValid only for setting in your PiPL.  When set out_flags will be\nignored at PF_Cmd_GLOBAL_SETUP time (& thus don't need to match).\n\nPF_OutFlag_I_HAVE_EXTERNAL_DEPENDENCIES\n\nSet this flag at PF_Cmd_GLOBAL_SETUP time if the effect has dependencies\nthat the user should know about before transporting their project to a\ndifferent machine.  For example, dependencies on an installed font,\nor on an external file.  If set, the effect will receive a\nPF_Cmd_GET_EXTERNAL_DEPENDENCIES request, where the extra\nparam will be a PF_ExtDependenciesExtra, and the effect should\nreport its information based on the given sequence_data.\n\nPF_OutFlag_SEND_UPDATE_PARAMS_UI\n\nSet this flag at PF_Cmd_GLOBAL_SETUP time if you want to receive\nPF_Cmd_UPDATE_PARAMS_UI messages.\n\nPF_OutFlag_AUDIO_FLOAT_ONLY\n\nSet this flag if you only want to receive PF_SIGNED_FLOAT data\nwhen processing audio data.  Requires PF_OutFlag_AUDIO_EFFECT_TOO\nor PF_OutFlag_AUDIO_EFFECT_ONLY.\n\nPF_OutFlag_AUDIO_IIR\n\nSet this flag at PF_Cmd_GLOBAL_SETUP time if you are an\nInfinite-Impulse-Response audio filter (i.e. your output at a given\ntime depends on your output from previous times).\n\nPF_OutFlag_I_SYNTHESIZE_AUDIO\n\nSet this flag at PF_Cmd_GLOBAL_SETUP time if you generate\naudio even when handed silence.  Requires PF_OutFlag_AUDIO_EFFECT_TOO\nor PF_OutFlag_AUDIO_EFFECT_ONLY.\n\nPF_OutFlag_AUDIO_EFFECT_TOO\n\nMust be set at PF_Cmd_GLOBAL_SETUP time for an effect that\nwants to filter the audio too (as opposed to just reading the audio).\n\nPF_OutFlag_AUDIO_EFFECT_ONLY\n\nMust be set at PF_Cmd_GLOBAL_SETUP time for an effect\nthat only filters audio (no video).\n\nPF_OutFlag2_SUPPORTS_QUERY_DYNAMIC_FLAGS\n\nSet this during PF_Cmd_GLOBAL_SETUP if the effect handles PF_Cmd_QUERY_DYNAMIC_FLAGS.\nSupporting this command can dramatically improve performance for certain\neffects, because it provides dynamic information to the host about what\ncan be cached (as opposed to PIPL bits which cannot be changed at run-time)\n\nPF_OutFlag2_I_USE_3D_CAMERA\n\nThis bit must be set if the effect ever uses the AEGP PF_Interface suite to\naccess camera layers. Can be over-ridden dynamically during PF_Cmd_QUERY_DYNAMIC_FLAGS.\n\nPF_OutFlag2_I_USE_3D_LIGHTS\n\nThis bit must be set if the effect ever uses the AEGP PF_Interface suite to\naccess camera layers. Can be over-ridden dynamically during PF_Cmd_QUERY_DYNAMIC_FLAGS.\n\nPF_OutFlag2_PARAM_GROUP_START_COLLAPSED_FLAG\n\nIf you want a parameter group to honor the PF_ParamFlag_COLLAPSE_TWIRLY or\nPF_ParamFlag_START_COLLAPSED flag, set this bit.  Otherwise, all parameter\ngroups will be collapsed by default.\n\nPF_OutFlag2_DOESNT_NEED_EMPTY_PIXELS\n\nAdded for render optimizations; shrinks the input buffer passed to the effect to\nexclude any empty pixels (where empty means \"zero alpha\" unless\nPF_OutFlag2_REVEALS_ZERO_ALPHA is set, in which case RGB must be zero as well.)\nThe origin of the trimmed buffer can be found in in_data->pre_effect_source_origin.\nEffects with both this flag and PF_OutFlag_I_EXPAND_BUFFER set may get called with\na null input buffer if their input is completely empty, and must be able to handle\nthis case without crashing. This flag can be cleared dynamically during\nPF_Cmd_QUERY_DYNAMIC_FLAGS.\n\nPF_OutFlag2_REVEALS_ZERO_ALPHA\n\nThe effect can take pixels with zero alpha and reveal the RGB data in them (like\nour Set Channels effect). This tells After Effects not to trim such pixels when\ndetermining the input for the effect. This flag can be cleared dynamically during\nPF_Cmd_QUERY_DYNAMIC_FLAGS.\n\nPF_OutFlag2_I_AM_DEPRECATED\nthis effect is still available, and shows up under user-visible \"Obsolete\" category\nin the UI. Setting this flag means \"there's a better way to do this, but this effect\nmay still be useful in some situations\".  distinct from PF_OutFlag_I_AM_OBSOLETE in\nthat these will still show up in the GUI and the user can still apply them to new\nprojects.  The category that is set by the effect is pretty much ignored, as it will\ninstead always go into the \"Obsolete\" category\n\nPF_OutFlag2_I_USE_TIMECODE\nNew in AE 9.0.  The effect depends on the Composition's timecode or a layer's\nsource footage timecode.  If the underlying timecode changes the effects will\nbe asked to rerender.\n\nPF_OutFlag2_AUTOMATIC_WIDE_TIME_INPUT\nNew in AE 10. Requires setting of PF_OutFlag_WIDE_TIME_INPUT (which allows you\nto support old hosts), but effectively overrides that flag. When set, all\nparameter checkouts are tracked so over-time dependencies are known by AE. Note\nthat if you use this new flag, and you cache any time-dependent data in your\nsequence data (or anywhere else), you must validate that cache using the\nnew PF_HaveInputsChangedOverTimeSpan() before using it.\n\nThis only works for smart effects (those that set PF_OutFlag2_SUPPORTS_SMART_RENDER). If you haven't\nset that, After Effects will silently treat this as PF_OutFlag_WIDE_TIME_INPUT instead.\n\nTo test that it's working, apply your effect with one parameter keyframed on every frame.\nRAM Preview to fill the cache, then change one of the keyframes. The related frame and\nall dependent frames (e.g. later frames, in the case of a simulation) should lose their\ncache marks and require re-rendering. Simlarly, upstream changes to sources of layer\nparameters should cause time-selective invalidation of the cache.\n\nPF_OutFlag2_DEPENDS_ON_UNREFERENCED_MASKS\nSet this if you are going to look at paths that aren't directly referenced by a path\nparam, e.g. if you are going to draw a stroke on all masks.\n\nPF_OutFlag2_OUTPUT_IS_WATERMARKED\nSet this if your output is going to be watermarked in some way that makes it unsuitable for\nfinal use, probably because the user is using an unlicensed demo version. It is ok to change\nthis state during the course of app session, if e.g. a floating license status changes.\nPlugin authors that actually do have this state changing asynchronously must be careful to\nhave the next render match the last state returned from QUERY_DYNAMIC_FLAGS otherwise race conditions\ncould cause incorrect frames to be cached. (This is a non-issue if you only change this in response\nto DO_DIALOG.)\n\nPF_OutFlag2_I_MIX_GUID_DEPENDENCIES\t(new in 13.5)\nSmart effects only. With this option, FORCE_RERENDER becomes a cache-savvy more efficient MAYBE rerender.\nIf custom UI or DO_DIALOG change sequence data, returning FORCE_RERENDER requests AE to check whether\nrerender needs to occur.  During PreRender, the effect uses the GuidMixInPtr callback to mix\nany additional state that affects the render into our internal GUID for the cached frame.\nAE can then tell whether the frame already exists and if so, no longer needs to render.\nThis also means that DO_DIALOG no longer always blows the cache and that undo works across DO_DIALOG.\nCancelation of DO_DIALOG no longer blows the cache either.\nThis also means that I_USE_* flags are now basically redundant since any dependency could be mixed in.\nJust be sure to mix in everything that can uniquely affect resulting rendered pixels (that is not already\nan AE stream parameter).  But don't mixin things that are disabled and have no render effect  (this\nresults in less cache efficiency).\n\nPF_OutFlag2_SUPPORTS_THREADED_RENDERING\nIndicates the effect supports rendering on multiple threads at the same time. Single or multiple\napplications of this effect on a layer can be called to render at the same time on multiple threads.\n\nUI selectors are still sent on the main thread, however Sequence Setup, Sequence Resetup, Sequence SetDown,\nPreRender, and Render may be sent on multiple threads at the same time as the UI selectors are being handled\nso all of these selectors must be thread safe.\n\nGlobal Setup and Global Setdown selectors are unaffected by this flag.  Regardless whether this flag is set\nor not, they will only be sent on the main thread, and will not be sent at the same time as any other selectors.\n\nIf the effect sets PF_OutFlag_SEQUENCE_DATA_NEEDS_FLATTENING indicating the sequence data needs flattening\nthen it must also set PF_OutFlag2_SUPPORTS_GET_FLATTENED_SEQUENCE_DATA.\n\nsequence_data is read-only at render time and must be accessed with PF_EffectSequenceDataSuite.\nin_data->sequence_data will be NULL during render. AEGP_ComputeCacheSuite is suggested if writing to\nsequence_data at render time is needed for caching. This suite unifies cache entries so multiple threads do\nnot recompute the same cache value. If neither of these solutions work, see the next flag,\nPF_OutFlag2_MUTABLE_RENDER_SEQUENCE_DATA_SLOWER.\n\nPF_OutFlag2_MUTABLE_RENDER_SEQUENCE_DATA_SLOWER\nIndicates the effect needs sequence_data replicated for each render thread, thus allowing each render to have\nsequence_data which can be written to. Note that changes to sequence_data will be discarded regularly, currently\nafter each span of frames is rendered such as single RAM Preview or Render Queue export."]
pub type _bindgen_ty_10 = ::std::os::raw::c_int;
pub type PF_OutFlags = A_long;
pub const PF_OutFlag2_NONE: _bindgen_ty_11 = 0;
pub const PF_OutFlag2_SUPPORTS_QUERY_DYNAMIC_FLAGS: _bindgen_ty_11 = 1;
pub const PF_OutFlag2_I_USE_3D_CAMERA: _bindgen_ty_11 = 2;
pub const PF_OutFlag2_I_USE_3D_LIGHTS: _bindgen_ty_11 = 4;
pub const PF_OutFlag2_PARAM_GROUP_START_COLLAPSED_FLAG: _bindgen_ty_11 = 8;
pub const PF_OutFlag2_I_AM_THREADSAFE: _bindgen_ty_11 = 16;
pub const PF_OutFlag2_CAN_COMBINE_WITH_DESTINATION: _bindgen_ty_11 = 32;
pub const PF_OutFlag2_DOESNT_NEED_EMPTY_PIXELS: _bindgen_ty_11 = 64;
pub const PF_OutFlag2_REVEALS_ZERO_ALPHA: _bindgen_ty_11 = 128;
pub const PF_OutFlag2_PRESERVES_FULLY_OPAQUE_PIXELS: _bindgen_ty_11 = 256;
pub const PF_OutFlag2_SUPPORTS_SMART_RENDER: _bindgen_ty_11 = 1024;
pub const PF_OutFlag2_RESERVED9: _bindgen_ty_11 = 2048;
pub const PF_OutFlag2_FLOAT_COLOR_AWARE: _bindgen_ty_11 = 4096;
pub const PF_OutFlag2_I_USE_COLORSPACE_ENUMERATION: _bindgen_ty_11 = 8192;
pub const PF_OutFlag2_I_AM_DEPRECATED: _bindgen_ty_11 = 16384;
pub const PF_OutFlag2_PPRO_DO_NOT_CLONE_SEQUENCE_DATA_FOR_RENDER: _bindgen_ty_11 = 32768;
pub const PF_OutFlag2_RESERVED10: _bindgen_ty_11 = 65536;
pub const PF_OutFlag2_AUTOMATIC_WIDE_TIME_INPUT: _bindgen_ty_11 = 131072;
pub const PF_OutFlag2_I_USE_TIMECODE: _bindgen_ty_11 = 262144;
pub const PF_OutFlag2_DEPENDS_ON_UNREFERENCED_MASKS: _bindgen_ty_11 = 524288;
pub const PF_OutFlag2_OUTPUT_IS_WATERMARKED: _bindgen_ty_11 = 1048576;
pub const PF_OutFlag2_I_MIX_GUID_DEPENDENCIES: _bindgen_ty_11 = 2097152;
pub const PF_OutFlag2_AE13_5_THREADSAFE: _bindgen_ty_11 = 4194304;
pub const PF_OutFlag2_SUPPORTS_GET_FLATTENED_SEQUENCE_DATA: _bindgen_ty_11 = 8388608;
pub const PF_OutFlag2_CUSTOM_UI_ASYNC_MANAGER: _bindgen_ty_11 = 16777216;
pub const PF_OutFlag2_SUPPORTS_GPU_RENDER_F32: _bindgen_ty_11 = 33554432;
pub const PF_OutFlag2_RESERVED12: _bindgen_ty_11 = 67108864;
pub const PF_OutFlag2_SUPPORTS_THREADED_RENDERING: _bindgen_ty_11 = 134217728;
pub const PF_OutFlag2_MUTABLE_RENDER_SEQUENCE_DATA_SLOWER: _bindgen_ty_11 = 268435456;
pub const PF_OutFlag2_SUPPORTS_DIRECTX_RENDERING: _bindgen_ty_11 = 536870912;
pub type _bindgen_ty_11 = ::std::os::raw::c_int;
pub type PF_OutFlags2 = A_long;
pub const PF_InFlag_NONE: _bindgen_ty_12 = 0;
pub const PF_InFlag_PROJECT_IS_RENDER_ONLY: _bindgen_ty_12 = 1;
#[doc = " -------------------- Input Flags --------------------\n\nThe in_flags field of the InData can be set to an OR-ed\ncombination of these flags to communicate various things from AE to an effect plugin\nThe flags are described here:\n\nPF_InFlag_NONE\nThis is the \"empty\" setting -- no inflags.\n\nPF_InFlag_PROJECT_IS_RENDER_ONLY  (since 13.5)\n\nFor efficiency, if a plugin sets up UI that is not used in render, this flag\ncan be tested to skip that step when an effect is being RESETUP for render only.\nEffect instances with this flag on in RESETUP are in read-only AE projects and will not receive UI related selectors.\n\nThis is an optimization hint.  If you don't make such optimizations in render your plugin should still work.\n\nThis flag should generally not be used to suppress errors in render.  Errors should still be reported as usual via AE standard mechanisms,\nand AE will then handle the differences in context reporting.\n\nIf this is off, UI should be set up normally (and the effect could also be running in an earlier version of\nAE that assumed render and UI on the same effect instance.)"]
pub type _bindgen_ty_12 = ::std::os::raw::c_int;
pub type PF_InFlags = A_long;
pub const PF_Cmd_ABOUT: _bindgen_ty_13 = 0;
pub const PF_Cmd_GLOBAL_SETUP: _bindgen_ty_13 = 1;
pub const PF_Cmd_UNUSED_0: _bindgen_ty_13 = 2;
pub const PF_Cmd_GLOBAL_SETDOWN: _bindgen_ty_13 = 3;
pub const PF_Cmd_PARAMS_SETUP: _bindgen_ty_13 = 4;
pub const PF_Cmd_SEQUENCE_SETUP: _bindgen_ty_13 = 5;
pub const PF_Cmd_SEQUENCE_RESETUP: _bindgen_ty_13 = 6;
pub const PF_Cmd_SEQUENCE_FLATTEN: _bindgen_ty_13 = 7;
pub const PF_Cmd_SEQUENCE_SETDOWN: _bindgen_ty_13 = 8;
pub const PF_Cmd_DO_DIALOG: _bindgen_ty_13 = 9;
pub const PF_Cmd_FRAME_SETUP: _bindgen_ty_13 = 10;
pub const PF_Cmd_RENDER: _bindgen_ty_13 = 11;
pub const PF_Cmd_FRAME_SETDOWN: _bindgen_ty_13 = 12;
pub const PF_Cmd_USER_CHANGED_PARAM: _bindgen_ty_13 = 13;
pub const PF_Cmd_UPDATE_PARAMS_UI: _bindgen_ty_13 = 14;
pub const PF_Cmd_EVENT: _bindgen_ty_13 = 15;
pub const PF_Cmd_GET_EXTERNAL_DEPENDENCIES: _bindgen_ty_13 = 16;
pub const PF_Cmd_COMPLETELY_GENERAL: _bindgen_ty_13 = 17;
pub const PF_Cmd_QUERY_DYNAMIC_FLAGS: _bindgen_ty_13 = 18;
pub const PF_Cmd_AUDIO_RENDER: _bindgen_ty_13 = 19;
pub const PF_Cmd_AUDIO_SETUP: _bindgen_ty_13 = 20;
pub const PF_Cmd_AUDIO_SETDOWN: _bindgen_ty_13 = 21;
pub const PF_Cmd_ARBITRARY_CALLBACK: _bindgen_ty_13 = 22;
pub const PF_Cmd_SMART_PRE_RENDER: _bindgen_ty_13 = 23;
pub const PF_Cmd_SMART_RENDER: _bindgen_ty_13 = 24;
pub const PF_Cmd_RESERVED1: _bindgen_ty_13 = 25;
pub const PF_Cmd_RESERVED2: _bindgen_ty_13 = 26;
pub const PF_Cmd_RESERVED3: _bindgen_ty_13 = 27;
pub const PF_Cmd_GET_FLATTENED_SEQUENCE_DATA: _bindgen_ty_13 = 28;
pub const PF_Cmd_TRANSLATE_PARAMS_TO_PREFS: _bindgen_ty_13 = 29;
pub const PF_Cmd_RESERVED4: _bindgen_ty_13 = 30;
pub const PF_Cmd_SMART_RENDER_GPU: _bindgen_ty_13 = 31;
pub const PF_Cmd_GPU_DEVICE_SETUP: _bindgen_ty_13 = 32;
pub const PF_Cmd_GPU_DEVICE_SETDOWN: _bindgen_ty_13 = 33;
pub const PF_Cmd_NUM_CMDS: _bindgen_ty_13 = 34;
#[doc = " -------------------- Command Selectors --------------------\n\nThe first parameter to the effect routine is one of t\these command\nselectors.  The commands are described here.\n\nPF_Cmd_ABOUT\nThis command should display an information dialog box about the\neffect module.  The easiest thing to do is PF_SPRINTF the info\ninto the out_data->return_msg field.  After Effects will bring\nup a simple undecorated modal dialog with your text proudly displayed.\nThis command can be sent at _any_ time, so don't count on having\nany global data or anything else set.  (Except, as always, the\ncurrent resource file will be set to your effects module.)\n\nPF_Cmd_GLOBAL_SETUP\nWhen you get this command, you should check the version of the\neffect protocol with which you are being invoked, and set any of\nthe necessary out flags (described above) or out data fields\n(described below).  If your global data was flattened, the flat\ndata will be passed here and you should unflatten it, free the\nflat global data, and set the OutData global_data to the new un-flat\ndata.  Alternatively, the global data may come in NULL and you can\nallocate new global data at this time.\n\nPF_Cmd_GLOBAL_SETDOWN\nYou should free any global data you have allocated when you get\nthis command.\n\nPF_Cmd_PARAMS_SETUP\nHere you should add any params your effect wants using the\nPF_ADD_PARAM callback described below.  This is called after global\nsetup -- see the add_param callback described below.\n\nPF_Cmd_SEQUENCE_SETUP\nThis is called when the effect is first applied to a layer.\nA sequence is a series of images that will usually be all be of the same\nsize and in the same context.  You can allocate sequence data\nat this time -- many more input fields are defined at this time.\nSee the PF_InData description below.\n\nAs of 13.5 this only happens on the UI thread.\nExcept for legacy (no GET_FLATTENED_SEQUENCE_DATA) effects that do I_DO_DIALOG which can still hit this in render.\n\nPF_Cmd_SEQUENCE_RESETUP\nThis call is made to unflatten flattened sequence data.\nThere are at least three cases when this can happen:\n1) after the sequence data is written to disk, 2) after the\nsequence data is read in from disk, 3) after a duplicate\nis made (called on both original and the new sequence).\n\nThis can happen in UI or Render thread (13.5),  the effect must handle\ninitialization of a NULL sequence_data input if needed.  See also PF_InFlag_PROJECT_IS_RENDER_ONLY.\n\nPF_Cmd_SEQUENCE_FLATTEN\nThis call is made to flatten unflat sequence data so it can be\ncached to disk.  After the data is flattened, free the un-flat data\nand set the out_data->sequence_data to the new flat data.\nIf you don't want your sequence handle written to disk, you\ncan set it to NULL (after disposing it) at this time.  Presumably\nyou would then reallocate it at another time.\n\nThis command will be sent when saving and when duplicating\nthe sequence.\n\nPF_Cmd_GET_FLATTENED_SEQUENCE_DATA\t(new in 13.5)\nReturns an independent allocation of the sequence data which can be written\nto disk or used to initialise or update other instances of the effect plug-in.\n\nThe host calls this command to serialize the sequence data without\nhaving to flatten and resetup the UI plug-in as was legacy practice. (However, at present effects\nstill may need flattening in render if the sequence_data is about to be assigned.)\n\nAn effect that implements GET_FLATTENED_SEQUENCE_DATA will only receive SEQUENCE_SETUP on the UI thread.\nSEQUENCE_RESETUP can happen on either thread. Make sure you handle a NULL sequence_data in RESETUP.\n(Without GET_FLATTENED, a legacy effect may still get SEQUENCE_SETUP in render but DO_DIALOG will not be called.)\n\nAlso when enabled, this means that the effect is guaranteed to get a\nSEQUENCE_SETDOWN cmd to dispose the effect's sequence_data  (previously\nit was possible for AE to bypass this if the sequence_data was flat,\nbut that lead to SEQUENCE_SETUP/SETDOWN imbalances for some plugins.\nThe imbalance should not happen when using this flag, but the plugin must\nhandle being called on SETDOWN with possibly flat data. For example,\ntry copy and pasting an effect onto itself.\n\nSupport for this command is indicated by setting\nPF_OutFlag2_SUPPORTS_GET_FLATTENED_SEQUENCE_DATA\n\nThe ownership of the returned handle is transferred to the host.\n\nPF_Cmd_SEQUENCE_SETDOWN\nYou should free any sequence data you have allocated when you\nget this command.\n\nPF_Cmd_DO_DIALOG\nThis command indicated that the Options button or command has\nbeen selected and the effect should bring up its options dialog.\nThis command will only be sent it the effect has indicated that\nit has an options dialog with PF_OutFlag_I_DO_DIALOG.  This\ncommand will automatically be sent once upon applying the filter\nif PF_OutFlag_SEND_DO_DIALOG is set in SEQUENCE_SETUP.\n\nPF_Cmd_FRAME_SETUP\nThis is called immediately before each frame is invoked.  You\ncan allocate frame data at this time, if you wish, or you can\njust wait for the RENDER which will immediately follow.\n\nPF_Cmd_RENDER\nThis is the call to render the frame.  All fields in the in_data\nwill be valid at this time and you can inquire parameters or\nwhat-have-you.  This should set the output frame with the new\nimage data.  This is the main action command.\n\nPF_Cmd_FRAME_SETDOWN\nIf you allocated data in PF_Cmd_FRAME_SETUP, this is the time\nto free it and clean up after rendering the frame.\n\nPF_Cmd_USER_CHANGED_PARAM\nThis command will be sent if you set the PF_ParamFlag_SUPERVISE\nflag for a param.  This allows you to modify the params array contents to\ncontrol values or make one control affect others, including arbitrary\ndata.  This command will be sent whenever the user interacts with a\nstandard param controller that has PF_ParamFlag_SUPERVISE\nset.\n\nThe \"extra\" field will be a pointer to a PF_UserChangedParamExtra structure\nwhich contains the param_index of the changed parameter.\n\nYou can return PF_ChangeFlag_CHANGED_VALUE and/or call PF_UpdateParamUI()\nfor any param.\n\nPF_Cmd_UPDATE_PARAMS_UI\nThis command will be sent when the Effect Controls Window (ECW)\nneeds to updated (e.g. after opening the ECW or moving the comp to\na new time) if you have set PF_OutFlag_SEND_UPDATE_PARAMS_UI at\nglobal setup time.\n\nThis gives you a chance to call PF_UpdateParamUI() to modify certain\nui fields for the params.  See the doc for PF_UpdateParamUI()\nto see which fields can be modified.\n\nWARNING: When handling PF_Cmd_UPDATE_PARAMS_UI, you can call\nPF_UpdateParamUI() for any param(s), but not PF_ChangeFlag_CHANGED_VALUE --\nonly cosmetic changes can be made in response to this command.\n\nPF_Cmd_QUERY_DYNAMIC_FLAGS\nThis command will be sent at arbitrary times if PF_OutFlag2_SUPPORTS_QUERY_DYNAMIC_FLAGS\nis set during global setup. During this call the effect may examine the values\nof its parameters at the current time (except layer parameters) by checking them out,\nand decide whether any of the flags that support PF_Cmd_QUERY_DYNAMIC_FLAGS should be set.\n\nThe appropriate flags must be set in out_data->out_flags and out_data->out_flags2 before\nreturning. The effect must decide what information is necessary to render a frame at\nthe current time, given only the values of parameters at that time. Clearing the\nappropriate bits when possible can result in great performance improvements, but\nincorrectly clearing bits will result in caching bugs, and you won't like that. Nope.\n\n Important Reminder***\nBefore you add a new PF_Cmd, evaluate whether it should allow\nnew Sequence Data allocations! If so, remember to add it to\nCmdCanChangeSequenceData() in FLT_Host.cpp!"]
pub type _bindgen_ty_13 = ::std::os::raw::c_int;
pub type PF_Cmd = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PF_LayerAudio {
    _unused: [u8; 0],
}
#[doc = " -------------------- Simple Types --------------------"]
pub type PF_LayerAudio = *mut _PF_LayerAudio;
pub type PF_SndSamplePtr = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ProgressInfo {
    _unused: [u8; 0],
}
pub type PF_ProgPtr = *mut PF_ProgressInfo;
pub type PF_ParamValue = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_SpecVersion {
    pub major: A_short,
    pub minor: A_short,
}
pub type PF_ParamIndex = A_long;
pub type PF_UFixed = A_u_long;
pub type PF_Fixed = A_long;
pub type PF_Boolean = A_char;
pub type PF_Handle = *mut *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_LegacyPoint {
    pub v: A_short,
    pub h: A_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_LegacyRect {
    pub top: A_short,
    pub left: A_short,
    pub bottom: A_short,
    pub right: A_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_Point {
    pub h: A_long,
    pub v: A_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_LRect {
    pub left: A_long,
    pub top: A_long,
    pub right: A_long,
    pub bottom: A_long,
}
pub type PF_Rect = PF_LRect;
pub type PF_UnionableRect = PF_Rect;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_RationalScale {
    pub num: A_long,
    pub den: A_u_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_FixedPoint {
    pub x: PF_Fixed,
    pub y: PF_Fixed,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_FixedRect {
    pub left: PF_Fixed,
    pub top: PF_Fixed,
    pub right: PF_Fixed,
    pub bottom: PF_Fixed,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_Matrix {
    pub mat: [[PF_Fixed; 3usize]; 3usize],
}
pub type PF_TransferMode = A_long;
pub type PF_XferMode = PF_TransferMode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_Pixel {
    pub alpha: A_u_char,
    pub red: A_u_char,
    pub green: A_u_char,
    pub blue: A_u_char,
}
pub type PF_Pixel8 = PF_Pixel;
pub type PF_UnionablePixel = PF_Pixel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_Pixel16 {
    pub alpha: A_u_short,
    pub red: A_u_short,
    pub green: A_u_short,
    pub blue: A_u_short,
}
pub type PF_FpShort = A_FpShort;
pub type PF_FpLong = A_FpLong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_PixelFloat {
    pub alpha: PF_FpShort,
    pub red: PF_FpShort,
    pub green: PF_FpShort,
    pub blue: PF_FpShort,
}
pub type PF_Pixel32 = PF_PixelFloat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_FloatMatrix {
    pub mat: [[PF_FpLong; 3usize]; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_CompositeMode {
    pub xfer: PF_TransferMode,
    pub rand_seed: A_long,
    pub opacity: A_u_char,
    pub rgb_only: PF_Boolean,
    pub opacitySu: A_u_short,
}
pub type PF_PixLong = A_u_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PF_PixelOpaque {
    _unused: [u8; 0],
}
pub type PF_PixelOpaquePtr = *mut _PF_PixelOpaque;
pub type PF_PixelPtr = *mut PF_Pixel;
pub type PF_RGB_Pixel = [PF_Fixed; 3usize];
pub type PF_YIQ_Pixel = [PF_Fixed; 3usize];
pub type PF_HLS_Pixel = [PF_Fixed; 3usize];
pub type PF_ChannelType = A_long;
pub type PF_DataType = A_long;
#[doc = " for enumerating over all the channels"]
pub type PF_ChannelIndex = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ChannelDesc {
    pub channel_type: PF_ChannelType,
    pub name: [A_char; 64usize],
    pub data_type: PF_DataType,
    pub dimension: A_long,
}
#[doc = " the opaque type representing the channel data"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ChannelRef {
    pub opaque: [A_intptr_t; 8usize],
}
#[doc = " the opaque type representing the channel data"]
pub type PF_ChannelRefPtr = *mut PF_ChannelRef;
#[doc = " the channel data parallels the image data in size and shape.\n the width is the number of pixels, the height is the number of scanlines\n the height is image_height\n the dimension is the number of planes in a pixel\n the row_bytes is the length of a scanline in bytes\n the data type is the type of data in a plane\n\tNote : a pixel consists of dimensionL * sizeof(data_type) bytes\n dataH is a handle to the data.\n dataPV is a pointer to the dereferenced locked handle\n effects should always have dataPV non null."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ChannelChunk {
    pub channel_ref: PF_ChannelRef,
    pub widthL: A_long,
    pub heightL: A_long,
    pub dimensionL: A_long,
    pub row_bytesL: A_long,
    pub data_type: PF_DataType,
    pub dataH: PF_Handle,
    pub dataPV: *mut ::std::os::raw::c_void,
}
pub const PF_LayerDefault_MYSELF: _bindgen_ty_14 = -1;
pub const PF_LayerDefault_NONE: _bindgen_ty_14 = 0;
#[doc = " -------------------- Effect Parameter Description Structures --------------------\n\nIn general each structure is divided into two parts:\na) description of the parameter\nb) setting of parameter at the current invocation time\n\nA number of these structures end in A_char*, A_char[] unions.  These\nstructures are \"flattened\" between the add_param callback (in which\nthe A_char * should be used) and the read-only values accessible when\nthe effect is later invoked (at which time the A_char [] is used and\nthe string data is concatenated right at the end of the struct)."]
pub type _bindgen_ty_14 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_LayerDef {
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
    pub world_flags: PF_WorldFlags,
    pub data: PF_PixelPtr,
    pub rowbytes: A_long,
    pub width: A_long,
    pub height: A_long,
    pub extent_hint: PF_UnionableRect,
    pub platform_ref: *mut ::std::os::raw::c_void,
    pub reserved_long1: A_long,
    pub reserved_long4: *mut ::std::os::raw::c_void,
    pub pix_aspect_ratio: PF_RationalScale,
    pub reserved_long2: *mut ::std::os::raw::c_void,
    pub origin_x: A_long,
    pub origin_y: A_long,
    pub reserved_long3: A_long,
    pub dephault: A_long,
}
pub type PF_EffectWorld = PF_LayerDef;
pub const PF_UNSIGNED_PCM: _bindgen_ty_15 = 0;
pub const PF_SIGNED_PCM: _bindgen_ty_15 = 1;
pub const PF_SIGNED_FLOAT: _bindgen_ty_15 = 2;
pub type _bindgen_ty_15 = ::std::os::raw::c_int;
pub type PF_SoundFormat = A_short;
pub const PF_SSS_1: _bindgen_ty_16 = 1;
pub const PF_SSS_2: _bindgen_ty_16 = 2;
pub const PF_SSS_4: _bindgen_ty_16 = 4;
pub type _bindgen_ty_16 = ::std::os::raw::c_int;
pub type PF_SoundSampleSize = A_short;
pub const PF_Channels_MONO: _bindgen_ty_17 = 1;
pub const PF_Channels_STEREO: _bindgen_ty_17 = 2;
pub type _bindgen_ty_17 = ::std::os::raw::c_int;
pub type PF_SoundChannels = A_short;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_SoundFormatInfo {
    pub rateF: PF_FpLong,
    pub num_channels: PF_SoundChannels,
    pub format: PF_SoundFormat,
    pub sample_size: PF_SoundSampleSize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_SoundWorld {
    pub fi: PF_SoundFormatInfo,
    pub num_samples: A_long,
    pub dataP: *mut ::std::os::raw::c_void,
}
pub const PF_ValueDisplayFlag_NONE: _bindgen_ty_18 = 0;
pub const PF_ValueDisplayFlag_PERCENT: _bindgen_ty_18 = 1;
pub const PF_ValueDisplayFlag_PIXEL: _bindgen_ty_18 = 2;
pub const PF_ValueDisplayFlag_RESERVED1: _bindgen_ty_18 = 4;
pub const PF_ValueDisplayFlag_REVERSE: _bindgen_ty_18 = 8;
pub type _bindgen_ty_18 = ::std::os::raw::c_int;
pub type PF_ValueDisplayFlags = A_short;
#[doc = " Slider -- PF_Param_SLIDER"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_SliderDef {
    pub value: PF_ParamValue,
    pub value_str: [A_char; 32usize],
    pub value_desc: [A_char; 32usize],
    pub valid_min: PF_ParamValue,
    pub valid_max: PF_ParamValue,
    pub slider_min: PF_ParamValue,
    pub slider_max: PF_ParamValue,
    pub dephault: PF_ParamValue,
}
#[doc = " Fixed Point Slider -- PF_Param_FIX_SLIDER"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_FixedSliderDef {
    pub value: PF_Fixed,
    pub value_str: [A_char; 32usize],
    pub value_desc: [A_char; 32usize],
    pub valid_min: PF_Fixed,
    pub valid_max: PF_Fixed,
    pub slider_min: PF_Fixed,
    pub slider_max: PF_Fixed,
    pub dephault: PF_Fixed,
    pub precision: A_short,
    pub display_flags: PF_ValueDisplayFlags,
}
pub const PF_FSliderFlag_NONE: _bindgen_ty_19 = 0;
pub const PF_FSliderFlag_WANT_PHASE: _bindgen_ty_19 = 1;
pub type _bindgen_ty_19 = ::std::os::raw::c_int;
pub type PF_FSliderFlags = A_u_long;
#[doc = " Floating Point Slider -- PF_Param_FLOAT_SLIDER"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_FloatSliderDef {
    pub value: PF_FpLong,
    pub phase: PF_FpLong,
    pub value_desc: [A_char; 32usize],
    pub valid_min: PF_FpShort,
    pub valid_max: PF_FpShort,
    pub slider_min: PF_FpShort,
    pub slider_max: PF_FpShort,
    pub dephault: PF_FpShort,
    pub precision: A_short,
    pub display_flags: PF_ValueDisplayFlags,
    pub fs_flags: PF_FSliderFlags,
    pub curve_tolerance: PF_FpShort,
    pub useExponent: PF_Boolean,
    pub exponent: PF_FpShort,
}
#[doc = " Angle -- PF_Param_ANGLE"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_AngleDef {
    pub value: PF_Fixed,
    pub dephault: PF_Fixed,
    pub valid_min: PF_Fixed,
    pub valid_max: PF_Fixed,
}
#[doc = " CheckBox -- PF_Param_CHECKBOX"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PF_CheckBoxDef {
    pub value: PF_ParamValue,
    pub dephault: PF_Boolean,
    pub reserved: A_char,
    pub reserved1: A_short,
    pub u: PF_CheckBoxDef__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PF_CheckBoxDef__bindgen_ty_1 {
    pub nameptr: *const A_char,
}
#[doc = " Color -- PF_Param_COLOR"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ColorDef {
    pub value: PF_UnionablePixel,
    pub dephault: PF_UnionablePixel,
}
#[doc = " Point -- PF_Param_POINT\n\nThe values for the point use the source's coordinate system, with the\norigin at the top left. The values are expressed in fixed point, with\n16 bits of fractional precision (out of a total of 32 bits).\n\nThe dephaults (sorry) are expressed as percentages (with 16 bits of\nfraction) with the origin at the top left. The percent can be negative,\nbut should not be smaller than -600%. It should not be greater than 600%.\n\nIf restrict_bounds is TRUE, the user will not be allowed to specify\npoints outside the bounds of the layer to which they are applying the\neffect. If this is TRUE, the dephaults should be between 0.0 and 100.0."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_PointDef {
    pub x_value: PF_Fixed,
    pub y_value: PF_Fixed,
    pub reserved: [A_char; 3usize],
    pub restrict_bounds: PF_Boolean,
    pub x_dephault: PF_Fixed,
    pub y_dephault: PF_Fixed,
}
#[doc = " 3D Point -- PF_Param_POINT_3D\n\nJust like POINT, with an extra dimension. Supported in AE starting with version 10.5 (CS 5.5)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_Point3DDef {
    pub x_value: PF_FpLong,
    pub y_value: PF_FpLong,
    pub z_value: PF_FpLong,
    pub x_dephault: PF_FpLong,
    pub y_dephault: PF_FpLong,
    pub z_dephault: PF_FpLong,
    pub reserved: [::std::os::raw::c_char; 16usize],
}
#[doc = " Popup Menu -- PF_Param_POPUP\n\n can also be used as a radio-button group in some hosts\n when PF_PUI_RADIO_BUTTON is set\n"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PF_PopupDef {
    pub value: PF_ParamValue,
    pub num_choices: A_short,
    pub dephault: A_short,
    pub u: PF_PopupDef__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PF_PopupDef__bindgen_ty_1 {
    pub namesptr: *const A_char,
}
#[doc = " Momentary Buttons -- PF_Param_BUTTON\n\n supported by AE starting with CS 5.5 (AE 10.5); may be supported in other hosts\n"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PF_ButtonDef {
    pub value: PF_ParamValue,
    pub u: PF_ButtonDef__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PF_ButtonDef__bindgen_ty_1 {
    pub namesptr: *const A_char,
}
pub const PF_PathID_NONE: _bindgen_ty_20 = 0;
pub type _bindgen_ty_20 = ::std::os::raw::c_int;
pub type PF_PathID = A_u_long;
pub const PF_MaskMode_NONE: _bindgen_ty_21 = 0;
pub const PF_MaskMode_ADD: _bindgen_ty_21 = 1;
pub const PF_MaskMode_SUBTRACT: _bindgen_ty_21 = 2;
pub const PF_MaskMode_INTERSECT: _bindgen_ty_21 = 3;
pub const PF_MaskMode_LIGHTEN: _bindgen_ty_21 = 4;
pub const PF_MaskMode_DARKEN: _bindgen_ty_21 = 5;
pub const PF_MaskMode_DIFFERENCE: _bindgen_ty_21 = 6;
pub const PF_MaskMode_ACCUM: _bindgen_ty_21 = 7;
pub const PF_NUM_MASKMODES: _bindgen_ty_21 = 8;
pub type _bindgen_ty_21 = ::std::os::raw::c_int;
pub type PF_MaskMode = A_long;
#[doc = " Path -- PF_Param_PATH\n\nPath parameters give access to the mask/path/shapes of the layer on which\nthe effect is applied.  For more information\non how to use these paths, see the PF_PathQuerySuite, and the PF_PathDataSuite\nin AE_EffectSuites.h"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_PathDef {
    pub path_id: PF_PathID,
    pub reserved0: A_long,
    pub dephault: A_long,
}
pub type PF_ArbitraryH = PF_Handle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ArbitraryDef {
    pub id: A_short,
    pub pad: A_short,
    pub dephault: PF_ArbitraryH,
    pub value: PF_ArbitraryH,
    pub refconPV: *mut ::std::os::raw::c_void,
}
pub const PF_Arbitrary_NEW_FUNC: _bindgen_ty_22 = 0;
pub const PF_Arbitrary_DISPOSE_FUNC: _bindgen_ty_22 = 1;
pub const PF_Arbitrary_COPY_FUNC: _bindgen_ty_22 = 2;
pub const PF_Arbitrary_FLAT_SIZE_FUNC: _bindgen_ty_22 = 3;
pub const PF_Arbitrary_FLATTEN_FUNC: _bindgen_ty_22 = 4;
pub const PF_Arbitrary_UNFLATTEN_FUNC: _bindgen_ty_22 = 5;
pub const PF_Arbitrary_INTERP_FUNC: _bindgen_ty_22 = 6;
pub const PF_Arbitrary_COMPARE_FUNC: _bindgen_ty_22 = 7;
pub const PF_Arbitrary_PRINT_SIZE_FUNC: _bindgen_ty_22 = 8;
pub const PF_Arbitrary_PRINT_FUNC: _bindgen_ty_22 = 9;
pub const PF_Arbitrary_SCAN_FUNC: _bindgen_ty_22 = 10;
pub type _bindgen_ty_22 = ::std::os::raw::c_int;
pub type PF_FunctionSelector = A_long;
pub const PF_ArbCompare_EQUAL: _bindgen_ty_23 = 0;
pub const PF_ArbCompare_LESS: _bindgen_ty_23 = 1;
pub const PF_ArbCompare_MORE: _bindgen_ty_23 = 2;
pub const PF_ArbCompare_NOT_EQUAL: _bindgen_ty_23 = 3;
pub type _bindgen_ty_23 = ::std::os::raw::c_int;
pub type PF_ArbCompareResult = A_long;
pub const PF_ArbPrint_NONE: _bindgen_ty_24 = 0;
pub const PF_ArbPrint_ABBREVIATED: _bindgen_ty_24 = 1;
pub type _bindgen_ty_24 = ::std::os::raw::c_int;
pub type PF_ArbPrintFlags = A_long;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PF_ArbParamsExtra {
    pub which_function: PF_FunctionSelector,
    pub id: A_short,
    pub padding: A_short,
    pub u: PF_ArbParamsExtra__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PF_ArbParamsExtra__bindgen_ty_1 {
    pub new_func_params: PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_1,
    pub dispose_func_params: PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_2,
    pub copy_func_params: PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_3,
    pub flat_size_func_params: PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_4,
    pub flatten_func_params: PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_5,
    pub unflatten_func_params: PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_6,
    pub interp_func_params: PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_7,
    pub compare_func_params: PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_8,
    pub print_size_func_params: PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_9,
    pub print_func_params: PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_10,
    pub scan_func_params: PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_11,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_1 {
    pub refconPV: *mut ::std::os::raw::c_void,
    pub arbPH: *mut PF_ArbitraryH,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_2 {
    pub refconPV: *mut ::std::os::raw::c_void,
    pub arbH: PF_ArbitraryH,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_3 {
    pub refconPV: *mut ::std::os::raw::c_void,
    pub src_arbH: PF_ArbitraryH,
    pub dst_arbPH: *mut PF_ArbitraryH,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_4 {
    pub refconPV: *mut ::std::os::raw::c_void,
    pub arbH: PF_ArbitraryH,
    pub flat_data_sizePLu: *mut A_u_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_5 {
    pub refconPV: *mut ::std::os::raw::c_void,
    pub arbH: PF_ArbitraryH,
    pub buf_sizeLu: A_u_long,
    pub flat_dataPV: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_6 {
    pub refconPV: *mut ::std::os::raw::c_void,
    pub buf_sizeLu: A_u_long,
    pub flat_dataPV: *const ::std::os::raw::c_void,
    pub arbPH: *mut PF_ArbitraryH,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_7 {
    pub refconPV: *mut ::std::os::raw::c_void,
    pub left_arbH: PF_ArbitraryH,
    pub right_arbH: PF_ArbitraryH,
    pub tF: PF_FpLong,
    pub interpPH: *mut PF_ArbitraryH,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_8 {
    pub refconPV: *mut ::std::os::raw::c_void,
    pub a_arbH: PF_ArbitraryH,
    pub b_arbH: PF_ArbitraryH,
    pub compareP: *mut PF_ArbCompareResult,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_9 {
    pub refconPV: *mut ::std::os::raw::c_void,
    pub arbH: PF_ArbitraryH,
    pub print_sizePLu: *mut A_u_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_10 {
    pub refconPV: *mut ::std::os::raw::c_void,
    pub print_flags: PF_ArbPrintFlags,
    pub arbH: PF_ArbitraryH,
    pub print_sizeLu: A_u_long,
    pub print_bufferPC: *mut A_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ArbParamsExtra__bindgen_ty_1__bindgen_ty_11 {
    pub refconPV: *mut ::std::os::raw::c_void,
    pub bufPC: *const A_char,
    pub bytes_to_scanLu: A_u_long,
    pub arbPH: *mut PF_ArbitraryH,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_UserChangedParamExtra {
    pub param_index: PF_ParamIndex,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ImporterPrefsData {
    _unused: [u8; 0],
}
pub type PF_ImporterPrefsDataPtr = *mut PF_ImporterPrefsData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_TranslateParamsToPrefsExtra {
    pub prefsPC: PF_ImporterPrefsDataPtr,
    pub prefs_sizeLu: A_u_long,
}
pub const PF_DepCheckType_NONE: _bindgen_ty_25 = 0;
pub const PF_DepCheckType_ALL_DEPENDENCIES: _bindgen_ty_25 = 1;
pub const PF_DepCheckType_MISSING_DEPENDENCIES: _bindgen_ty_25 = 2;
pub type _bindgen_ty_25 = ::std::os::raw::c_int;
pub type PF_DepCheckType = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ExtDependenciesExtra {
    pub check_type: PF_DepCheckType,
    pub dependencies_strH: PF_Handle,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PF_ParamDefUnion {
    pub ld: PF_LayerDef,
    pub sd: PF_SliderDef,
    pub fd: PF_FixedSliderDef,
    pub ad: PF_AngleDef,
    pub bd: PF_CheckBoxDef,
    pub cd: PF_ColorDef,
    pub td: PF_PointDef,
    pub pd: PF_PopupDef,
    pub fs_d: PF_FloatSliderDef,
    pub arb_d: PF_ArbitraryDef,
    pub path_d: PF_PathDef,
    pub button_d: PF_ButtonDef,
    pub point3d_d: PF_Point3DDef,
}
pub const PF_PUI_NONE: _bindgen_ty_26 = 0;
pub const PF_PUI_TOPIC: _bindgen_ty_26 = 1;
pub const PF_PUI_CONTROL: _bindgen_ty_26 = 2;
pub const PF_PUI_STD_CONTROL_ONLY: _bindgen_ty_26 = 4;
pub const PF_PUI_NO_ECW_UI: _bindgen_ty_26 = 8;
pub const PF_PUI_ECW_SEPARATOR: _bindgen_ty_26 = 16;
pub const PF_PUI_DISABLED: _bindgen_ty_26 = 32;
pub const PF_PUI_DONT_ERASE_TOPIC: _bindgen_ty_26 = 64;
pub const PF_PUI_DONT_ERASE_CONTROL: _bindgen_ty_26 = 128;
pub const PF_PUI_RADIO_BUTTON: _bindgen_ty_26 = 256;
pub const PF_PUI_INVISIBLE: _bindgen_ty_26 = 512;
pub const PF_PUI_RESERVED: _bindgen_ty_26 = 1024;
#[doc = " Param UI Flags\n\nPF_PUI_TOPIC\n\nSet this flag if you handle PF_Cmd_EVENTs for the \"topic\" of\nthe parameter.  The \"topic\" is the portion of the param UI\nin the Effect Controls Window (ECW) that is still visible\nwhen the twirly-arrow is twirled up for that param.\n\nIf you set this flag, you must also set PF_OutFlag_CUSTOM_UI\nat PF_Cmd_GLOBAL_SETUP time.\n\nPF_PUI_CONTROL\n\nSet this flag if you handle PF_Cmd_EVENTs for the control\narea in the ECW.  This is the area that becomes invisible\nwhen you twirl up a parameter's twirly arrow (and is the\nusual place to have your custom UI).\n\nIf you set this flag, you must also set PF_OutFlag_CUSTOM_UI\nat PF_Cmd_GLOBAL_SETUP time.\n\nPF_PUI_STD_CONTROL_ONLY\n\nSet this flag if you want the standard control only -- no\ndata stream will be associated with this parameter, and\nthus no keyframes (nothing appears in the Time Layout window\nfor this type of param).\n\nYou might want to do this to control something in your\nsequence data with a standard control.  Or in your arb\ndata, or custom UI in the comp window, or to group-set multiple\nother controls.\n\n\nThis flag can be used with these param types:\nPF_Param_SLIDER, PF_Param_FIX_SLIDER, PF_Param_ANGLE,\nPF_Param_CHECKBOX, PF_Param_COLOR, PF_Param_POINT,\nPF_Param_POPUP, PF_Param_FLOAT_SLIDER, PF_Param_POINT_3D\n\nbut NOT:\n\nPF_Param_CUSTOM, PF_Param_NO_DATA,\nPF_Param_LAYER, PF_Param_ARBITRARY_DATA, PF_Param_PATH\n\nIf you set this flag, you must also set PF_ParamFlag_SUPERVISE\n(otherwise you would never find out about value changes, and\nthe setting would never be used for anything).  This flag\ndoes not require the setting of PF_OutFlag_CUSTOM_UI.\n\nIf you want a standard control for PF_Param_ARBITRARY_DATA,\njust add one (or more) using PF_PUI_STD_CONTROL_ONLY with\nthe supported param types, and then when handling\nPF_Cmd_USER_CHANGED_PARAM you can modify your arb data.\n\n\nPF_PUI_NO_ECW_UI\n\nSet this flag if you want no UI to appear in the Effect Controls\nWindow.  Presumably, you are setting the value of the parameter\nthrough some other method (e.g. custom UI in the comp window,\nor while handling PF_Cmd_USER_CHANGED_PARAM for a different param with\nPF_ParamFlag_SUPERVISE set). In AE, this doesn't affect keyframe\nvisibility in the timeline. In PPro it does remove the entire row,\nso you won't see keyframes.\n\nPF_PUI_ECW_SEPARATOR\n\nSet this flag if you'd like a thick line above this parameter\nin the effect control window. This is provided so that parameters\ncan be grouped visually, if needed (without adding groups).\nThis flag can be changed at runtime through the PF_UpdateParamUI()\nmethod. Not used by AE.\n\nPF_PUI_INVISIBLE\n\nSet this flag if you'd like the parameter to be initially invisible. This is useful\nif your effect needs hidden data parameters that affect rendering.\n\nPremiere only: The parameter can later be made visible by clearing the flag\nduring the PF_UpdateParamUI() callback."]
pub type _bindgen_ty_26 = ::std::os::raw::c_int;
pub type PF_ParamUIFlags = A_long;
pub const PF_ChangeFlag_NONE: _bindgen_ty_27 = 0;
pub const PF_ChangeFlag_CHANGED_VALUE: _bindgen_ty_27 = 1;
pub const PF_ChangeFlag_RESERVED: _bindgen_ty_27 = 2;
pub const PF_ChangeFlag_SET_TO_VARY: _bindgen_ty_27 = 4;
pub const PF_ChangeFlag_SET_TO_CONSTANT: _bindgen_ty_27 = 8;
#[doc = " PF_ChangeFlags\n\nNew in AE 4.0 (although PF_ChangeFlag_CHANGED_VALUE was implemented\nby setting low bit of old changed field).\n\nPF_ChangeFlag_CHANGED_VALUE\n\nSet this flag for each param whose value you change when handling\na PF_Cmd_USER_CHANGED_PARAM or specific PF_Cmd_EVENT events\n(PF_Event_DO_CLICK, PF_Event_DRAG, & PF_Event_KEYDOWN). If set during\nPF_Cmd_EVENT, but sure to also set PF_EO_HANDLED_EVENT before returning.\nYou can change as many params as you want at once.  These changes are undoable and\nre-doable by the user.  Exception: do not set PF_PUI_STD_CONTROL_ONLY\nparam values with this flag, use PF_UpdateParamUI() instead.\n\nPF_ChangeFlag_SET_TO_VARY\n\nNot yet implemented.  Same restrictions as PF_ChangeFlag_CHANGED_VALUE.\n\nPF_ChangeFlag_SET_TO_CONSTANT\n\nNot yet implemented.  Same restrictions as PF_ChangeFlag_CHANGED_VALUE."]
pub type _bindgen_ty_27 = ::std::os::raw::c_int;
pub type PF_ChangeFlags = A_long;
#[doc = " ParamDef"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PF_ParamDef {
    pub uu: PF_ParamDef__bindgen_ty_1,
    pub ui_flags: PF_ParamUIFlags,
    pub ui_width: A_short,
    pub ui_height: A_short,
    pub param_type: PF_ParamType,
    pub name: [A_char; 32usize],
    pub flags: PF_ParamFlags,
    pub unused: A_long,
    pub u: PF_ParamDefUnion,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PF_ParamDef__bindgen_ty_1 {
    pub id: A_long,
    pub change_flags: PF_ChangeFlags,
}
#[doc = " ParamDef"]
pub type PF_ParamDefPtr = *mut PF_ParamDef;
#[doc = " ParamDef"]
pub type PF_ParamDefH = *mut *mut PF_ParamDef;
pub type PF_ParamList = *mut *mut PF_ParamDef;
pub const PF_ChannelMask_ALPHA: _bindgen_ty_28 = 1;
pub const PF_ChannelMask_RED: _bindgen_ty_28 = 2;
pub const PF_ChannelMask_GREEN: _bindgen_ty_28 = 4;
pub const PF_ChannelMask_BLUE: _bindgen_ty_28 = 8;
pub const PF_ChannelMask_ARGB: _bindgen_ty_28 = 15;
#[doc = " -------------------- Smart Render Interface Constants and Structures --------------------\n\nPF_Cmd_SMART_PRE_RENDER gets a PF_PreRenderExtra struct in the extra pointer, and must\nfill out the \"output\" field before returning.\n\nPF_Cmd_SMART_RENDER gets a PF_SmartRenderExtra struct in the extra pointer, if pre-render was invoked.\n"]
pub type _bindgen_ty_28 = ::std::os::raw::c_int;
pub type PF_ChannelMask = A_long;
pub const PF_GPU_Framework_NONE: _bindgen_ty_29 = 0;
pub const PF_GPU_Framework_OPENCL: _bindgen_ty_29 = 1;
pub const PF_GPU_Framework_METAL: _bindgen_ty_29 = 2;
pub const PF_GPU_Framework_CUDA: _bindgen_ty_29 = 3;
pub const PF_GPU_Framework_DIRECTX: _bindgen_ty_29 = 4;
pub type _bindgen_ty_29 = ::std::os::raw::c_int;
pub type PF_GPU_Framework = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_RenderRequest {
    pub rect: PF_LRect,
    pub field: PF_Field,
    pub channel_mask: PF_ChannelMask,
    pub preserve_rgb_of_zero_alpha: PF_Boolean,
    pub unused: [::std::os::raw::c_char; 3usize],
    pub reserved: [A_long; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_PreRenderInput {
    pub output_request: PF_RenderRequest,
    pub bitdepth: ::std::os::raw::c_short,
    pub gpu_data: *const ::std::os::raw::c_void,
    pub what_gpu: PF_GPU_Framework,
    pub device_index: A_u_long,
}
pub type PF_DeletePreRenderDataFunc =
    ::std::option::Option<unsafe extern "C" fn(pre_render_data: *mut ::std::os::raw::c_void)>;
pub const PF_RenderOutputFlag_RETURNS_EXTRA_PIXELS: _bindgen_ty_30 = 1;
pub const PF_RenderOutputFlag_GPU_RENDER_POSSIBLE: _bindgen_ty_30 = 2;
pub const PF_RenderOutputFlag_RESERVED1: _bindgen_ty_30 = 4;
pub type _bindgen_ty_30 = ::std::os::raw::c_int;
pub type PF_RenderOutputFlags = ::std::os::raw::c_short;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_PreRenderOutput {
    pub result_rect: PF_LRect,
    pub max_result_rect: PF_LRect,
    pub solid: PF_Boolean,
    pub reserved: PF_Boolean,
    pub flags: PF_RenderOutputFlags,
    pub pre_render_data: *mut ::std::os::raw::c_void,
    pub delete_pre_render_data_func: PF_DeletePreRenderDataFunc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_CheckoutResult {
    pub result_rect: PF_LRect,
    pub max_result_rect: PF_LRect,
    pub par: PF_RationalScale,
    pub solid: PF_Boolean,
    pub reservedB: [PF_Boolean; 3usize],
    pub ref_width: A_long,
    pub ref_height: A_long,
    pub reserved: [A_long; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_PreRenderCallbacks {
    pub checkout_layer: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            index: PF_ParamIndex,
            checkout_idL: A_long,
            req: *const PF_RenderRequest,
            what_time: A_long,
            time_step: A_long,
            time_scale: A_u_long,
            checkout_result: *mut PF_CheckoutResult,
        ) -> PF_Err,
    >,
    pub GuidMixInPtr: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            buf_sizeLu: A_u_long,
            buf: *const ::std::os::raw::c_void,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_PreRenderExtra {
    pub input: *mut PF_PreRenderInput,
    pub output: *mut PF_PreRenderOutput,
    pub cb: *mut PF_PreRenderCallbacks,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_SmartRenderInput {
    pub output_request: PF_RenderRequest,
    pub bitdepth: ::std::os::raw::c_short,
    pub pre_render_data: *mut ::std::os::raw::c_void,
    pub gpu_data: *const ::std::os::raw::c_void,
    pub what_gpu: PF_GPU_Framework,
    pub device_index: A_u_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_SmartRenderCallbacks {
    pub checkout_layer_pixels: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            checkout_idL: A_long,
            pixels: *mut *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub checkin_layer_pixels: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, checkout_idL: A_long) -> PF_Err,
    >,
    pub checkout_output: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, output: *mut *mut PF_EffectWorld) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_SmartRenderExtra {
    pub input: *mut PF_SmartRenderInput,
    pub cb: *mut PF_SmartRenderCallbacks,
}
#[doc = " -------------------- GPU Setup/Setdown Constants and Structures --------------------\n\nPF_Cmd_GPU_DEVICE_SETUP gets a PF_GPUDeviceSetupExtra struct in the extra pointer.\n\nPF_Cmd_GPU_DEVICE_SETDOWN gets a PF_GPUDeviceSetdownExtra struct in the extra pointer.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_GPUDeviceSetupInput {
    pub what_gpu: PF_GPU_Framework,
    pub device_index: A_u_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_GPUDeviceSetupOutput {
    pub gpu_data: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_GPUDeviceSetupExtra {
    pub input: *mut PF_GPUDeviceSetupInput,
    pub output: *mut PF_GPUDeviceSetupOutput,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_GPUDeviceSetdownInput {
    pub gpu_data: *mut ::std::os::raw::c_void,
    pub what_gpu: PF_GPU_Framework,
    pub device_index: A_u_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_GPUDeviceSetdownExtra {
    pub input: *mut PF_GPUDeviceSetdownInput,
}
#[doc = " -------------------- Interaction Callbacks --------------------\n\nEffects modules use callbacks to define their parameters.  When invoked,\nthey will be given the parameters values at the particular invocation\nmoment, but some effects may need to ask for the parameter values at\nother times (notably of layer parameters for, say, a visual echo).\n\nWhile running, effects modules are responsible for checking for user\ninterrupts.  This checking can be done with either the abort callback,\nwhich will return a value indicating if the user has taken any action,\nor with the progress callback, which performs user interrupt checking\njust like the abort callback, and also displays a progress display.\n\nAt the bottom of this section are macros for accessing these callback\nroutines.  The first parameter to each macro is a pointer to a PF_InData\nstructure, defined below.  This pointer will be passed to your effect.\n\ncheckout_param\nThe checkout_param callback allows you to inquire param values at times\nother than the current one, and allows you to access layer params other\nthan the default input layer and the output layer.  See the notes on the\n\"params\" structure at the end of this file.  The PF_ParamDef you must\nspecify cannot point into the \"params\" array; the memory must exist else-\nwhere, such as on the stack.\n\nIf you checkout a layer parameter and the layer popup is currently set\nto <none>, the return value will be filled with zeros.  You can check\nthe \"data\" pointer.  If it is NULL, then the layer param is set to <none>\nand you should do something like faking an all alpha zero layer or some\nsuch nonsense.  IMPORTANT: Due to 13.5 threading changes, checking out\na layer param that is not <none> inside of UPDATE_PARAMS_UI will return\na frame with black pixels to avoid render requests and possible deadlock.\nIn other selectors the actual render will be triggered as it did before.\n\ncheckin_param\nWhen you have called checkout_param, you must call checkin_param when you\nare done, so After Effects can clean up after itself and you.  This is\nvery important for smooth functioning and also to save memory where possible.\nOnce checked in, the fields in the PF_ParamDef will no longer be valid.\n\nadd_param\nWhen given the PARAMS_SETUP message, the effect will generally make a\nseries of calls to the add_param routine to define the interface that\nthe After Effects user will see.  See the PF_ParamDefs defined above.\nCurrently you can only add params at the end, and only at PARAMS_SETUP\ntime.\n\nabort\nPeriodically, you should check if the user wants to interrupt the\ncurrent processing.  The abort proc here will return non-zero if\nthe effects module should suspend its current processing.  If you\ncall this routine and it returns a value other than zero, you should\nreturn that value when your effect returns.  That will let us know\nif the effect completed rendering or not.\n\nprogress\nAlternatively, you may wish to display a progress bar while you are\nprocessing the image.  This routine combines the abort proc user\ninterrupt checking with code that will display a progress bar for\nyou.  The current and total params represent a fraction (current/total)\nthat describes how far you are along in your processing.  Current\nshould equal total when done.  Additionally, this routine will return\nnon-zero if you should suspend/abort your current processing.  You\nshould probably try not to call this too frequently (e.g. at every pixel).\nIt is better to call it, say, once per scanline, unless your filter is\nreally really slow."]
pub type PF_CustomUIInfo = _PF_CustomUIInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_InteractCallbacks {
    pub checkout_param: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            index: PF_ParamIndex,
            what_time: A_long,
            time_step: A_long,
            time_scale: A_u_long,
            param: *mut PF_ParamDef,
        ) -> PF_Err,
    >,
    pub checkin_param: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, param: *mut PF_ParamDef) -> PF_Err,
    >,
    pub add_param: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            index: PF_ParamIndex,
            def: PF_ParamDefPtr,
        ) -> PF_Err,
    >,
    pub abort: ::std::option::Option<unsafe extern "C" fn(effect_ref: PF_ProgPtr) -> PF_Err>,
    pub progress: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, current: A_long, total: A_long) -> PF_Err,
    >,
    pub register_ui: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, cust_info: *mut PF_CustomUIInfo) -> PF_Err,
    >,
    pub checkout_layer_audio: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            index: PF_ParamIndex,
            start_time: A_long,
            duration: A_long,
            time_scale: A_u_long,
            rate: PF_UFixed,
            bytes_per_sample: A_long,
            num_channels: A_long,
            fmt_signed: A_long,
            audio: *mut PF_LayerAudio,
        ) -> PF_Err,
    >,
    pub checkin_layer_audio: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, audio: PF_LayerAudio) -> PF_Err,
    >,
    pub get_audio_data: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            audio: PF_LayerAudio,
            data0: *mut PF_SndSamplePtr,
            num_samples0: *mut A_long,
            rate0: *mut PF_UFixed,
            bytes_per_sample0: *mut A_long,
            num_channels0: *mut A_long,
            fmt_signed0: *mut A_long,
        ) -> PF_Err,
    >,
    pub reserved_str: [*mut ::std::os::raw::c_void; 3usize],
    pub reserved: [*mut ::std::os::raw::c_void; 10usize],
}
#[doc = " -------------------- Effect Parameter Blocks --------------------\n\nThe effects module itself is invoked with input and output blocks\nof parameters for various messages that it needs to handle.  The\noutput block (values returned from the effect to the program) and\nthe input block (values provided by the program for the edification\nof the effect) are defined here.  Discussion follows.\n\nThe Output Block\n\nMost fields of the output block are only examined for changes after\ncertain commands have been sent to the effect module.  Each field\nbelow describes when it will be checked.\n\nmy_version\nThis is the version number of your plug-in effect, not to be confused\nwith the version of the plug-in specification. Please set this\nat PF_Cmd_GLOBAL_SETUP.\n\nname\nThis lets you override the name of the effect in the Time Layout and\nin the Effect Controls windows when the effect is applied. The name from\nthe PiPL resource is always used in the Effect menu. This field is\nchecked after PF_Cmd_SEQUENCE_SETUP. You will almost always leave\nthis field empty.\n\nglobal_data\nThis is a Handle that you can allocate at PF_Cmd_GLOBAL_SETUP\ntime.  It will be passed back to you verbatim in the input\nparameter block for use later on.  In PF_Cmd_GLOBAL_SETUP,\nthe global_data field in the Input Block may be set to a\nflattened version of your global data, in which case you should\nunflatten it, free the flat version, and set this field to the\nunflattened new global data.\n\nIt will be locked & unlocked for you automatically like sequence_data.\n\nnum_params\nThe calling application will sanity check the num_params field\nvs the times add_param is called.  The implicit main\nlayer parameter MUST be included in the parameter count.  Use the\nnum_params value in the in_data as a starting value (it will\ninclude the implicit layer parameter).\nSet this field when you get PF_Cmd_PARAMS_SETUP.\n\nsequence_data\nThis is a Handle that you can allocate (using PF_NEW_HANDLE)\nat PF_Cmd_SEQUENCE_SETUP time.\nIt will be passed back to you in the input parameter block\nfor later use.\n\nWARNING: this handle is always locked for you before your plugin\nis called, and the lock-state is restored on the way out.  If you\nhave arbitrary data, your plugin can be called re-entrantly, so\nif you have a lock/unlock inside your plugin, the handle will\nbecome unlocked prematurely -- instead simply depend on the host\nto lock & unlock your sequence data for you.  Of course during\nPF_Cmd_SEQUENCE_SETUP the handle you allocate will not be\nlocked unless you explicitly lock it at that time.\n\nThe contents of this handle will be written out to\ndisk.  If other handles\thang off this block, you must specify the\nPF_OutFlag_SEQUENCE_DATA_NEEDS_FLATTENING out flag when you get\nthe PF_Cmd_GLOBAL_SETUP command.  You will then receive the\nPF_Cmd_SEQUENCE_FLATTEN before your handle is written out.  At that\ntime, you should create a flat version of the handle contents,\nfree the old unflat handle, and set this field to the flattened\nversion of the handle.  Or after disposing, simply set to NULL\nand nothing will be written to disk.\n\nYou will receive a PF_Cmd_SEQUENCE_RESETUP\ncall to unflatten this handle (as well as to adjust the sequence\ndata to altered frame rates, etc).  If your\nsequence data can be flat or unflat, you should store its current\nstate along with the other data, and check that value in Resetup.\nIf the handle is flat, Resetup should unflatten it, free the flat\nhandle, and set this field to the new unflat usable handle.\n\nflat_sdata_size\nOBSOLETE.  Turns out, it was never used.  Since the handle\nset in sequence_data must be allocated using PF_NEW_HANDLE,\nthe host can find out the size of the handle without asking.\n\nframe_data\nThis is a Handle that you can allocated at PF_Cmd_FRAME_SETUP\ntime.  It will be passed to you in the input parameters, as\nwith the global_data and the sequence_data.  This will not\nbe written out to disk.  There is no particular use for this.\nSet this field in PF_Cmd_FRAME_SETUP, if you must.\n\nIt will be locked & unlocked for you like sequence_data.\n\nwidth\nheight\norigin\nYou set these fields at PF_Cmd_FRAME_SETUP time to indicate\nthat the output image will be larger than the input image.\nYou\tshould set width and height to the size that you want the\noutput buffer to be.  Set origin to the place that the\npoint (0,0) in the input should map to in the new larger\noutput.  Thus, if you created a 5 pixel drop shadow up and left,\nyou would set origin to (5, 5).\n\nout_flags\nout_flags2\nThis field can be set to an OR-ed combination of the PF_OutFlag\nand PF_OutFlag2 constants (don't mix them up!) to communicate\nthings to After Effects.  This will be checked after every\ncommand, but only certain flags are relevant at given times.\nCheck the PF_OutFlag constants above.\n\nreturn_msg\nThis is a message string (in C string format) that will be\ninterpreted as either an error message or a useful display\nmessage (for instance, for handling PF_Cmd_ABOUT).  Fill\nthis string with a message you want After Effects to report\nto the user for you.  It will come up in a simple dialog\nwith an OK button.  Set the first byte of this string to '\\0'\nto indicate no string -- it is set that way upon entry.  This\nfield is examined after every PF_Cmd.\n\nThe Input Block\n\nMany parts of the input block are actually structures defined elsewhere\nin this file, or in the companion file AE_EffectCB.h.  See the documentation\nwhere those structures are defined to understand their contents.\nWith any given PF_Cmd, only certain fields in the Input Block will\nhave valid values.  Each field described below tells when it is valid.\n\nin_flags\nin_flags2\nThese are various flags indicating some boolean value to\nthe effect module.  This is a combination of PF_InFlag values\nOR-ed together.  This is set for all commands, though most\nflags make sense only at certain times.  Usually this is\njust a copy of the PiPL global flags.  See PF_OutFlags and\nPF_OutFlags2 above.\n\ninter\nThis is a structure defined above containing callbacks\nrelated to user interaction.  This has callbacks to add parameters,\nto check if the user has interrupted the effect, to display\na progress bar, and to inquire parameter values outside of the\ncurrent moment.  See the doc above.  When each callback can\nvalidly be executed is defined above.\n\nutils\nThis is a pointer to a block of useful graphical and mathematical\ncallbacks provided for the effects module.  The documentation\nfor this block is in the AE_EffectCB.h file.  This is a void *,\nwhich can be confusing.  See AE_EffectCB.h for macros to use these\nfunctions.  This pointer will be defined at all times.\n\neffect_ref\nThis is a opaque piece of data that needs to be passed to\nmost of the various callback routines.  Don't worry about it.\n\nquality\nThis is set to one of the PF_Quality constants above to\ndescribe the Quality currently chosen by the user.  Ideally,\nyour effect should do a faster version with LO quality, and\na better, \"broadcast\"-able version with HI quality.  Also,\nsome of the utility callbacks perform differently between\nLO and HI quality.  This is defined for all PF_Cmds related\nto SEQUENCE and FRAME (obviously, including RENDER).\n\nversion\nThis is the version of the effects spec with which you are\nbeing invoked.  This will not be defined until after GLOBAL_SETUP.\n\nserial_num\nThis is the serial number of the invoking application.\n\nappl_id\nThis is the identifier of the invoking application.  It will\nbe the creator A_long of the app.\n\nfreq\nThis is an estimate of the frequency with which you should\ncall the abort check callback.  You can ignore this.\n\nnum_params\nThis is set to the number of input parameters you are receiving.\n\nwhat_cpu\nThis is set to the return value from Gestalt asking what sort\nof CPU your machine has.  If your effect requires a certain\ntype of CPU it should check this value and return an error\nindicating that it cannot run.  After Effects only runs on\n68020s and higher, so don't sweat it if you require that.\n\nwhat_fpu\nThis is set to the return value from Gestalt asking what sort\nof FPU your machine has.  If you require a floating point unit,\nyou should return the OutFlag indicating that in GLOBAL_SETUP,\nand then do not execute your floating point code if this value\nis set to 0 -- just do a PF_COPY of the input to the output when\nyou get the PF_Cmd_RENDER.  See OutFlag description above.\n\ncurrent_time\nThis is the time of the current frame.  It will be set in RENDER.\nThe number of the current frame is current_time / time_step.\nAll effects sequences start at time 0.\n\ntime_step\nThis is the time difference to the next or last frame.  This value\nand current_time and total_time are in units given by time_scale.\nThe time between frames is time_step, not 1.  This value will be 0\nat SEQUENCE_SETUP if it is not constant for all frames.  It will\nbe set correctly in the FRAME calls, even if it's not constant.\n\ntotal_time\nThis is the amount of time from the start to the end of the\nimage sequence on which this effect is being invoked.  The total\nnumber of frames is total_time / time_step.\n\ntime_scale\nThese are the units that current_time, time_step, and total_time\nare in.  See QuickTime for an explanation of how these time values work.\n\nwidth\nheight\nThese are the size of the input image. As Stoney Ballard points out,\nthese are certainly NOT the same as the\twidth and height fields in param[0],\nbut rather reflect the full-resolution dimensions of the input layer.\n\nfield\nWill be set to PF_Field_UPPER or PF_Field_LOWER during field-rendering\nif certain conditions are met -- for example: effect must have\nPF_OutFlag_PIX_INDEPENDENT set, and the layer to which the effect is\napplied must not be rotated, scaled nor positioned on a subpixel.\nYou can safely ignore the setting of this field, but might be able to\noptimize things by only processing the specified field.\n\nextent_hint\nThis is a rectangle that indicates the intersection of the visible\nportions of the input and output layers.  For an effect that does\nnot do a geometric distortion of the image, copying just this rectangle\nfrom the source image to the destination image is sufficient to copy\nall the image data that the user will see.  This can speed up effects\nvery much.  Just iterate over only this rectangle of pixels.\n\noutput_origin_x\noutput_origin_y\nThese fields correspond to the origin returned in the out_data at\nPF_Cmd_FRAME_SETUP time. They indicate the position of the top left\ncorner of the input buffer in the output buffer.\n\ndownsample_x\ndownsample_y\nFor speed, the user may have asked for only every Nth vertical or\nhorizontal pixel to be actually rendered by After Effects.  The width\nand height of all effect parameters (including layers) will be\nautomatically adjusted to compensate, but the effect needs to know\nthe downsampling factors to correctly interpret scalar parameters\n(ie. sliders) that represent pixel distances in the image.\nDownsample factors will be in the range 1 to 999+.  This is set in\nSEQUENCE_SETUP or RESETUP as the case may be. As of PF_PLUG_IN_VERSION 2,\nthis factor is a rational quantity.\n\nglobal_data\nsequence_data\nframe_data\nThese fields are copied from the out data on previous invocations\nand set here for you to access as you need them.  They will only\nbe set if they have been allocated during previous commands.\n\npre_effect_source_origin_x\npre_effect_source_origin_y\nThese fields are the origin of the source image in the input buffer. They are set\nonly during frame calls (PF_Cmd_FRAME_SETUP, PF_Cmd_RENDER, PF_Cmd_FRAME_SETDOWN).\nThey will be non-zero only if one or more effects that preceded this effect\non the same layer resized the output buffer (i.e. specified that the output\nimage will be larger or smaller than the input image)."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PF_OutData {
    pub my_version: A_u_long,
    pub name: [A_char; 32usize],
    pub global_data: PF_Handle,
    pub num_params: A_long,
    pub sequence_data: PF_Handle,
    pub flat_sdata_size: A_long,
    pub frame_data: PF_Handle,
    pub width: A_long,
    pub height: A_long,
    pub origin: PF_Point,
    pub out_flags: PF_OutFlags,
    pub return_msg: [A_char; 256usize],
    pub start_sampL: A_long,
    pub dur_sampL: A_long,
    pub dest_snd: PF_SoundWorld,
    pub out_flags2: PF_OutFlags2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_InData {
    pub inter: PF_InteractCallbacks,
    pub utils: *mut _PF_UtilCallbacks,
    pub effect_ref: PF_ProgPtr,
    pub quality: PF_Quality,
    pub version: PF_SpecVersion,
    pub serial_num: A_long,
    pub appl_id: A_long,
    pub num_params: A_long,
    pub reserved: A_long,
    pub what_cpu: A_long,
    pub what_fpu: A_long,
    pub current_time: A_long,
    pub time_step: A_long,
    pub total_time: A_long,
    pub local_time_step: A_long,
    pub time_scale: A_u_long,
    pub field: PF_Field,
    pub shutter_angle: PF_Fixed,
    pub width: A_long,
    pub height: A_long,
    pub extent_hint: PF_Rect,
    pub output_origin_x: A_long,
    pub output_origin_y: A_long,
    pub downsample_x: PF_RationalScale,
    pub downsample_y: PF_RationalScale,
    pub pixel_aspect_ratio: PF_RationalScale,
    pub in_flags: PF_InFlags,
    pub global_data: PF_Handle,
    pub sequence_data: PF_Handle,
    pub frame_data: PF_Handle,
    pub start_sampL: A_long,
    pub dur_sampL: A_long,
    pub total_sampL: A_long,
    pub src_snd: PF_SoundWorld,
    pub pica_basicP: *mut SPBasicSuite,
    pub pre_effect_source_origin_x: A_long,
    pub pre_effect_source_origin_y: A_long,
    pub shutter_phase: PF_Fixed,
}
#[doc = " -------------------- Effect Prototype --------------------\n\nThe effects module provides a single entry point corresponding to the\nbelow prototype through which all messages are dispatched to the\nappropriate code.\n\nThe cmd parameter is one of the PF_Cmd enumeration defined above.\nAll commands are discussed at that enumeration.  There are a lot.\n\nThe in_data and out_data parameters are respectively, PF_InData and\nPF_OutData blocks defined and described above.  The in_data contains\nread only information that the effect can use.  The out_data contains\nwrite only information through which the effect communicates back to\nthe calling program.  The descriptions above give a lot more detail.\n\nThe params list is an array of pointers to variably sized PF_ParamDef\nstructs.  This is in typical Unix-like argv format, where the last item\npoints to NULL.  The entries in this array describe the current settings\nof the parameters to the effect.  Params[0] is the layer to which the\neffect has been applied and is a PF_LayerDef param.  Other parameters\nare defined by the effect.\n\nThe output param is also a PF_LayerDef param, like params[0], and is\nan output buffer into which your effect should write the new contents\nof the layer.\n\nA brief explanation about parameter passing to effects:\n\nWhen you are invoked to Render, all \"params\" array entries will be filled\nwith their value at the current time, except for layer params other than\nthe default input layer parameter (ie. param[0]).  To get other layer param\nvalues, you must call the checkout_param callback.  (See callbacks above.)\n\nIn other words, on PF_Cmd_RENDER, params[0] will be a valid ready-to-use\nPF_EffectWorld and output will be a valid ready-to-use PF_EffectWorld.  Other params that\nare not layer params (i.e. sliders, popups, etc.) will be ready-to-use, filled\nwith their value at the current time; you do not need to call checkout_param for\nthem.  However, other params (besides [0]) that are layer params will NOT be\nfilled in correctly -- you must make a checkout_param callback to get them.\n\nANY param which you call checkout_param on, you must also call checkin_param\nbefore you exit.  If not, After Effects will automatically erase your effect\nmodule code resource from the users hard disk, along with any files that contain\nyour name or any nicknames you have.  Sorry.  Calling checkin_param is important!"]
pub type PF_FilterProc = ::std::option::Option<
    unsafe extern "C" fn(
        cmd: PF_Cmd,
        in_data: *mut PF_InData,
        out_data: *mut PF_OutData,
        params: PF_ParamList,
        output: *mut PF_LayerDef,
        extra: *mut ::std::os::raw::c_void,
    ) -> PF_Err,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DRAWBOT_DrawRef {
    _unused: [u8; 0],
}
pub type DRAWBOT_DrawRef = *mut _DRAWBOT_DrawRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DRAWBOT_SupplierRef {
    _unused: [u8; 0],
}
pub type DRAWBOT_SupplierRef = *mut _DRAWBOT_SupplierRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DRAWBOT_SurfaceRef {
    _unused: [u8; 0],
}
pub type DRAWBOT_SurfaceRef = *mut _DRAWBOT_SurfaceRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DRAWBOT_PenRef {
    _unused: [u8; 0],
}
pub type DRAWBOT_PenRef = *mut _DRAWBOT_PenRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DRAWBOT_PathRef {
    _unused: [u8; 0],
}
pub type DRAWBOT_PathRef = *mut _DRAWBOT_PathRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DRAWBOT_BrushRef {
    _unused: [u8; 0],
}
pub type DRAWBOT_BrushRef = *mut _DRAWBOT_BrushRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DRAWBOT_ImageRef {
    _unused: [u8; 0],
}
pub type DRAWBOT_ImageRef = *mut _DRAWBOT_ImageRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DRAWBOT_FontRef {
    _unused: [u8; 0],
}
pub type DRAWBOT_FontRef = *mut _DRAWBOT_FontRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DRAWBOT_ObjectRef {
    _unused: [u8; 0],
}
pub type DRAWBOT_ObjectRef = *mut _DRAWBOT_ObjectRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DRAWBOT_ColorRGBA {
    pub red: f32,
    pub green: f32,
    pub blue: f32,
    pub alpha: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DRAWBOT_PointF32 {
    pub x: f32,
    pub y: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DRAWBOT_RectF32 {
    pub left: f32,
    pub top: f32,
    pub width: f32,
    pub height: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DRAWBOT_Rect32 {
    pub left: ::std::os::raw::c_int,
    pub top: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DRAWBOT_MatrixF32 {
    pub mat: [[f32; 3usize]; 3usize],
}
pub const kDRAWBOT_FillType_EvenOdd: _bindgen_ty_31 = 0;
pub const kDRAWBOT_FillType_Winding: _bindgen_ty_31 = 1;
pub const kDRAWBOT_FillType_Default: _bindgen_ty_31 = 1;
pub type _bindgen_ty_31 = ::std::os::raw::c_int;
pub type DRAWBOT_FillType = ::std::os::raw::c_int;
pub const kDRAWBOT_PixelLayout_24RGB: _bindgen_ty_32 = 0;
pub const kDRAWBOT_PixelLayout_24BGR: _bindgen_ty_32 = 1;
pub const kDRAWBOT_PixelLayout_32RGB: _bindgen_ty_32 = 2;
pub const kDRAWBOT_PixelLayout_32BGR: _bindgen_ty_32 = 3;
pub const kDRAWBOT_PixelLayout_32ARGB_Straight: _bindgen_ty_32 = 4;
pub const kDRAWBOT_PixelLayout_32ARGB_Premul: _bindgen_ty_32 = 5;
pub const kDRAWBOT_PixelLayout_32BGRA_Straight: _bindgen_ty_32 = 6;
pub const kDRAWBOT_PixelLayout_32BGRA_Premul: _bindgen_ty_32 = 7;
pub type _bindgen_ty_32 = ::std::os::raw::c_int;
pub type DRAWBOT_PixelLayout = ::std::os::raw::c_int;
pub const kDRAWBOT_TextAlignment_Left: _bindgen_ty_33 = 0;
pub const kDRAWBOT_TextAlignment_Center: _bindgen_ty_33 = 1;
pub const kDRAWBOT_TextAlignment_Right: _bindgen_ty_33 = 2;
pub const kDRAWBOT_TextAlignment_Default: _bindgen_ty_33 = 0;
pub type _bindgen_ty_33 = ::std::os::raw::c_int;
pub type DRAWBOT_TextAlignment = ::std::os::raw::c_int;
pub const kDRAWBOT_TextTruncation_None: _bindgen_ty_34 = 0;
pub const kDRAWBOT_TextTruncation_End: _bindgen_ty_34 = 1;
pub const kDRAWBOT_TextTruncation_EndEllipsis: _bindgen_ty_34 = 2;
pub const kDRAWBOT_TextTruncation_PathEllipsis: _bindgen_ty_34 = 3;
pub type _bindgen_ty_34 = ::std::os::raw::c_int;
pub type DRAWBOT_TextTruncation = ::std::os::raw::c_int;
pub const kDRAWBOT_InterpolationPolicy_None: _bindgen_ty_35 = 0;
pub const kDRAWBOT_InterpolationPolicy_Med: _bindgen_ty_35 = 1;
pub const kDRAWBOT_InterpolationPolicy_High: _bindgen_ty_35 = 2;
pub const kDRAWBOT_InterpolationPolicy_Default: _bindgen_ty_35 = 0;
pub type _bindgen_ty_35 = ::std::os::raw::c_int;
pub type DRAWBOT_InterpolationPolicy = ::std::os::raw::c_int;
pub const kDRAWBOT_AntiAliasPolicy_None: _bindgen_ty_36 = 0;
pub const kDRAWBOT_AntiAliasPolicy_Med: _bindgen_ty_36 = 1;
pub const kDRAWBOT_AntiAliasPolicy_High: _bindgen_ty_36 = 2;
pub const kDRAWBOT_AntiAliasPolicy_Default: _bindgen_ty_36 = 0;
pub type _bindgen_ty_36 = ::std::os::raw::c_int;
pub type DRAWBOT_AntiAliasPolicy = ::std::os::raw::c_int;
pub const PF_CustomEFlag_NONE: _bindgen_ty_37 = 0;
pub const PF_CustomEFlag_COMP: _bindgen_ty_37 = 1;
pub const PF_CustomEFlag_LAYER: _bindgen_ty_37 = 2;
pub const PF_CustomEFlag_EFFECT: _bindgen_ty_37 = 4;
pub const PF_CustomEFlag_PREVIEW: _bindgen_ty_37 = 8;
#[doc = " PF_CustomFlags\n\n kinds of events and actions the custom parameter type might require\n"]
pub type _bindgen_ty_37 = ::std::os::raw::c_int;
pub type PF_CustomEventFlags = A_long;
pub const PF_Window_NONE: _bindgen_ty_38 = -1;
pub const PF_Window_COMP: _bindgen_ty_38 = 0;
pub const PF_Window_LAYER: _bindgen_ty_38 = 1;
pub const PF_Window_EFFECT: _bindgen_ty_38 = 2;
pub const PF_Window_PREVIEW: _bindgen_ty_38 = 3;
pub type _bindgen_ty_38 = ::std::os::raw::c_int;
pub type PF_WindowType = A_long;
pub const PF_Event_NONE: _bindgen_ty_39 = -1;
pub const PF_Event_NEW_CONTEXT: _bindgen_ty_39 = 0;
pub const PF_Event_ACTIVATE: _bindgen_ty_39 = 1;
pub const PF_Event_DO_CLICK: _bindgen_ty_39 = 2;
pub const PF_Event_DRAG: _bindgen_ty_39 = 3;
pub const PF_Event_DRAW: _bindgen_ty_39 = 4;
pub const PF_Event_DEACTIVATE: _bindgen_ty_39 = 5;
pub const PF_Event_CLOSE_CONTEXT: _bindgen_ty_39 = 6;
pub const PF_Event_IDLE: _bindgen_ty_39 = 7;
pub const PF_Event_KEYDOWN_OBSOLETE: _bindgen_ty_39 = 8;
pub const PF_Event_ADJUST_CURSOR: _bindgen_ty_39 = 9;
pub const PF_Event_KEYDOWN: _bindgen_ty_39 = 10;
pub const PF_Event_MOUSE_EXITED: _bindgen_ty_39 = 11;
pub const PF_Event_NUM_EVENTS: _bindgen_ty_39 = 12;
pub type _bindgen_ty_39 = ::std::os::raw::c_int;
pub type PF_EventType = A_long;
pub const PF_Cursor_NONE: _bindgen_ty_40 = 0;
pub const PF_Cursor_CUSTOM: _bindgen_ty_40 = 1;
pub const PF_Cursor_ARROW: _bindgen_ty_40 = 2;
pub const PF_Cursor_HOLLOW_ARROW: _bindgen_ty_40 = 3;
pub const PF_Cursor_WATCH_N_WAIT: _bindgen_ty_40 = 4;
pub const PF_Cursor_MAGNIFY: _bindgen_ty_40 = 5;
pub const PF_Cursor_MAGNIFY_PLUS: _bindgen_ty_40 = 6;
pub const PF_Cursor_MAGNIFY_MINUS: _bindgen_ty_40 = 7;
pub const PF_Cursor_CROSSHAIRS: _bindgen_ty_40 = 8;
pub const PF_Cursor_CROSS_RECT: _bindgen_ty_40 = 9;
pub const PF_Cursor_CROSS_OVAL: _bindgen_ty_40 = 10;
pub const PF_Cursor_CROSS_ROTATE: _bindgen_ty_40 = 11;
pub const PF_Cursor_PAN: _bindgen_ty_40 = 12;
pub const PF_Cursor_EYEDROPPER: _bindgen_ty_40 = 13;
pub const PF_Cursor_HAND: _bindgen_ty_40 = 14;
pub const PF_Cursor_PEN: _bindgen_ty_40 = 15;
pub const PF_Cursor_PEN_ADD: _bindgen_ty_40 = 16;
pub const PF_Cursor_PEN_DELETE: _bindgen_ty_40 = 17;
pub const PF_Cursor_PEN_CLOSE: _bindgen_ty_40 = 18;
pub const PF_Cursor_PEN_DRAG: _bindgen_ty_40 = 19;
pub const PF_Cursor_PEN_CORNER: _bindgen_ty_40 = 20;
pub const PF_Cursor_RESIZE_VERTICAL: _bindgen_ty_40 = 21;
pub const PF_Cursor_RESIZE_HORIZONTAL: _bindgen_ty_40 = 22;
pub const PF_Cursor_FINGER_POINTER: _bindgen_ty_40 = 23;
pub const PF_Cursor_SCALE_HORIZ: _bindgen_ty_40 = 24;
pub const PF_Cursor_SCALE_DIAG_LR: _bindgen_ty_40 = 25;
pub const PF_Cursor_SCALE_VERT: _bindgen_ty_40 = 26;
pub const PF_Cursor_SCALE_DIAG_UR: _bindgen_ty_40 = 27;
pub const PF_Cursor_ROT_TOP: _bindgen_ty_40 = 28;
pub const PF_Cursor_ROT_TOP_RIGHT: _bindgen_ty_40 = 29;
pub const PF_Cursor_ROT_RIGHT: _bindgen_ty_40 = 30;
pub const PF_Cursor_ROT_BOT_RIGHT: _bindgen_ty_40 = 31;
pub const PF_Cursor_ROT_BOTTOM: _bindgen_ty_40 = 32;
pub const PF_Cursor_ROT_BOT_LEFT: _bindgen_ty_40 = 33;
pub const PF_Cursor_ROT_LEFT: _bindgen_ty_40 = 34;
pub const PF_Cursor_ROT_TOP_LEFT: _bindgen_ty_40 = 35;
pub const PF_Cursor_DRAG_CENTER: _bindgen_ty_40 = 36;
pub const PF_Cursor_COPY: _bindgen_ty_40 = 37;
pub const PF_Cursor_ALIAS: _bindgen_ty_40 = 38;
pub const PF_Cursor_CONTEXT: _bindgen_ty_40 = 39;
pub const PF_Cursor_SLIP_EDIT: _bindgen_ty_40 = 40;
pub const PF_Cursor_CAMERA_ORBIT_CAMERA: _bindgen_ty_40 = 41;
pub const PF_Cursor_CAMERA_PAN_CAMERA: _bindgen_ty_40 = 42;
pub const PF_Cursor_CAMERA_DOLLY_CAMERA: _bindgen_ty_40 = 43;
pub const PF_Cursor_ROTATE_X: _bindgen_ty_40 = 44;
pub const PF_Cursor_ROTATE_Y: _bindgen_ty_40 = 45;
pub const PF_Cursor_ROTATE_Z: _bindgen_ty_40 = 46;
pub const PF_Cursor_ARROW_X: _bindgen_ty_40 = 47;
pub const PF_Cursor_ARROW_Y: _bindgen_ty_40 = 48;
pub const PF_Cursor_ARROW_Z: _bindgen_ty_40 = 49;
pub const PF_Cursor_SCISSORS: _bindgen_ty_40 = 50;
pub const PF_Cursor_FAT_EYEDROPPER: _bindgen_ty_40 = 51;
pub const PF_Cursor_FINGER_POINTER_SCRUB: _bindgen_ty_40 = 52;
pub const PF_Cursor_HORZ_I_BEAM: _bindgen_ty_40 = 53;
pub const PF_Cursor_VERT_I_BEAM: _bindgen_ty_40 = 54;
pub const PF_Cursor_HORZ_BOX_I_BEAM: _bindgen_ty_40 = 55;
pub const PF_Cursor_VERT_BOX_I_BEAM: _bindgen_ty_40 = 56;
pub const PF_Cursor_I_BEAM_0: _bindgen_ty_40 = 57;
pub const PF_Cursor_I_BEAM_11_25: _bindgen_ty_40 = 58;
pub const PF_Cursor_I_BEAM_22_5: _bindgen_ty_40 = 59;
pub const PF_Cursor_I_BEAM_33_75: _bindgen_ty_40 = 60;
pub const PF_Cursor_I_BEAM_45: _bindgen_ty_40 = 61;
pub const PF_Cursor_I_BEAM_56_25: _bindgen_ty_40 = 62;
pub const PF_Cursor_I_BEAM_67_5: _bindgen_ty_40 = 63;
pub const PF_Cursor_I_BEAM_78_75: _bindgen_ty_40 = 64;
pub const PF_Cursor_I_BEAM_90: _bindgen_ty_40 = 65;
pub const PF_Cursor_I_BEAM_101_25: _bindgen_ty_40 = 66;
pub const PF_Cursor_I_BEAM_112_5: _bindgen_ty_40 = 67;
pub const PF_Cursor_I_BEAM_123_75: _bindgen_ty_40 = 68;
pub const PF_Cursor_I_BEAM_135: _bindgen_ty_40 = 69;
pub const PF_Cursor_I_BEAM_146_25: _bindgen_ty_40 = 70;
pub const PF_Cursor_I_BEAM_157_5: _bindgen_ty_40 = 71;
pub const PF_Cursor_I_BEAM_168_75: _bindgen_ty_40 = 72;
pub const PF_Cursor_CROSSHAIRS_PICKUP: _bindgen_ty_40 = 73;
pub const PF_Cursor_ARROW_SELECTOR: _bindgen_ty_40 = 74;
pub const PF_Cursor_LAYER_MOVE: _bindgen_ty_40 = 75;
pub const PF_Cursor_MOVE_START_MARGIN: _bindgen_ty_40 = 76;
pub const PF_Cursor_MOVE_END_MARGIN: _bindgen_ty_40 = 77;
pub const PF_Cursor_SOLID_ARROW: _bindgen_ty_40 = 78;
pub const PF_Cursor_HOLLOW_ARROW_PLUS: _bindgen_ty_40 = 79;
pub const PF_Cursor_BRUSH_CENTER: _bindgen_ty_40 = 80;
pub const PF_Cursor_CLONE_SOURCE: _bindgen_ty_40 = 81;
pub const PF_Cursor_CLONE_SOURCE_OFFSET: _bindgen_ty_40 = 82;
pub const PF_Cursor_HOLLOW_LAYER_MOVE: _bindgen_ty_40 = 83;
pub const PF_Cursor_MOVE_TRACK_SEARCH_REGION: _bindgen_ty_40 = 84;
pub const PF_Cursor_MOVE_TRACK_ATTACH_POINT: _bindgen_ty_40 = 85;
pub const PF_Cursor_COLOR_CUBE_CROSS_SECTION: _bindgen_ty_40 = 86;
pub const PF_Cursor_PEN_CORNER_ROTOBEZ_TENSION: _bindgen_ty_40 = 87;
pub const PF_Cursor_PIN: _bindgen_ty_40 = 88;
pub const PF_Cursor_PIN_ADD: _bindgen_ty_40 = 89;
pub const PF_Cursor_MESH_ADD: _bindgen_ty_40 = 90;
pub const PF_Cursor_MARQUEE: _bindgen_ty_40 = 91;
pub const PF_Cursor_CROSS_ROUNDED_RECT: _bindgen_ty_40 = 92;
pub const PF_Cursor_CROSS_POLYGON: _bindgen_ty_40 = 93;
pub const PF_Cursor_CROSS_STAR: _bindgen_ty_40 = 94;
pub const PF_Cursor_PIN_STARCH: _bindgen_ty_40 = 95;
pub const PF_Cursor_PIN_OVERLAP: _bindgen_ty_40 = 96;
pub const PF_Cursor_STOPWATCH: _bindgen_ty_40 = 97;
pub const PF_Cursor_DRAG_DOT: _bindgen_ty_40 = 98;
pub const PF_Cursor_DRAG_CIRCLE: _bindgen_ty_40 = 99;
pub const PF_Cursor_DIRECT_SELECT: _bindgen_ty_40 = 100;
pub const PF_Cursor_DRAG_COPY_MOVE: _bindgen_ty_40 = 101;
pub const PF_Cursor_DRAG_COPY_ROTATE: _bindgen_ty_40 = 102;
pub const PF_Cursor_CAMERA_MAYA: _bindgen_ty_40 = 103;
pub const PF_Cursor_RESIZE_HORIZONTAL_LEFT: _bindgen_ty_40 = 104;
pub const PF_Cursor_RESIZE_HORIZONTAL_RIGHT: _bindgen_ty_40 = 105;
pub const PF_Cursor_FEATHER: _bindgen_ty_40 = 106;
pub const PF_Cursor_FEATHER_ADD: _bindgen_ty_40 = 107;
pub const PF_Cursor_FEATHER_DELETE: _bindgen_ty_40 = 108;
pub const PF_Cursor_FEATHER_MOVE: _bindgen_ty_40 = 109;
pub const PF_Cursor_FEATHER_TENSION: _bindgen_ty_40 = 110;
pub const PF_Cursor_FEATHER_MARQUEE: _bindgen_ty_40 = 111;
pub const PF_Cursor_LASSO_ARROW: _bindgen_ty_40 = 112;
pub const PF_Cursor_DRAG_NO_DROP: _bindgen_ty_40 = 113;
pub const PF_Cursor_DRAG_COPY: _bindgen_ty_40 = 114;
pub const PF_Cursor_DRAG_LINK: _bindgen_ty_40 = 115;
pub const PF_Cursor_PIN_BEND: _bindgen_ty_40 = 116;
pub const PF_Cursor_PIN_ADVANCED: _bindgen_ty_40 = 117;
pub const PF_Cursor_CAMERA_ORBIT_CURSOR: _bindgen_ty_40 = 118;
pub const PF_Cursor_CAMERA_ORBIT_SCENE: _bindgen_ty_40 = 119;
pub const PF_Cursor_CAMERA_PAN_CURSOR: _bindgen_ty_40 = 120;
pub const PF_Cursor_CAMERA_DOLLY_TOWARDS_CURSOR: _bindgen_ty_40 = 121;
pub const PF_Cursor_CAMERA_DOLLY_TO_CURSOR: _bindgen_ty_40 = 122;
pub const PF_MAX_CURSOR_PLUS_ONE: _bindgen_ty_40 = 123;
pub type _bindgen_ty_40 = ::std::os::raw::c_int;
pub type PF_CursorType = A_long;
pub const PF_Mod_NONE: _bindgen_ty_41 = 0;
pub const PF_Mod_CMD_CTRL_KEY: _bindgen_ty_41 = 256;
pub const PF_Mod_SHIFT_KEY: _bindgen_ty_41 = 512;
pub const PF_Mod_CAPS_LOCK_KEY: _bindgen_ty_41 = 1024;
pub const PF_Mod_OPT_ALT_KEY: _bindgen_ty_41 = 2048;
pub const PF_Mod_MAC_CONTROL_KEY: _bindgen_ty_41 = 4096;
pub type _bindgen_ty_41 = ::std::os::raw::c_int;
pub type PF_Modifiers = A_long;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PF_AdjustCursorEventInfo {
    pub screen_point: PF_Point,
    pub modifiers: PF_Modifiers,
    pub set_cursor: PF_CursorType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PF_DoClickEventInfo {
    pub when: A_u_long,
    pub screen_point: PF_Point,
    pub num_clicks: A_long,
    pub modifiers: PF_Modifiers,
    pub continue_refcon: [A_intptr_t; 4usize],
    pub send_drag: PF_Boolean,
    pub last_time: PF_Boolean,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_DrawEventInfo {
    pub update_rect: PF_UnionableRect,
    pub depth: A_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PF_KeyDownEventObsolete {
    pub when: A_u_long,
    pub screen_point: PF_Point,
    pub char_code: A_long,
    pub key_code: A_long,
    pub modifiers: PF_Modifiers,
}
pub type PF_KeyCode = A_u_long;
pub type PF_ControlCode = A_u_short;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PF_KeyDownEvent {
    pub when: A_u_long,
    pub screen_point: PF_Point,
    pub keycode: PF_KeyCode,
    pub modifiers: PF_Modifiers,
}
pub const PF_KEYCODE_FLAG_Printable: _bindgen_ty_42 = -2147483648;
pub const PF_KEYCODE_FLAG_Extended: _bindgen_ty_42 = 1073741824;
pub type _bindgen_ty_42 = ::std::os::raw::c_int;
pub const PF_ControlCode_Unknown: _bindgen_ty_43 = 65535;
pub const PF_ControlCode_Space: _bindgen_ty_43 = 1;
pub const PF_ControlCode_Backspace: _bindgen_ty_43 = 2;
pub const PF_ControlCode_Tab: _bindgen_ty_43 = 3;
pub const PF_ControlCode_Return: _bindgen_ty_43 = 4;
pub const PF_ControlCode_Enter: _bindgen_ty_43 = 5;
pub const PF_ControlCode_Escape: _bindgen_ty_43 = 6;
pub const PF_ControlCode_F1: _bindgen_ty_43 = 7;
pub const PF_ControlCode_F2: _bindgen_ty_43 = 8;
pub const PF_ControlCode_F3: _bindgen_ty_43 = 9;
pub const PF_ControlCode_F4: _bindgen_ty_43 = 10;
pub const PF_ControlCode_F5: _bindgen_ty_43 = 11;
pub const PF_ControlCode_F6: _bindgen_ty_43 = 12;
pub const PF_ControlCode_F7: _bindgen_ty_43 = 13;
pub const PF_ControlCode_F8: _bindgen_ty_43 = 14;
pub const PF_ControlCode_F9: _bindgen_ty_43 = 15;
pub const PF_ControlCode_F10: _bindgen_ty_43 = 16;
pub const PF_ControlCode_F11: _bindgen_ty_43 = 17;
pub const PF_ControlCode_F12: _bindgen_ty_43 = 18;
pub const PF_ControlCode_F13: _bindgen_ty_43 = 19;
pub const PF_ControlCode_F14: _bindgen_ty_43 = 20;
pub const PF_ControlCode_F15: _bindgen_ty_43 = 21;
pub const PF_ControlCode_F16: _bindgen_ty_43 = 22;
pub const PF_ControlCode_F17: _bindgen_ty_43 = 23;
pub const PF_ControlCode_F18: _bindgen_ty_43 = 24;
pub const PF_ControlCode_F19: _bindgen_ty_43 = 25;
pub const PF_ControlCode_F20: _bindgen_ty_43 = 26;
pub const PF_ControlCode_F21: _bindgen_ty_43 = 27;
pub const PF_ControlCode_F22: _bindgen_ty_43 = 28;
pub const PF_ControlCode_F23: _bindgen_ty_43 = 29;
pub const PF_ControlCode_F24: _bindgen_ty_43 = 30;
pub const PF_ControlCode_PrintScreen: _bindgen_ty_43 = 31;
pub const PF_ControlCode_ScrollLock: _bindgen_ty_43 = 32;
pub const PF_ControlCode_Pause: _bindgen_ty_43 = 33;
pub const PF_ControlCode_Insert: _bindgen_ty_43 = 34;
pub const PF_ControlCode_Delete: _bindgen_ty_43 = 35;
pub const PF_ControlCode_Home: _bindgen_ty_43 = 36;
pub const PF_ControlCode_End: _bindgen_ty_43 = 37;
pub const PF_ControlCode_PageUp: _bindgen_ty_43 = 38;
pub const PF_ControlCode_PageDown: _bindgen_ty_43 = 39;
pub const PF_ControlCode_Help: _bindgen_ty_43 = 40;
pub const PF_ControlCode_Clear: _bindgen_ty_43 = 41;
pub const PF_ControlCode_Left: _bindgen_ty_43 = 42;
pub const PF_ControlCode_Right: _bindgen_ty_43 = 43;
pub const PF_ControlCode_Up: _bindgen_ty_43 = 44;
pub const PF_ControlCode_Down: _bindgen_ty_43 = 45;
pub const PF_ControlCode_NumLock: _bindgen_ty_43 = 46;
pub const PF_ControlCode_Command: _bindgen_ty_43 = 47;
pub const PF_ControlCode_Option: _bindgen_ty_43 = 48;
pub const PF_ControlCode_Alt: _bindgen_ty_43 = 48;
pub const PF_ControlCode_Control: _bindgen_ty_43 = 49;
pub const PF_ControlCode_Shift: _bindgen_ty_43 = 50;
pub const PF_ControlCode_CapsLock: _bindgen_ty_43 = 51;
pub const PF_ControlCode_ContextMenu: _bindgen_ty_43 = 52;
pub type _bindgen_ty_43 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union PF_EventUnion {
    pub do_click: PF_DoClickEventInfo,
    pub draw: PF_DrawEventInfo,
    pub key_down: PF_KeyDownEvent,
    pub adjust_cursor: PF_AdjustCursorEventInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PF_ContextRefcon {
    _unused: [u8; 0],
}
pub type PF_ContextRefcon = *mut _PF_ContextRefcon;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_Context {
    pub magic: A_u_long,
    pub w_type: PF_WindowType,
    pub reserved_flt: PF_ContextRefcon,
    pub plugin_state: [A_intptr_t; 4usize],
    pub reserved_drawref: DRAWBOT_DrawRef,
    pub reserved_paneP: *mut ::std::os::raw::c_void,
    pub reserved_job_manageP: *mut ::std::os::raw::c_void,
}
pub type PF_ContextPtr = *mut PF_Context;
pub type PF_ContextH = *mut *mut PF_Context;
pub const PF_StylusTool_PenTip: PF_StylusTool = 0;
pub const PF_StylusTool_PenEraser: PF_StylusTool = 1;
pub type PF_StylusTool = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_StylusEventInfo {
    pub stylus_tiltxF: A_FpShort,
    pub stylus_tiltyF: A_FpShort,
    pub stylus_pressureF: A_FpShort,
    pub stylus_wheelF: A_FpShort,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PF_PointerEventInfo {
    pub when_secondsF: A_FpLong,
    pub screen_point: PF_Point,
    pub num_clicksS: A_short,
    pub mod_keysL: A_long,
    pub stylus_tool: PF_StylusTool,
    pub stylus_extra_dataB: PF_Boolean,
    pub stylus_extra_data: PF_StylusEventInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_EventCallbacks {
    pub refcon: *mut ::std::os::raw::c_void,
    pub layer_to_comp: ::std::option::Option<
        unsafe extern "C" fn(
            refcon: *mut ::std::os::raw::c_void,
            context: PF_ContextH,
            curr_time: A_long,
            time_scale: A_long,
            pt: *mut PF_FixedPoint,
        ) -> PF_Err,
    >,
    pub comp_to_layer: ::std::option::Option<
        unsafe extern "C" fn(
            refcon: *mut ::std::os::raw::c_void,
            context: PF_ContextH,
            curr_time: A_long,
            time_scale: A_long,
            pt: *mut PF_FixedPoint,
        ) -> PF_Err,
    >,
    pub get_comp2layer_xform: ::std::option::Option<
        unsafe extern "C" fn(
            refcon: *mut ::std::os::raw::c_void,
            context: PF_ContextH,
            curr_time: A_long,
            time_scale: A_long,
            exists: *mut A_long,
            c2l: *mut PF_FloatMatrix,
        ) -> PF_Err,
    >,
    pub get_layer2comp_xform: ::std::option::Option<
        unsafe extern "C" fn(
            refcon: *mut ::std::os::raw::c_void,
            context: PF_ContextH,
            curr_time: A_long,
            time_scale: A_long,
            l2c: *mut PF_FloatMatrix,
        ) -> PF_Err,
    >,
    pub source_to_frame: ::std::option::Option<
        unsafe extern "C" fn(
            refcon: *mut ::std::os::raw::c_void,
            context: PF_ContextH,
            pt: *mut PF_FixedPoint,
        ) -> PF_Err,
    >,
    pub frame_to_source: ::std::option::Option<
        unsafe extern "C" fn(
            refcon: *mut ::std::os::raw::c_void,
            context: PF_ContextH,
            pt: *mut PF_FixedPoint,
        ) -> PF_Err,
    >,
    pub info_draw_color: ::std::option::Option<
        unsafe extern "C" fn(refcon: *mut ::std::os::raw::c_void, color: PF_Pixel) -> PF_Err,
    >,
    pub info_draw_text: ::std::option::Option<
        unsafe extern "C" fn(
            refcon: *mut ::std::os::raw::c_void,
            text1Z0: *const A_char,
            text2Z0: *const A_char,
        ) -> PF_Err,
    >,
}
pub type PF_EventCallbacksPtr = *mut PF_EventCallbacks;
pub const PF_EA_NONE: _bindgen_ty_44 = 0;
pub const PF_EA_PARAM_TITLE: _bindgen_ty_44 = 1;
pub const PF_EA_CONTROL: _bindgen_ty_44 = 2;
pub type _bindgen_ty_44 = ::std::os::raw::c_int;
pub type PF_EffectArea = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_EffectWindowInfo {
    pub index: PF_ParamIndex,
    pub area: PF_EffectArea,
    pub current_frame: PF_UnionableRect,
    pub param_title_frame: PF_UnionableRect,
    pub horiz_offset: A_long,
}
pub const PF_EO_NONE: _bindgen_ty_45 = 0;
pub const PF_EO_HANDLED_EVENT: _bindgen_ty_45 = 1;
pub const PF_EO_ALWAYS_UPDATE: _bindgen_ty_45 = 2;
pub const PF_EO_NEVER_UPDATE: _bindgen_ty_45 = 4;
pub const PF_EO_UPDATE_NOW: _bindgen_ty_45 = 8;
pub type _bindgen_ty_45 = ::std::os::raw::c_int;
pub type PF_EventOutFlags = A_long;
pub const PF_EI_NONE: _bindgen_ty_46 = 0;
pub const PF_EI_DONT_DRAW: _bindgen_ty_46 = 1;
pub type _bindgen_ty_46 = ::std::os::raw::c_int;
pub type PF_EventInFlags = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ItemWindowInfo {
    pub port_rect: PF_UnionableRect,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PF_WindowUnion {
    pub effect_win: PF_EffectWindowInfo,
    pub item_win: PF_ItemWindowInfo,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PF_EventExtra {
    pub contextH: PF_ContextH,
    pub e_type: PF_EventType,
    pub u: PF_EventUnion,
    pub effect_win: PF_EffectWindowInfo,
    pub cbs: PF_EventCallbacks,
    pub evt_in_flags: PF_EventInFlags,
    pub evt_out_flags: PF_EventOutFlags,
}
pub const PF_UIAlignment_NONE: _bindgen_ty_47 = 0;
pub const PF_UIAlignment_TOP: _bindgen_ty_47 = 1;
pub const PF_UIAlignment_LEFT: _bindgen_ty_47 = 2;
pub const PF_UIAlignment_BOTTOM: _bindgen_ty_47 = 4;
pub const PF_UIAlignment_RIGHT: _bindgen_ty_47 = 8;
pub type _bindgen_ty_47 = ::std::os::raw::c_int;
pub type PF_UIAlignment = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PF_CustomUIInfo {
    pub reserved: A_long,
    pub events: PF_CustomEventFlags,
    pub comp_ui_width: A_long,
    pub comp_ui_height: A_long,
    pub comp_ui_alignment: PF_UIAlignment,
    pub layer_ui_width: A_long,
    pub layer_ui_height: A_long,
    pub layer_ui_alignment: PF_UIAlignment,
    pub preview_ui_width: A_long,
    pub preview_ui_height: A_long,
    pub preview_ui_alignment: PF_UIAlignment,
}
#[repr(C)]
pub struct std_exception__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_exception {
    pub vtable_: *const std_exception__bindgen_vtable,
    pub _Data: __std_exception_data,
}
pub type int32 = i32;
pub type SPBoolean = int32;
pub type SPErr = int32;
#[doc = " @ingroup Suites\nThis suite provides basic memory management for PICA (the Adobe plug-in manager)\nand defines the basic functions for acquiring and releasing other suites.\n\nA suite consists of a list of function pointers. The application, or a\nplug-in that loads a suite, provides valid pointers when the suite is\nacquired. When a suite is not available, the pointers are set to the\naddress of the \\c #Undefined() function.\n\nDo not attempt to acquire a suite (other than the \\c #SPBlocksSuite)\nin response to a PICA access (\\c #kSPAccessCaller) or property\n(\\c #kSPPropertiesCaller) message. Most suites are unavailable\nduring these load and unload operations.\n\nYou can acquire all the suites you will need when your plug-in is first\nloaded, as long as you release them before your plug-in is unloaded.\nAt shutdown, however, it is most efficient to acquire only those\nsuites explicitly needed to shut down; for example, to free memory\nand save preferences.\n\nThe \\c SPBasicSuite itself is a part of the message data passed\nto your plug-in with any call. To access it from the message data structure:\n@code\nSPBasicSuite sBasic = message->d.basic;\nsBasic->function( )\n@endcode"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPBasicSuite {
    #[doc = " Acquires a function suite. Loads the suite if necessary,\nand increments its reference count. For example:\n@code\nSPErr error;\nSPBasicSuite *sBasic = message->d.basic;\nAIRandomSuite *sRandom;\nsBasic->AcquireSuite( kAIRandomSuite, kAIRandomVersion, &sRandom );\n@endcode\n@param name The suite name.\n@param version The suite version number.\n@param suite [out] A buffer in which to return the suite pointer.\n@see \\c #SPSuitesSuite::AcquireSuite()"]
    pub AcquireSuite: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            version: int32,
            suite: *mut *const ::std::os::raw::c_void,
        ) -> SPErr,
    >,
    #[doc = " Decrements the reference count of a suite and unloads it when the\nreference count reaches 0.\n@param name The suite name.\n@param version The suite version number."]
    pub ReleaseSuite: ::std::option::Option<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char, version: int32) -> SPErr,
    >,
    #[doc = " Compares two strings for equality.\n@param token1 The first null-terminated string.\n@param token2 The second null-terminated string.\n@return True if the strings are the same, false otherwise."]
    pub IsEqual: ::std::option::Option<
        unsafe extern "C" fn(
            token1: *const ::std::os::raw::c_char,
            token2: *const ::std::os::raw::c_char,
        ) -> SPBoolean,
    >,
    #[doc = " Allocates a block of memory.\n@param size The number of bytes.\n@param block [out] A buffer in which to return the block pointer.\n@see \\c #SPBlocksSuite::AllocateBlock()"]
    pub AllocateBlock: ::std::option::Option<
        unsafe extern "C" fn(size: usize, block: *mut *mut ::std::os::raw::c_void) -> SPErr,
    >,
    #[doc = " Frees a block of memory allocated with \\c #AllocateBlock().\n@param block The block pointer.\n@see \\c #SPBlocksSuite::FreeBlock()"]
    pub FreeBlock:
        ::std::option::Option<unsafe extern "C" fn(block: *mut ::std::os::raw::c_void) -> SPErr>,
    #[doc = " Reallocates a block previously allocated with \\c #AllocateBlock().\nIncreases the size without changing the location, if possible.\n@param block The block pointer.\n@param newSize The new number of bytes.\n@param newblock [out] A buffer in which to return the new block pointer.\n@see \\c #SPBlocksSuite::ReallocateBlock()"]
    pub ReallocateBlock: ::std::option::Option<
        unsafe extern "C" fn(
            block: *mut ::std::os::raw::c_void,
            newSize: usize,
            newblock: *mut *mut ::std::os::raw::c_void,
        ) -> SPErr,
    >,
    #[doc = " A function pointer for unloaded suites. This is a protective measure\nagainst other plug-ins that may mistakenly use the suite after they have\nreleased it.\n\nA plug-in that exports a suite should unload the suite's procedure pointers\nwhen it is unloaded, and restore them when the plug-in is reloaded.\n\\li On unload, replace the suite's procedure pointers\nwith the address of this function.\n\\li On reload, restore the suite's procedure\npointers with the updated addresses of their functions.\n\nFor example:\n@code\nSPErr UnloadSuite( MySuite *mySuite, SPAccessMessage *message ) {\nmySuite->functionA = (void *) message->d.basic->Undefined;\nmySuite->functionB = (void *) message->d.basic->Undefined;\n}\n\nSPErr ReloadSuite( MySuite *mySuite, SPAccessMessage *message ) {\nmySuite->functionA = functionA;\nmySuite->functionB = functionB;\n}\n@endcode"]
    pub Undefined: ::std::option::Option<unsafe extern "C" fn() -> SPErr>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_AdvAppSuite1 {
    pub PF_SetProjectDirty: ::std::option::Option<unsafe extern "C" fn() -> PF_Err>,
    pub PF_SaveProject: ::std::option::Option<unsafe extern "C" fn() -> PF_Err>,
    pub PF_SaveBackgroundState: ::std::option::Option<unsafe extern "C" fn() -> PF_Err>,
    pub PF_ForceForeground: ::std::option::Option<unsafe extern "C" fn() -> PF_Err>,
    pub PF_RestoreBackgroundState: ::std::option::Option<unsafe extern "C" fn() -> PF_Err>,
    pub PF_RefreshAllWindows: ::std::option::Option<unsafe extern "C" fn() -> PF_Err>,
    pub PF_InfoDrawText: ::std::option::Option<
        unsafe extern "C" fn(line1Z0: *const A_char, line2Z0: *const A_char) -> PF_Err,
    >,
    pub PF_InfoDrawColor: ::std::option::Option<unsafe extern "C" fn(color: PF_Pixel) -> PF_Err>,
    pub PF_InfoDrawText3: ::std::option::Option<
        unsafe extern "C" fn(
            line1Z0: *const A_char,
            line2Z0: *const A_char,
            line3Z0: *const A_char,
        ) -> PF_Err,
    >,
    pub PF_InfoDrawText3Plus: ::std::option::Option<
        unsafe extern "C" fn(
            line1Z0: *const A_char,
            line2_jrZ0: *const A_char,
            line2_jlZ0: *const A_char,
            line3_jrZ0: *const A_char,
            line3_jlZ0: *const A_char,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_AdvAppSuite2 {
    pub PF_SetProjectDirty: ::std::option::Option<unsafe extern "C" fn() -> PF_Err>,
    pub PF_SaveProject: ::std::option::Option<unsafe extern "C" fn() -> PF_Err>,
    pub PF_SaveBackgroundState: ::std::option::Option<unsafe extern "C" fn() -> PF_Err>,
    pub PF_ForceForeground: ::std::option::Option<unsafe extern "C" fn() -> PF_Err>,
    pub PF_RestoreBackgroundState: ::std::option::Option<unsafe extern "C" fn() -> PF_Err>,
    pub PF_RefreshAllWindows: ::std::option::Option<unsafe extern "C" fn() -> PF_Err>,
    pub PF_InfoDrawText: ::std::option::Option<
        unsafe extern "C" fn(line1Z0: *const A_char, line2Z0: *const A_char) -> PF_Err,
    >,
    pub PF_InfoDrawColor: ::std::option::Option<unsafe extern "C" fn(color: PF_Pixel) -> PF_Err>,
    pub PF_InfoDrawText3: ::std::option::Option<
        unsafe extern "C" fn(
            line1Z0: *const A_char,
            line2Z0: *const A_char,
            line3Z0: *const A_char,
        ) -> PF_Err,
    >,
    pub PF_InfoDrawText3Plus: ::std::option::Option<
        unsafe extern "C" fn(
            line1Z0: *const A_char,
            line2_jrZ0: *const A_char,
            line2_jlZ0: *const A_char,
            line3_jrZ0: *const A_char,
            line3_jlZ0: *const A_char,
        ) -> PF_Err,
    >,
    pub PF_AppendInfoText:
        ::std::option::Option<unsafe extern "C" fn(appendZ0: *const A_char) -> PF_Err>,
}
pub const PF_Step_FORWARD: _bindgen_ty_48 = 0;
pub const PF_Step_BACKWARD: _bindgen_ty_48 = 1;
pub type _bindgen_ty_48 = ::std::os::raw::c_int;
pub type PF_Step = A_LegacyEnumType;
pub const PF_TimeDisplayFormatTimecode: _bindgen_ty_49 = 0;
pub const PF_TimeDisplayFormatFrames: _bindgen_ty_49 = 1;
pub const PF_TimeDisplayFormatFeetFrames: _bindgen_ty_49 = 2;
pub type _bindgen_ty_49 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_TimeDisplayPrefVersion3 {
    pub display_mode: A_char,
    pub framemax: A_long,
    pub frames_per_foot: A_long,
    pub frames_start: A_char,
    pub nondrop30B: A_Boolean,
    pub honor_source_timecodeB: A_Boolean,
    pub use_feet_framesB: A_Boolean,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_AdvTimeSuite4 {
    pub PF_FormatTimeActiveItem: ::std::option::Option<
        unsafe extern "C" fn(
            time_valueUL: A_long,
            time_scaleL: A_u_long,
            durationB: PF_Boolean,
            time_buf: *mut A_char,
        ) -> PF_Err,
    >,
    pub PF_FormatTime: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            world: *mut PF_EffectWorld,
            time_valueUL: A_long,
            time_scaleL: A_u_long,
            durationB: PF_Boolean,
            time_buf: *mut A_char,
        ) -> PF_Err,
    >,
    pub PF_FormatTimePlus: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            world: *mut PF_EffectWorld,
            time_valueUL: A_long,
            time_scaleL: A_u_long,
            comp_timeB: PF_Boolean,
            durationB: PF_Boolean,
            time_buf: *mut A_char,
        ) -> PF_Err,
    >,
    pub PF_GetTimeDisplayPref: ::std::option::Option<
        unsafe extern "C" fn(
            tdp: *mut PF_TimeDisplayPrefVersion3,
            starting_frame_num: *mut A_long,
        ) -> PF_Err,
    >,
    pub PF_TimeCountFrames: ::std::option::Option<
        unsafe extern "C" fn(
            start_timeTP: *const A_Time,
            time_stepTP: *const A_Time,
            include_partial_frameB: A_Boolean,
            frame_countL: *mut A_long,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_AdvTimeSuite3 {
    pub PF_FormatTimeActiveItem: ::std::option::Option<
        unsafe extern "C" fn(
            time_valueUL: A_long,
            time_scaleL: A_u_long,
            durationB: PF_Boolean,
            time_buf: *mut A_char,
        ) -> PF_Err,
    >,
    pub PF_FormatTime: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            world: *mut PF_EffectWorld,
            time_valueUL: A_long,
            time_scaleL: A_u_long,
            durationB: PF_Boolean,
            time_buf: *mut A_char,
        ) -> PF_Err,
    >,
    pub PF_FormatTimePlus: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            world: *mut PF_EffectWorld,
            time_valueUL: A_long,
            time_scaleL: A_u_long,
            comp_timeB: PF_Boolean,
            durationB: PF_Boolean,
            time_buf: *mut A_char,
        ) -> PF_Err,
    >,
    pub PF_GetTimeDisplayPref: ::std::option::Option<
        unsafe extern "C" fn(
            tdp: *mut PF_TimeDisplayPrefVersion3,
            starting_frame_num: *mut A_long,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_TimeDisplayPrefVersion2 {
    pub display_mode: A_char,
    pub framemax: A_char,
    pub frames_per_foot: A_char,
    pub frames_start: A_char,
    pub nondrop30B: A_Boolean,
    pub honor_source_timecodeB: A_Boolean,
    pub use_feet_framesB: A_Boolean,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_AdvTimeSuite2 {
    pub PF_FormatTimeActiveItem: ::std::option::Option<
        unsafe extern "C" fn(
            time_valueUL: A_long,
            time_scaleL: A_u_long,
            durationB: PF_Boolean,
            time_buf: *mut A_char,
        ) -> PF_Err,
    >,
    pub PF_FormatTime: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            world: *mut PF_EffectWorld,
            time_valueUL: A_long,
            time_scaleL: A_u_long,
            durationB: PF_Boolean,
            time_buf: *mut A_char,
        ) -> PF_Err,
    >,
    pub PF_FormatTimePlus: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            world: *mut PF_EffectWorld,
            time_valueUL: A_long,
            time_scaleL: A_u_long,
            comp_timeB: PF_Boolean,
            durationB: PF_Boolean,
            time_buf: *mut A_char,
        ) -> PF_Err,
    >,
    pub PF_GetTimeDisplayPref: ::std::option::Option<
        unsafe extern "C" fn(
            tdp: *mut PF_TimeDisplayPrefVersion2,
            starting_frame_num: *mut A_long,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_TimeDisplayPref {
    pub time_display_format: A_char,
    pub framemax: A_char,
    pub nondrop30: A_char,
    pub frames_per_foot: A_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_AdvTimeSuite1 {
    pub PF_FormatTimeActiveItem: ::std::option::Option<
        unsafe extern "C" fn(
            time_valueUL: A_long,
            time_scaleL: A_u_long,
            durationB: PF_Boolean,
            time_buf: *mut A_char,
        ) -> PF_Err,
    >,
    pub PF_FormatTime: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            world: *mut PF_EffectWorld,
            time_valueUL: A_long,
            time_scaleL: A_u_long,
            durationB: PF_Boolean,
            time_buf: *mut A_char,
        ) -> PF_Err,
    >,
    pub PF_FormatTimePlus: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            world: *mut PF_EffectWorld,
            time_valueUL: A_long,
            time_scaleL: A_u_long,
            comp_timeB: PF_Boolean,
            durationB: PF_Boolean,
            time_buf: *mut A_char,
        ) -> PF_Err,
    >,
    pub PF_GetTimeDisplayPref: ::std::option::Option<
        unsafe extern "C" fn(
            tdp: *mut PF_TimeDisplayPref,
            starting_frame_num: *mut A_long,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_AdvItemSuite1 {
    pub PF_MoveTimeStep: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            world: *mut PF_EffectWorld,
            time_dir: PF_Step,
            num_stepsL: A_long,
        ) -> PF_Err,
    >,
    pub PF_MoveTimeStepActiveItem: ::std::option::Option<
        unsafe extern "C" fn(time_dir: PF_Step, num_stepsL: A_long) -> PF_Err,
    >,
    pub PF_TouchActiveItem: ::std::option::Option<unsafe extern "C" fn() -> PF_Err>,
    pub PF_ForceRerender: ::std::option::Option<
        unsafe extern "C" fn(in_data: *mut PF_InData, world: *mut PF_EffectWorld) -> PF_Err,
    >,
    pub PF_EffectIsActiveOrEnabled: ::std::option::Option<
        unsafe extern "C" fn(contextH: PF_ContextH, enabledPB: *mut PF_Boolean) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_CacheOnLoadSuite1 {
    pub PF_SetNoCacheOnLoad: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            effectAvailable: ::std::os::raw::c_long,
        ) -> PF_Err,
    >,
}
#[doc = " the suite functions"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ChannelSuite1 {
    pub PF_GetLayerChannelCount: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            param_index: PF_ParamIndex,
            num_channelsPL: *mut A_long,
        ) -> PF_Err,
    >,
    pub PF_GetLayerChannelIndexedRefAndDesc: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            param_index: PF_ParamIndex,
            channel_index: PF_ChannelIndex,
            foundPB: *mut PF_Boolean,
            channel_refP: *mut PF_ChannelRef,
            channel_descP: *mut PF_ChannelDesc,
        ) -> PF_Err,
    >,
    pub PF_GetLayerChannelTypedRefAndDesc: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            param_index: PF_ParamIndex,
            channel_type: PF_ChannelType,
            foundPB: *mut PF_Boolean,
            channel_refP: *mut PF_ChannelRef,
            channel_descP: *mut PF_ChannelDesc,
        ) -> PF_Err,
    >,
    pub PF_CheckoutLayerChannel: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            channel_refP: PF_ChannelRefPtr,
            what_time: A_long,
            duration: A_long,
            time_scale: A_u_long,
            data_type: PF_DataType,
            channel_chunkP: *mut PF_ChannelChunk,
        ) -> PF_Err,
    >,
    pub PF_CheckinLayerChannel: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            channel_refP: PF_ChannelRefPtr,
            channel_chunkP: *mut PF_ChannelChunk,
        ) -> PF_Err,
    >,
}
pub type PF_KernelFlags = A_u_long;
pub const PF_SampleEdgeBehav_ZERO: _bindgen_ty_50 = 0;
#[doc = " ---------- PF_SampleEdgeBehav ----------\n\nThe sampling routines always deal with 32 bit images, and thus\nneed to compute properly alpha-weighted samples. An issue arises\nwhen an attempt is made to sample outside of the image content area.\n\nBefore PF_PLUG_IN_VERSION 2, After Effects always treated pixels\noutside of the image content area as having alpha = 0, which is desirable\nin many cases. Distortions and other effects may want different sampling\nbehaviors, however, hence the PF_SampleEdgeBehav.\n"]
pub type _bindgen_ty_50 = ::std::os::raw::c_int;
pub type PF_SampleEdgeBehav = A_u_long;
pub const PF_Xfer_NONE: _bindgen_ty_51 = -1;
pub const PF_Xfer_COPY: _bindgen_ty_51 = 0;
pub const PF_Xfer_BEHIND: _bindgen_ty_51 = 1;
pub const PF_Xfer_IN_FRONT: _bindgen_ty_51 = 2;
pub const PF_Xfer_DISSOLVE: _bindgen_ty_51 = 3;
pub const PF_Xfer_ADD: _bindgen_ty_51 = 4;
pub const PF_Xfer_MULTIPLY: _bindgen_ty_51 = 5;
pub const PF_Xfer_SCREEN: _bindgen_ty_51 = 6;
pub const PF_Xfer_OVERLAY: _bindgen_ty_51 = 7;
pub const PF_Xfer_SOFT_LIGHT: _bindgen_ty_51 = 8;
pub const PF_Xfer_HARD_LIGHT: _bindgen_ty_51 = 9;
pub const PF_Xfer_DARKEN: _bindgen_ty_51 = 10;
pub const PF_Xfer_LIGHTEN: _bindgen_ty_51 = 11;
pub const PF_Xfer_DIFFERENCE: _bindgen_ty_51 = 12;
pub const PF_Xfer_HUE: _bindgen_ty_51 = 13;
pub const PF_Xfer_SATURATION: _bindgen_ty_51 = 14;
pub const PF_Xfer_COLOR: _bindgen_ty_51 = 15;
pub const PF_Xfer_LUMINOSITY: _bindgen_ty_51 = 16;
pub const PF_Xfer_MULTIPLY_ALPHA: _bindgen_ty_51 = 17;
pub const PF_Xfer_MULTIPLY_ALPHA_LUMA: _bindgen_ty_51 = 18;
pub const PF_Xfer_MULTIPLY_NOT_ALPHA: _bindgen_ty_51 = 19;
pub const PF_Xfer_MULTIPLY_NOT_ALPHA_LUMA: _bindgen_ty_51 = 20;
pub const PF_Xfer_ADDITIVE_PREMUL: _bindgen_ty_51 = 21;
pub const PF_Xfer_ALPHA_ADD: _bindgen_ty_51 = 22;
pub const PF_Xfer_COLOR_DODGE: _bindgen_ty_51 = 23;
pub const PF_Xfer_COLOR_BURN: _bindgen_ty_51 = 24;
pub const PF_Xfer_EXCLUSION: _bindgen_ty_51 = 25;
pub const PF_Xfer_DIFFERENCE2: _bindgen_ty_51 = 26;
pub const PF_Xfer_COLOR_DODGE2: _bindgen_ty_51 = 27;
pub const PF_Xfer_COLOR_BURN2: _bindgen_ty_51 = 28;
pub const PF_Xfer_LINEAR_DODGE: _bindgen_ty_51 = 29;
pub const PF_Xfer_LINEAR_BURN: _bindgen_ty_51 = 30;
pub const PF_Xfer_LINEAR_LIGHT: _bindgen_ty_51 = 31;
pub const PF_Xfer_VIVID_LIGHT: _bindgen_ty_51 = 32;
pub const PF_Xfer_PIN_LIGHT: _bindgen_ty_51 = 33;
pub const PF_Xfer_HARD_MIX: _bindgen_ty_51 = 34;
pub const PF_Xfer_LIGHTER_COLOR: _bindgen_ty_51 = 35;
pub const PF_Xfer_DARKER_COLOR: _bindgen_ty_51 = 36;
pub const PF_Xfer_SUBTRACT: _bindgen_ty_51 = 37;
pub const PF_Xfer_DIVIDE: _bindgen_ty_51 = 38;
pub const PF_Xfer_RESERVED0: _bindgen_ty_51 = 39;
pub const PF_Xfer_RESERVED1: _bindgen_ty_51 = 40;
pub const PF_Xfer_NUM_MODES: _bindgen_ty_51 = 41;
pub type _bindgen_ty_51 = ::std::os::raw::c_int;
pub const PF_Xfer_TINT: _bindgen_ty_52 = 29;
pub const PF_Xfer_SHADE: _bindgen_ty_52 = 30;
pub const PF_Xfer_INTENSE_LIGHT: _bindgen_ty_52 = 32;
pub type _bindgen_ty_52 = ::std::os::raw::c_int;
pub const PF_MaskFlag_NONE: _bindgen_ty_53 = 0;
pub const PF_MaskFlag_INVERTED: _bindgen_ty_53 = 1;
pub const PF_MaskFlag_LUMINANCE: _bindgen_ty_53 = 2;
pub type _bindgen_ty_53 = ::std::os::raw::c_int;
pub type PF_MaskFlags = A_long;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PF_MaskWorld {
    pub mask: PF_EffectWorld,
    pub offset: PF_Point,
    pub what_is_mask: PF_MaskFlags,
}
#[doc = " ---------- PF_SampPB ----------\n\nThere are calls to sample an a non-integral point in an image,\nand to sample an area of an image.  This parameter block describes\nsome information needed for these image resampling routines."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_SampPB {
    pub x_radius: PF_Fixed,
    pub y_radius: PF_Fixed,
    pub area: PF_Fixed,
    pub src: *mut PF_EffectWorld,
    pub samp_behave: PF_SampleEdgeBehav,
    pub allow_asynch: A_long,
    pub motion_blur: A_long,
    pub comp_mode: PF_CompositeMode,
    pub mask0: PF_PixelPtr,
    pub fcm_table: *mut A_u_char,
    pub fcd_table: *mut A_u_char,
    pub reserved: [A_long; 8usize],
}
pub const PF_Callback_NONE: _bindgen_ty_54 = 0;
pub const PF_Callback_BEGIN_SAMPLING: _bindgen_ty_54 = 1;
pub const PF_Callback_SUBPIXEL_SAMPLE: _bindgen_ty_54 = 2;
pub const PF_Callback_AREA_SAMPLE: _bindgen_ty_54 = 3;
pub const PF_Callback_OBSOLETE0: _bindgen_ty_54 = 4;
pub const PF_Callback_END_SAMPLING: _bindgen_ty_54 = 5;
pub const PF_Callback_COMPOSITE_RECT: _bindgen_ty_54 = 6;
pub const PF_Callback_BLEND: _bindgen_ty_54 = 7;
pub const PF_Callback_CONVOLVE: _bindgen_ty_54 = 8;
pub const PF_Callback_COPY: _bindgen_ty_54 = 9;
pub const PF_Callback_FILL: _bindgen_ty_54 = 10;
pub const PF_Callback_GAUSSIAN: _bindgen_ty_54 = 11;
pub const PF_Callback_ITERATE: _bindgen_ty_54 = 12;
pub const PF_Callback_PREMUL: _bindgen_ty_54 = 13;
pub const PF_Callback_PREMUL_COLOR: _bindgen_ty_54 = 14;
pub const PF_Callback_RGB_TO_HLS: _bindgen_ty_54 = 15;
pub const PF_Callback_HLS_TO_RGB: _bindgen_ty_54 = 16;
pub const PF_Callback_RGB_TO_YIQ: _bindgen_ty_54 = 17;
pub const PF_Callback_YIQ_TO_RGB: _bindgen_ty_54 = 18;
pub const PF_Callback_LUMINANCE: _bindgen_ty_54 = 19;
pub const PF_Callback_HUE: _bindgen_ty_54 = 20;
pub const PF_Callback_LIGHTNESS: _bindgen_ty_54 = 21;
pub const PF_Callback_SATURATION: _bindgen_ty_54 = 22;
pub const PF_Callback_NEW_WORLD: _bindgen_ty_54 = 23;
pub const PF_Callback_DISPOSE_WORLD: _bindgen_ty_54 = 24;
pub const PF_Callback_ITERATE_ORIGIN: _bindgen_ty_54 = 25;
pub const PF_Callback_ITERATE_LUT: _bindgen_ty_54 = 26;
pub const PF_Callback_TRANSFER_RECT: _bindgen_ty_54 = 27;
pub const PF_Callback_TRANSFORM_WORLD: _bindgen_ty_54 = 28;
pub const PF_Callback_ITERATE_ORIGIN_NON_CLIP_SRC: _bindgen_ty_54 = 29;
pub const PF_Callback_ITERATE_GENERIC: _bindgen_ty_54 = 30;
pub const PF_Callback_SUBPIXEL_SAMPLE16: _bindgen_ty_54 = 31;
pub const PF_Callback_AREA_SAMPLE16: _bindgen_ty_54 = 32;
pub const PF_Callback_FILL16: _bindgen_ty_54 = 33;
pub const PF_Callback_PREMUL_COLOR16: _bindgen_ty_54 = 34;
pub const PF_Callback_ITERATE16: _bindgen_ty_54 = 35;
pub const PF_Callback_ITERATE_ORIGIN16: _bindgen_ty_54 = 36;
pub const PF_Callback_ITERATE_ORIGIN_NON_CLIP_SRC16: _bindgen_ty_54 = 37;
pub const PF_Callback_ITERATE_GENERIC_NO_MAX_THREADS: _bindgen_ty_54 = 38;
pub const PF_Callback_ITERATE_NO_MAX_THREADS: _bindgen_ty_54 = 39;
pub const PF_Callback_ITERATE_ORIGIN_NO_MAX_THREADS: _bindgen_ty_54 = 40;
pub const PF_Callback_ITERATE_ORIGIN_NON_CLIP_SRC_NO_MAX_THREADS: _bindgen_ty_54 = 41;
pub const PF_Callback_ITERATE16_NO_MAX_THREADS: _bindgen_ty_54 = 42;
pub const PF_Callback_ITERATE_ORIGIN16_NO_MAX_THREADS: _bindgen_ty_54 = 43;
pub const PF_Callback_ITERATE_ORIGIN_NON_CLIP_SRC16_NO_MAX_THREADS: _bindgen_ty_54 = 44;
#[doc = " ---------- Callback Selectors ----------\n\nSome callbacks have different high and low quality versions.\nThe parameter block of function pointers will automatically\nbe filled with the appropriate versions for the current quality\nsetting, but some filters may wish to override this and access\na callback of different quality.  To do this, a get_callback_addr\ncallback is provided which will take a callback selector and a\ndesired quality and return the callback of that quality.  The\nselectors for the various callbacks are listed here.  Also, a\ntypedef for the function pointer that will be returned is given."]
pub type _bindgen_ty_54 = ::std::os::raw::c_int;
pub type PF_CallbackID = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_YouMustCastThisToActualFunctionType {
    _unused: [u8; 0],
}
#[doc = "Previous versions of PF_CallbackFunc were defined using varargs in attempt to enforce\nthe effect_ref passed as the first argument to all callbacks. The actual host\nimplementations are generally *not* varargs, and on some platforms the calling\nconventions between normal C ABI and C varargs ABI are not compatible. If your\ncode is trying to call through a PF_CallbackFunc it is unsafe; with this definition\nit will now no longer compile. To fix, cast to the proper API signature before\ncalling. Or better, use the extensive Suite implementations which are explicitly typed"]
pub type PF_CallbackFunc = *mut PF_YouMustCastThisToActualFunctionType;
pub const PF_PlatData_MAIN_WND: _bindgen_ty_55 = 0;
pub const PF_PlatData_EXE_FILE_PATH_DEPRECATED: _bindgen_ty_55 = 1;
pub const PF_PlatData_RES_FILE_PATH_DEPRECATED: _bindgen_ty_55 = 2;
pub const PF_PlatData_RES_REFNUM: _bindgen_ty_55 = 3;
pub const PF_PlatData_RES_DLLINSTANCE: _bindgen_ty_55 = 4;
pub const PF_PlatData_SP_PLUG_REF: _bindgen_ty_55 = 5;
pub const PF_PlatData_BUNDLE_REF: _bindgen_ty_55 = 6;
pub const PF_PlatData_EXE_FILE_PATH_W: _bindgen_ty_55 = 7;
pub const PF_PlatData_RES_FILE_PATH_W: _bindgen_ty_55 = 8;
pub type _bindgen_ty_55 = ::std::os::raw::c_int;
pub type PF_PlatDataID = A_long;
pub const PF_Plane_ALPHA: _bindgen_ty_56 = 1;
pub const PF_Plane_RED: _bindgen_ty_56 = 2;
pub const PF_Plane_GREEN: _bindgen_ty_56 = 4;
pub const PF_Plane_BLUE: _bindgen_ty_56 = 8;
#[doc = " ---------- Image Plane Selectors ----------\n\nThese constants can be used to specify a subset\nof the planes of the 32-bit image."]
pub type _bindgen_ty_56 = ::std::os::raw::c_int;
pub type PF_Plane = A_u_long;
#[doc = " ---------- ANSI Routines Block ----------\n\nWithin the callback routines block there is a block of ANSI\nroutines, so that the filter will not need to link with the\nANSI library.  The following structure describes that block\nand is included in the larger Callback Routines block below.\n\nAll angles are expressed in radians; use PF_RAD_PER_DEGREE\nto convert from degrees to radians, if necessary.  Be aware\nthat angle parameter types use degrees (in fixed point).\n\nSprintf and strcpy are provided to facilitate string usage,\nsuch as printing for names and supervised controls.\n\nNone of these callbacks vary based on the Quality setting."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ANSICallbacks {
    pub atan: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub atan2: ::std::option::Option<unsafe extern "C" fn(y: A_FpLong, x: A_FpLong) -> A_FpLong>,
    pub ceil: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub cos: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub exp: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub fabs: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub floor: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub fmod: ::std::option::Option<unsafe extern "C" fn(x: A_FpLong, y: A_FpLong) -> A_FpLong>,
    pub hypot: ::std::option::Option<unsafe extern "C" fn(x: A_FpLong, y: A_FpLong) -> A_FpLong>,
    pub log: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub log10: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub pow: ::std::option::Option<unsafe extern "C" fn(x: A_FpLong, y: A_FpLong) -> A_FpLong>,
    pub sin: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub sqrt: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub tan: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub sprintf: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut A_char, arg2: *const A_char, ...) -> ::std::os::raw::c_int,
    >,
    pub strcpy: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut A_char, arg2: *const A_char) -> *mut A_char,
    >,
    pub asin: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub acos: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub ansi_procs: [A_long; 1usize],
}
#[doc = " ---------- Colorspace Conversion Callbacks\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ColorCallbacks {
    pub RGBtoHLS: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_Pixel,
            hls: *mut PF_Fixed,
        ) -> PF_Err,
    >,
    pub HLStoRGB: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            hls: *mut PF_Fixed,
            rgb: *mut PF_Pixel,
        ) -> PF_Err,
    >,
    pub RGBtoYIQ: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_Pixel,
            yiq: *mut PF_Fixed,
        ) -> PF_Err,
    >,
    pub YIQtoRGB: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            yiq: *mut PF_Fixed,
            rgb: *mut PF_Pixel,
        ) -> PF_Err,
    >,
    pub Luminance: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_Pixel,
            lum100: *mut A_long,
        ) -> PF_Err,
    >,
    pub Hue: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_Pixel,
            hue: *mut A_long,
        ) -> PF_Err,
    >,
    pub Lightness: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_Pixel,
            lightness: *mut A_long,
        ) -> PF_Err,
    >,
    pub Saturation: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_Pixel,
            saturation: *mut A_long,
        ) -> PF_Err,
    >,
}
pub type PF_BatchSampleFunc = *mut ::std::os::raw::c_void;
pub type PF_BatchSample16Func = *mut ::std::os::raw::c_void;
pub const PF_NewWorldFlag_NONE: _bindgen_ty_57 = 0;
pub const PF_NewWorldFlag_CLEAR_PIXELS: _bindgen_ty_57 = 1;
pub const PF_NewWorldFlag_DEEP_PIXELS: _bindgen_ty_57 = 2;
pub const PF_NewWorldFlag_RESERVED0: _bindgen_ty_57 = 4;
pub const PF_NewWorldFlag_RESERVED1: _bindgen_ty_57 = 8;
pub type _bindgen_ty_57 = ::std::os::raw::c_int;
pub type PF_NewWorldFlags = A_long;
#[doc = "prototypes for PF_ITERATE8 and PF_ITERATE16 pixel functions\n\nthe user of PF_ITERATE provides a refcon; After Effects may distribute iteration\nacross multiple threads, so any data pointed to by refconL should be read-only or\nproperly synchronized\n\ninP is writable only if the world you pass to PF_ITERATE() is PF_WorldFlag_WRITEABLE\n\n"]
pub type PF_IteratePixel8Func = ::std::option::Option<
    unsafe extern "C" fn(
        refconP: *mut ::std::os::raw::c_void,
        xL: A_long,
        yL: A_long,
        inP: *mut PF_Pixel,
        outP: *mut PF_Pixel,
    ) -> PF_Err,
>;
pub type PF_IteratePixel16Func = ::std::option::Option<
    unsafe extern "C" fn(
        refconP: *mut ::std::os::raw::c_void,
        xL: A_long,
        yL: A_long,
        inP: *mut PF_Pixel16,
        outP: *mut PF_Pixel16,
    ) -> PF_Err,
>;
pub type PF_IteratePixelFloatFunc = ::std::option::Option<
    unsafe extern "C" fn(
        refconP: *mut ::std::os::raw::c_void,
        xL: A_long,
        yL: A_long,
        inP: *mut PF_PixelFloat,
        outP: *mut PF_PixelFloat,
    ) -> PF_Err,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PF_UtilCallbacks {
    pub begin_sampling: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            qual: PF_Quality,
            mf: PF_ModeFlags,
            params: *mut PF_SampPB,
        ) -> PF_Err,
    >,
    pub subpixel_sample: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            x: PF_Fixed,
            y: PF_Fixed,
            params: *const PF_SampPB,
            dst_pixel: *mut PF_Pixel,
        ) -> PF_Err,
    >,
    pub area_sample: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            x: PF_Fixed,
            y: PF_Fixed,
            params: *const PF_SampPB,
            dst_pixel: *mut PF_Pixel,
        ) -> PF_Err,
    >,
    pub get_batch_func_is_deprecated: *mut ::std::os::raw::c_void,
    pub end_sampling: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            qual: PF_Quality,
            mf: PF_ModeFlags,
            params: *mut PF_SampPB,
        ) -> PF_Err,
    >,
    pub composite_rect: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            src_rect: *mut PF_Rect,
            src_opacity: A_long,
            source_wld: *mut PF_EffectWorld,
            dest_x: A_long,
            dest_y: A_long,
            field_rdr: PF_Field,
            xfer_mode: PF_XferMode,
            dest_wld: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub blend: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            src1: *const PF_EffectWorld,
            src2: *const PF_EffectWorld,
            ratio: PF_Fixed,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub convolve: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            flags: PF_KernelFlags,
            kernel_size: A_long,
            a_kernel: *mut ::std::os::raw::c_void,
            r_kernel: *mut ::std::os::raw::c_void,
            g_kernel: *mut ::std::os::raw::c_void,
            b_kernel: *mut ::std::os::raw::c_void,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            src: *mut PF_EffectWorld,
            dst: *mut PF_EffectWorld,
            src_r: *mut PF_Rect,
            dst_r: *mut PF_Rect,
        ) -> PF_Err,
    >,
    pub fill: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            color: *const PF_Pixel,
            dst_rect: *const PF_Rect,
            world: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub gaussian_kernel: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            kRadius: A_FpLong,
            flags: PF_KernelFlags,
            multiplier: A_FpLong,
            diameter: *mut A_long,
            kernel: *mut ::std::os::raw::c_void,
        ) -> PF_Err,
    >,
    pub iterate: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: PF_IteratePixel8Func,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub premultiply: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            forward: A_long,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub premultiply_color: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            src: *mut PF_EffectWorld,
            color: *const PF_Pixel,
            forward: A_long,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub new_world: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            width: A_long,
            height: A_long,
            flags: PF_NewWorldFlags,
            world: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub dispose_world: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, world: *mut PF_EffectWorld) -> PF_Err,
    >,
    pub iterate_origin: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            origin: *const PF_Point,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: PF_IteratePixel8Func,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub iterate_lut: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            a_lut0: *mut A_u_char,
            r_lut0: *mut A_u_char,
            g_lut0: *mut A_u_char,
            b_lut0: *mut A_u_char,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub transfer_rect: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            quality: PF_Quality,
            m_flags: PF_ModeFlags,
            field: PF_Field,
            src_rec: *const PF_Rect,
            src_world: *const PF_EffectWorld,
            comp_mode: *const PF_CompositeMode,
            mask_world0: *const PF_MaskWorld,
            dest_x: A_long,
            dest_y: A_long,
            dst_world: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub transform_world: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            quality: PF_Quality,
            m_flags: PF_ModeFlags,
            field: PF_Field,
            src_world: *const PF_EffectWorld,
            comp_mode: *const PF_CompositeMode,
            mask_world0: *const PF_MaskWorld,
            matrices: *const PF_FloatMatrix,
            num_matrices: A_long,
            src2dst_matrix: PF_Boolean,
            dest_rect: *const PF_Rect,
            dst_world: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub host_new_handle:
        ::std::option::Option<unsafe extern "C" fn(size: A_u_longlong) -> PF_Handle>,
    pub host_lock_handle: ::std::option::Option<
        unsafe extern "C" fn(pf_handle: PF_Handle) -> *mut ::std::os::raw::c_void,
    >,
    pub host_unlock_handle: ::std::option::Option<unsafe extern "C" fn(pf_handle: PF_Handle)>,
    pub host_dispose_handle: ::std::option::Option<unsafe extern "C" fn(pf_handle: PF_Handle)>,
    pub get_callback_addr: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            quality: PF_Quality,
            mode_flags: PF_ModeFlags,
            which_callback: PF_CallbackID,
            fn_ptr: *mut PF_CallbackFunc,
        ) -> PF_Err,
    >,
    pub app:
        ::std::option::Option<unsafe extern "C" fn(arg1: PF_ProgPtr, arg2: A_long, ...) -> PF_Err>,
    pub ansi: PF_ANSICallbacks,
    pub colorCB: PF_ColorCallbacks,
    pub get_platform_data: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            which: PF_PlatDataID,
            data: *mut ::std::os::raw::c_void,
        ) -> PF_Err,
    >,
    pub host_get_handle_size:
        ::std::option::Option<unsafe extern "C" fn(pf_handle: PF_Handle) -> A_u_longlong>,
    pub iterate_origin_non_clip_src: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            origin: *const PF_Point,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: PF_IteratePixel8Func,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub iterate_generic: ::std::option::Option<
        unsafe extern "C" fn(
            iterationsL: A_long,
            refconPV: *mut ::std::os::raw::c_void,
            fn_func: ::std::option::Option<
                unsafe extern "C" fn(
                    refconPV: *mut ::std::os::raw::c_void,
                    thread_indexL: A_long,
                    i: A_long,
                    iterationsL: A_long,
                ) -> PF_Err,
            >,
        ) -> PF_Err,
    >,
    pub host_resize_handle: ::std::option::Option<
        unsafe extern "C" fn(new_sizeL: A_u_longlong, handlePH: *mut PF_Handle) -> PF_Err,
    >,
    pub subpixel_sample16: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            x: PF_Fixed,
            y: PF_Fixed,
            params: *const PF_SampPB,
            dst_pixel: *mut PF_Pixel16,
        ) -> PF_Err,
    >,
    pub area_sample16: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            x: PF_Fixed,
            y: PF_Fixed,
            params: *const PF_SampPB,
            dst_pixel: *mut PF_Pixel16,
        ) -> PF_Err,
    >,
    pub fill16: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            color: *const PF_Pixel16,
            dst_rect: *const PF_Rect,
            world: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub premultiply_color16: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            src: *mut PF_EffectWorld,
            color: *const PF_Pixel16,
            forward: A_long,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub iterate16: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: PF_IteratePixel16Func,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub iterate_origin16: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            origin: *const PF_Point,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: PF_IteratePixel16Func,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub iterate_origin_non_clip_src16: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            origin: *const PF_Point,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: PF_IteratePixel16Func,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub get_pixel_data8: ::std::option::Option<
        unsafe extern "C" fn(
            worldP: *mut PF_EffectWorld,
            pixelsP0: PF_PixelPtr,
            pixPP: *mut *mut PF_Pixel8,
        ) -> PF_Err,
    >,
    pub get_pixel_data16: ::std::option::Option<
        unsafe extern "C" fn(
            worldP: *mut PF_EffectWorld,
            pixelsP0: PF_PixelPtr,
            pixPP: *mut *mut PF_Pixel16,
        ) -> PF_Err,
    >,
    pub reserved: [A_long; 1usize],
}
pub type PF_UtilCallbacks = _PF_UtilCallbacks;
pub const PF_PixelFormat_ARGB32: _bindgen_ty_58 = 1650946657;
pub const PF_PixelFormat_ARGB64: _bindgen_ty_58 = 909206881;
pub const PF_PixelFormat_ARGB128: _bindgen_ty_58 = 842229089;
pub const PF_PixelFormat_GPU_BGRA128: _bindgen_ty_58 = 1094992704;
pub const PF_PixelFormat_RESERVED: _bindgen_ty_58 = 1631863616;
pub const PF_PixelFormat_BGRA32: _bindgen_ty_58 = 1634887522;
pub const PF_PixelFormat_VUYA32: _bindgen_ty_58 = 1635349878;
pub const PF_PixelFormat_NTSCDV25: _bindgen_ty_58 = 846100068;
pub const PF_PixelFormat_PALDV25: _bindgen_ty_58 = 846231140;
pub const PF_PixelFormat_INVALID: _bindgen_ty_58 = 1717854562;
pub const PF_PixelFormat_FORCE_LONG_INT: _bindgen_ty_58 = -1;
pub type _bindgen_ty_58 = ::std::os::raw::c_int;
pub type PF_PixelFormat = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_HandleSuite1 {
    pub host_new_handle:
        ::std::option::Option<unsafe extern "C" fn(size: A_HandleSize) -> PF_Handle>,
    pub host_lock_handle: ::std::option::Option<
        unsafe extern "C" fn(pf_handle: PF_Handle) -> *mut ::std::os::raw::c_void,
    >,
    pub host_unlock_handle: ::std::option::Option<unsafe extern "C" fn(pf_handle: PF_Handle)>,
    pub host_dispose_handle: ::std::option::Option<unsafe extern "C" fn(pf_handle: PF_Handle)>,
    pub host_get_handle_size:
        ::std::option::Option<unsafe extern "C" fn(pf_handle: PF_Handle) -> A_HandleSize>,
    pub host_resize_handle: ::std::option::Option<
        unsafe extern "C" fn(new_sizeL: A_HandleSize, handlePH: *mut PF_Handle) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ANSICallbacksSuite1 {
    pub atan: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub atan2: ::std::option::Option<unsafe extern "C" fn(y: A_FpLong, x: A_FpLong) -> A_FpLong>,
    pub ceil: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub cos: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub exp: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub fabs: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub floor: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub fmod: ::std::option::Option<unsafe extern "C" fn(x: A_FpLong, y: A_FpLong) -> A_FpLong>,
    pub hypot: ::std::option::Option<unsafe extern "C" fn(x: A_FpLong, y: A_FpLong) -> A_FpLong>,
    pub log: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub log10: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub pow: ::std::option::Option<unsafe extern "C" fn(x: A_FpLong, y: A_FpLong) -> A_FpLong>,
    pub sin: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub sqrt: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub tan: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub sprintf: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut A_char, arg2: *const A_char, ...) -> ::std::os::raw::c_int,
    >,
    pub strcpy: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut A_char, arg2: *const A_char) -> *mut A_char,
    >,
    pub asin: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
    pub acos: ::std::option::Option<unsafe extern "C" fn(arg1: A_FpLong) -> A_FpLong>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_PixelDataSuite1 {
    pub get_pixel_data8: ::std::option::Option<
        unsafe extern "C" fn(
            worldP: *mut PF_EffectWorld,
            pixelsP0: PF_PixelPtr,
            pixPP: *mut *mut PF_Pixel8,
        ) -> PF_Err,
    >,
    pub get_pixel_data16: ::std::option::Option<
        unsafe extern "C" fn(
            worldP: *mut PF_EffectWorld,
            pixelsP0: PF_PixelPtr,
            pixPP: *mut *mut PF_Pixel16,
        ) -> PF_Err,
    >,
    pub get_pixel_data_float: ::std::option::Option<
        unsafe extern "C" fn(
            worldP: *mut PF_EffectWorld,
            pixelsP0: PF_PixelPtr,
            pixPP: *mut *mut PF_PixelFloat,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_PixelDataSuite2 {
    pub get_pixel_data8: ::std::option::Option<
        unsafe extern "C" fn(
            worldP: *mut PF_EffectWorld,
            pixelsP0: PF_PixelPtr,
            pixPP: *mut *mut PF_Pixel8,
        ) -> PF_Err,
    >,
    pub get_pixel_data16: ::std::option::Option<
        unsafe extern "C" fn(
            worldP: *mut PF_EffectWorld,
            pixelsP0: PF_PixelPtr,
            pixPP: *mut *mut PF_Pixel16,
        ) -> PF_Err,
    >,
    pub get_pixel_data_float: ::std::option::Option<
        unsafe extern "C" fn(
            worldP: *mut PF_EffectWorld,
            pixelsP0: PF_PixelPtr,
            pixPP: *mut *mut PF_PixelFloat,
        ) -> PF_Err,
    >,
    pub get_pixel_data_float_gpu: ::std::option::Option<
        unsafe extern "C" fn(
            worldP: *mut PF_EffectWorld,
            pixPP: *mut *mut ::std::os::raw::c_void,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ColorCallbacksSuite1 {
    pub RGBtoHLS: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_Pixel,
            hls: *mut PF_Fixed,
        ) -> PF_Err,
    >,
    pub HLStoRGB: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            hls: *mut PF_Fixed,
            rgb: *mut PF_Pixel,
        ) -> PF_Err,
    >,
    pub RGBtoYIQ: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_Pixel,
            yiq: *mut PF_Fixed,
        ) -> PF_Err,
    >,
    pub YIQtoRGB: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            yiq: *mut PF_Fixed,
            rgb: *mut PF_Pixel,
        ) -> PF_Err,
    >,
    pub Luminance: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_Pixel,
            lum100: *mut A_long,
        ) -> PF_Err,
    >,
    pub Hue: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_Pixel,
            hue: *mut A_long,
        ) -> PF_Err,
    >,
    pub Lightness: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_Pixel,
            lightness: *mut A_long,
        ) -> PF_Err,
    >,
    pub Saturation: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_Pixel,
            saturation: *mut A_long,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ColorCallbacks16Suite1 {
    pub RGBtoHLS: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_Pixel16,
            hls: *mut PF_Fixed,
        ) -> PF_Err,
    >,
    pub HLStoRGB: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            hls: *mut PF_Fixed,
            rgb: *mut PF_Pixel16,
        ) -> PF_Err,
    >,
    pub RGBtoYIQ: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_Pixel16,
            yiq: *mut PF_Fixed,
        ) -> PF_Err,
    >,
    pub YIQtoRGB: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            yiq: *mut PF_Fixed,
            rgb: *mut PF_Pixel16,
        ) -> PF_Err,
    >,
    pub Luminance: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_Pixel16,
            lum100: *mut A_long,
        ) -> PF_Err,
    >,
    pub Hue: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_Pixel16,
            hue: *mut A_long,
        ) -> PF_Err,
    >,
    pub Lightness: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_Pixel16,
            lightness: *mut A_long,
        ) -> PF_Err,
    >,
    pub Saturation: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_Pixel16,
            saturation: *mut A_long,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ColorCallbacksFloatSuite1 {
    pub RGBtoHLS: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_PixelFloat,
            hls: *mut PF_Fixed,
        ) -> PF_Err,
    >,
    pub HLStoRGB: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            hls: *mut PF_Fixed,
            rgb: *mut PF_PixelFloat,
        ) -> PF_Err,
    >,
    pub RGBtoYIQ: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_PixelFloat,
            yiq: *mut PF_Fixed,
        ) -> PF_Err,
    >,
    pub YIQtoRGB: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            yiq: *mut PF_Fixed,
            rgb: *mut PF_PixelFloat,
        ) -> PF_Err,
    >,
    pub Luminance: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_PixelFloat,
            lumP: *mut f32,
        ) -> PF_Err,
    >,
    pub Hue: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_PixelFloat,
            hue: *mut f32,
        ) -> PF_Err,
    >,
    pub Lightness: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_PixelFloat,
            lightness: *mut f32,
        ) -> PF_Err,
    >,
    pub Saturation: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            rgb: *mut PF_PixelFloat,
            saturation: *mut f32,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_BatchSamplingSuite1 {
    pub begin_sampling: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            qual: PF_Quality,
            mf: PF_ModeFlags,
            params: *mut PF_SampPB,
        ) -> PF_Err,
    >,
    pub end_sampling: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            qual: PF_Quality,
            mf: PF_ModeFlags,
            params: *mut PF_SampPB,
        ) -> PF_Err,
    >,
    pub get_batch_func: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            quality: PF_Quality,
            mode_flags: PF_ModeFlags,
            params: *const PF_SampPB,
            batch: *mut PF_BatchSampleFunc,
        ) -> PF_Err,
    >,
    pub get_batch_func16: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            quality: PF_Quality,
            mode_flags: PF_ModeFlags,
            params: *const PF_SampPB,
            batch: *mut PF_BatchSample16Func,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_Sampling8Suite1 {
    pub nn_sample: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            x: PF_Fixed,
            y: PF_Fixed,
            params: *const PF_SampPB,
            dst_pixel: *mut PF_Pixel,
        ) -> PF_Err,
    >,
    pub subpixel_sample: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            x: PF_Fixed,
            y: PF_Fixed,
            params: *const PF_SampPB,
            dst_pixel: *mut PF_Pixel,
        ) -> PF_Err,
    >,
    pub area_sample: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            x: PF_Fixed,
            y: PF_Fixed,
            params: *const PF_SampPB,
            dst_pixel: *mut PF_Pixel,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_Sampling16Suite1 {
    pub nn_sample16: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            x: PF_Fixed,
            y: PF_Fixed,
            params: *const PF_SampPB,
            dst_pixel: *mut PF_Pixel16,
        ) -> PF_Err,
    >,
    pub subpixel_sample16: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            x: PF_Fixed,
            y: PF_Fixed,
            params: *const PF_SampPB,
            dst_pixel: *mut PF_Pixel16,
        ) -> PF_Err,
    >,
    pub area_sample16: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            x: PF_Fixed,
            y: PF_Fixed,
            params: *const PF_SampPB,
            dst_pixel: *mut PF_Pixel16,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_SamplingFloatSuite1 {
    pub nn_sample_float: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            x: PF_Fixed,
            y: PF_Fixed,
            params: *const PF_SampPB,
            dst_pixel: *mut PF_PixelFloat,
        ) -> PF_Err,
    >,
    pub subpixel_sample_float: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            x: PF_Fixed,
            y: PF_Fixed,
            params: *const PF_SampPB,
            dst_pixel: *mut PF_PixelFloat,
        ) -> PF_Err,
    >,
    pub area_sample_float: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            x: PF_Fixed,
            y: PF_Fixed,
            params: *const PF_SampPB,
            dst_pixel: *mut PF_PixelFloat,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_WorldSuite2 {
    pub PF_NewWorld: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            widthL: A_long,
            heightL: A_long,
            clear_pixB: PF_Boolean,
            pixel_format: PF_PixelFormat,
            worldP: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub PF_DisposeWorld: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, worldP: *mut PF_EffectWorld) -> PF_Err,
    >,
    pub PF_GetPixelFormat: ::std::option::Option<
        unsafe extern "C" fn(
            worldP: *const PF_EffectWorld,
            pixel_formatP: *mut PF_PixelFormat,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_PixelFormatSuite2 {
    pub PF_AddSupportedPixelFormat: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, pixel_format: PF_PixelFormat) -> PF_Err,
    >,
    pub PF_ClearSupportedPixelFormats:
        ::std::option::Option<unsafe extern "C" fn(effect_ref: PF_ProgPtr) -> PF_Err>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_WorldSuite1 {
    pub new_world: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            width: A_long,
            height: A_long,
            flags: PF_NewWorldFlags,
            world: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub dispose_world: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, world: *mut PF_EffectWorld) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_Iterate8Suite1 {
    pub iterate: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: ::std::option::Option<
                unsafe extern "C" fn(
                    refcon: *mut ::std::os::raw::c_void,
                    x: A_long,
                    y: A_long,
                    in_: *mut PF_Pixel,
                    out: *mut PF_Pixel,
                ) -> PF_Err,
            >,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub iterate_origin: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            origin: *const PF_Point,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: ::std::option::Option<
                unsafe extern "C" fn(
                    refcon: *mut ::std::os::raw::c_void,
                    x: A_long,
                    y: A_long,
                    in_: *mut PF_Pixel,
                    out: *mut PF_Pixel,
                ) -> PF_Err,
            >,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub iterate_lut: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            a_lut0: *mut A_u_char,
            r_lut0: *mut A_u_char,
            g_lut0: *mut A_u_char,
            b_lut0: *mut A_u_char,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub iterate_origin_non_clip_src: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            origin: *const PF_Point,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: ::std::option::Option<
                unsafe extern "C" fn(
                    refcon: *mut ::std::os::raw::c_void,
                    x: A_long,
                    y: A_long,
                    in_: *mut PF_Pixel,
                    out: *mut PF_Pixel,
                ) -> PF_Err,
            >,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub iterate_generic: ::std::option::Option<
        unsafe extern "C" fn(
            iterationsL: A_long,
            refconPV: *mut ::std::os::raw::c_void,
            fn_func: ::std::option::Option<
                unsafe extern "C" fn(
                    refconPV: *mut ::std::os::raw::c_void,
                    thread_indexL: A_long,
                    i: A_long,
                    iterationsL: A_long,
                ) -> PF_Err,
            >,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_Iterate8Suite2 {
    pub iterate: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: ::std::option::Option<
                unsafe extern "C" fn(
                    refcon: *mut ::std::os::raw::c_void,
                    x: A_long,
                    y: A_long,
                    in_: *mut PF_Pixel,
                    out: *mut PF_Pixel,
                ) -> PF_Err,
            >,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub iterate_origin: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            origin: *const PF_Point,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: ::std::option::Option<
                unsafe extern "C" fn(
                    refcon: *mut ::std::os::raw::c_void,
                    x: A_long,
                    y: A_long,
                    in_: *mut PF_Pixel,
                    out: *mut PF_Pixel,
                ) -> PF_Err,
            >,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub iterate_lut: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            a_lut0: *mut A_u_char,
            r_lut0: *mut A_u_char,
            g_lut0: *mut A_u_char,
            b_lut0: *mut A_u_char,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub iterate_origin_non_clip_src: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            origin: *const PF_Point,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: ::std::option::Option<
                unsafe extern "C" fn(
                    refcon: *mut ::std::os::raw::c_void,
                    x: A_long,
                    y: A_long,
                    in_: *mut PF_Pixel,
                    out: *mut PF_Pixel,
                ) -> PF_Err,
            >,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub iterate_generic: ::std::option::Option<
        unsafe extern "C" fn(
            iterationsL: A_long,
            refconPV: *mut ::std::os::raw::c_void,
            fn_func: ::std::option::Option<
                unsafe extern "C" fn(
                    refconPV: *mut ::std::os::raw::c_void,
                    thread_indexL: A_long,
                    i: A_long,
                    iterationsL: A_long,
                ) -> PF_Err,
            >,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_iterate16Suite1 {
    pub iterate: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: ::std::option::Option<
                unsafe extern "C" fn(
                    refcon: *mut ::std::os::raw::c_void,
                    x: A_long,
                    y: A_long,
                    in_: *mut PF_Pixel16,
                    out: *mut PF_Pixel16,
                ) -> PF_Err,
            >,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub iterate_origin: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            origin: *const PF_Point,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: ::std::option::Option<
                unsafe extern "C" fn(
                    refcon: *mut ::std::os::raw::c_void,
                    x: A_long,
                    y: A_long,
                    in_: *mut PF_Pixel16,
                    out: *mut PF_Pixel16,
                ) -> PF_Err,
            >,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub iterate_origin_non_clip_src: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            origin: *const PF_Point,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: ::std::option::Option<
                unsafe extern "C" fn(
                    refcon: *mut ::std::os::raw::c_void,
                    x: A_long,
                    y: A_long,
                    in_: *mut PF_Pixel16,
                    out: *mut PF_Pixel16,
                ) -> PF_Err,
            >,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
}
pub type PF_Iterate16Suite1 = PF_iterate16Suite1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_iterate16Suite2 {
    pub iterate: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: ::std::option::Option<
                unsafe extern "C" fn(
                    refcon: *mut ::std::os::raw::c_void,
                    x: A_long,
                    y: A_long,
                    in_: *mut PF_Pixel16,
                    out: *mut PF_Pixel16,
                ) -> PF_Err,
            >,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub iterate_origin: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            origin: *const PF_Point,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: ::std::option::Option<
                unsafe extern "C" fn(
                    refcon: *mut ::std::os::raw::c_void,
                    x: A_long,
                    y: A_long,
                    in_: *mut PF_Pixel16,
                    out: *mut PF_Pixel16,
                ) -> PF_Err,
            >,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub iterate_origin_non_clip_src: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            origin: *const PF_Point,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: ::std::option::Option<
                unsafe extern "C" fn(
                    refcon: *mut ::std::os::raw::c_void,
                    x: A_long,
                    y: A_long,
                    in_: *mut PF_Pixel16,
                    out: *mut PF_Pixel16,
                ) -> PF_Err,
            >,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
}
pub type PF_Iterate16Suite2 = PF_iterate16Suite2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_iterateFloatSuite1 {
    pub iterate: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: PF_IteratePixelFloatFunc,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub iterate_origin: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            origin: *const PF_Point,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: PF_IteratePixelFloatFunc,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub iterate_origin_non_clip_src: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            origin: *const PF_Point,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: PF_IteratePixelFloatFunc,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
}
pub type PF_IterateFloatSuite1 = PF_iterateFloatSuite1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_iterateFloatSuite2 {
    pub iterate: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: PF_IteratePixelFloatFunc,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub iterate_origin: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            origin: *const PF_Point,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: PF_IteratePixelFloatFunc,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub iterate_origin_non_clip_src: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            progress_base: A_long,
            progress_final: A_long,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            origin: *const PF_Point,
            refcon: *mut ::std::os::raw::c_void,
            pix_fn: PF_IteratePixelFloatFunc,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
}
pub type PF_IterateFloatSuite2 = PF_iterateFloatSuite2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_WorldTransformSuite1 {
    pub composite_rect: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            src_rect: *mut PF_Rect,
            src_opacity: A_long,
            source_wld: *mut PF_EffectWorld,
            dest_x: A_long,
            dest_y: A_long,
            field_rdr: PF_Field,
            xfer_mode: PF_XferMode,
            dest_wld: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub blend: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            src1: *const PF_EffectWorld,
            src2: *const PF_EffectWorld,
            ratio: PF_Fixed,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub convolve: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            src: *mut PF_EffectWorld,
            area: *const PF_Rect,
            flags: PF_KernelFlags,
            kernel_size: A_long,
            a_kernel: *mut ::std::os::raw::c_void,
            r_kernel: *mut ::std::os::raw::c_void,
            g_kernel: *mut ::std::os::raw::c_void,
            b_kernel: *mut ::std::os::raw::c_void,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            src: *mut PF_EffectWorld,
            dst: *mut PF_EffectWorld,
            src_r: *mut PF_Rect,
            dst_r: *mut PF_Rect,
        ) -> PF_Err,
    >,
    pub copy_hq: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            src: *mut PF_EffectWorld,
            dst: *mut PF_EffectWorld,
            src_r: *mut PF_Rect,
            dst_r: *mut PF_Rect,
        ) -> PF_Err,
    >,
    pub transfer_rect: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            quality: PF_Quality,
            m_flags: PF_ModeFlags,
            field: PF_Field,
            src_rec: *const PF_Rect,
            src_world: *const PF_EffectWorld,
            comp_mode: *const PF_CompositeMode,
            mask_world0: *const PF_MaskWorld,
            dest_x: A_long,
            dest_y: A_long,
            dst_world: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub transform_world: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            quality: PF_Quality,
            m_flags: PF_ModeFlags,
            field: PF_Field,
            src_world: *const PF_EffectWorld,
            comp_mode: *const PF_CompositeMode,
            mask_world0: *const PF_MaskWorld,
            matrices: *const PF_FloatMatrix,
            num_matrices: A_long,
            src2dst_matrix: PF_Boolean,
            dest_rect: *const PF_Rect,
            dst_world: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_FillMatteSuite2 {
    pub fill: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            color: *const PF_Pixel,
            dst_rect: *const PF_Rect,
            world: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub fill16: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            color: *const PF_Pixel16,
            dst_rect: *const PF_Rect,
            world: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub fill_float: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            color: *const PF_PixelFloat,
            dst_rect: *const PF_Rect,
            world: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub premultiply: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            forward: A_long,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub premultiply_color: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            src: *mut PF_EffectWorld,
            color: *const PF_Pixel,
            forward: A_long,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub premultiply_color16: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            src: *mut PF_EffectWorld,
            color: *const PF_Pixel16,
            forward: A_long,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub premultiply_color_float: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            src: *mut PF_EffectWorld,
            color: *const PF_PixelFloat,
            forward: A_long,
            dst: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_GPUDeviceInfo {
    pub device_framework: PF_GPU_Framework,
    pub compatibleB: PF_Boolean,
    pub platformPV: *mut ::std::os::raw::c_void,
    pub devicePV: *mut ::std::os::raw::c_void,
    pub contextPV: *mut ::std::os::raw::c_void,
    pub command_queuePV: *mut ::std::os::raw::c_void,
    pub offscreen_opengl_contextPV: *mut ::std::os::raw::c_void,
    pub offscreen_opengl_devicePV: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_GPUDeviceSuite1 {
    #[doc = "\tThis will return the number of gpu devices the host supports.\n\n\t@param\teffect_ref\t\t\t\t\t\t\t\tComes with PF_InData.\n\t@param\tdevice_countP\t\t\t\t\t\t\tReturn number of devices available."]
    pub GetDeviceCount: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, device_countP: *mut A_u_long) -> PF_Err,
    >,
    #[doc = "\tThis will return the device info with given device index, which includes necessary context/queue information\n\tneeded to dispatch task to the device. Refer PF_GPUDeviceInfo for details.\n\n\t@param\teffect_ref\t\t\t\t\t\t\t\tComes with PF_InData.\n\t@param\tdevice_index\t\t\t\t\t\t\tThe device index for the requested device.\n\t@param\tPF_GPUDeviceInfo\t\t\t\t\t\tThe device info will to be filled."]
    pub GetDeviceInfo: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            device_index: A_u_long,
            device_infoP: *mut PF_GPUDeviceInfo,
        ) -> PF_Err,
    >,
    #[doc = "\tAcquire/release exclusive access to inDeviceIndex. All calls below this point generally require access be held.\n\tFor full GPU plugins (those that use a separate entry point for GPU rendering) exclusive access is always held.\n\tThese calls do not need to be made in that case.\n\t\tFor CUDA calls cuCtxPushCurrent/cuCtxPopCurrent on the current thread to manage the devices context."]
    pub AcquireExclusiveDeviceAccess: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, device_index: A_u_long) -> PF_Err,
    >,
    pub ReleaseExclusiveDeviceAccess: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, device_index: A_u_long) -> PF_Err,
    >,
    #[doc = "\tAll device memory must be allocated through this suite.\n\t\tPurge should be called only in emergency situations when working with GPU memory\n\t\t\tthat cannot be allocated through this suite (eg OpenGL memory).\n\t\tReturned pointer value represents memory allocated through cuMemAlloc or clCreateBuffer or CreateCommittedResource."]
    pub AllocateDeviceMemory: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            device_index: A_u_long,
            size_bytes: usize,
            memoryPP: *mut *mut ::std::os::raw::c_void,
        ) -> PF_Err,
    >,
    pub FreeDeviceMemory: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            device_index: A_u_long,
            memoryP: *mut ::std::os::raw::c_void,
        ) -> PF_Err,
    >,
    pub PurgeDeviceMemory: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            device_index: A_u_long,
            size_bytes: usize,
            bytes_purgedP0: *mut usize,
        ) -> PF_Err,
    >,
    #[doc = "\tAll host (pinned) memory must be allocated through this suite.\n\t\tPurge should be called only in emergency situations when working with GPU memory\n\t\t\tthat cannot be allocated through this suite (eg OpenGL memory).\n\t\tReturned pointer value represents memory allocated through cuMemHostAlloc or malloc or CreateCommittedResource (on upload heap)."]
    pub AllocateHostMemory: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            device_index: A_u_long,
            size_bytes: usize,
            memoryPP: *mut *mut ::std::os::raw::c_void,
        ) -> PF_Err,
    >,
    pub FreeHostMemory: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            device_index: A_u_long,
            memoryP: *mut ::std::os::raw::c_void,
        ) -> PF_Err,
    >,
    pub PurgeHostMemory: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            device_index: A_u_long,
            bytes_to_purge: usize,
            bytes_purgedP0: *mut usize,
        ) -> PF_Err,
    >,
    #[doc = "\tThis will allocate a gpu effect world. Caller is responsible for deallocating the buffer with\n\tPF_GPUDeviceSuite1::DisposeGPUWorld.\n\n\t@param\teffect_ref\t\t\t\t\tComes with PF_InData.\n\t@param\tdevice_index\t\t\t\tThe device you want your gpu effect world allocated with.\n\t@param\twidth\t\t\t\t\t\tWidth of the effect world.\n\t@param\theight\t\t\t\t\t\tHeight of the effect world.\n\t@param\tpixel_aspect_ratio\t\t\tPixel Aspect Ratio of the effect world.\n\t@param\tfield_type\t\t\t\t\tThe field of the effect world.\n\t@param\tpixel_format\t\t\t\tThe pixel format of the effect world, only gpu formats are accepted.\n\t@param\tclear_pixB\t\t\t\t\tPass in 'true' for a transparent black frame.\n\t@param\tworldPP\t\t\t\t\t\tThe handle to the effect world to be created."]
    pub CreateGPUWorld: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            device_index: A_u_long,
            width: A_long,
            height: A_long,
            pixel_aspect_ratio: PF_RationalScale,
            field_type: PF_Field,
            pixel_format: PF_PixelFormat,
            clear_pixB: PF_Boolean,
            worldPP: *mut *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    #[doc = "\tThis will free this effect world. The effect world is no longer valid after this function is called.\n\tPlugin module is only allowed to dispose of effect worlds they create.\n\n\t@param\teffect_ref\t\t\t\t\tComes with PF_InData.\n\t@param\tworldP\t\t\t\t\t\tThe effect world you want to dispose."]
    pub DisposeGPUWorld: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, worldP: *mut PF_EffectWorld) -> PF_Err,
    >,
    #[doc = "\tThis will return the gpu buffer address of the given effect world.\n\n\t@param\teffect_ref\t\t\t\t\t\tComes with PF_InData.\n\t@param\tworldP\t\t\t\t\t\t\tThe effect world you want to operate on, has to be a gpu effect world.\n\t@param\tpixPP\t\t\t\t\t\t\tReturns the gpu buffer address."]
    pub GetGPUWorldData: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            worldP: *mut PF_EffectWorld,
            pixPP: *mut *mut ::std::os::raw::c_void,
        ) -> PF_Err,
    >,
    #[doc = "\tThis will return the size of the total data in the effect world.\n\n\t@param\teffect_ref\t\t\t\t\t\tComes with PF_InData.\n\t@param\tworldP\t\t\t\t\t\t\tThe effect world you want to operate on, has to be a gpu effect world.\n\t@param\tdevice_indexP\t\t\t\t\tReturns the size of the total data in the effect world."]
    pub GetGPUWorldSize: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            worldP: *mut PF_EffectWorld,
            size_in_bytesP: *mut usize,
        ) -> PF_Err,
    >,
    #[doc = "\tThis will return device index the gpu effect world is associated with.\n\n\t@param\teffect_ref\t\t\t\t\t\tComes with PF_InData.\n\t@param\tworldP\t\t\t\t\t\t\tThe effect world you want to operate on, has to be a gpu effect world.\n\t@param\tdevice_indexP\t\t\t\t\tReturns the device index of the given effect world."]
    pub GetGPUWorldDeviceIndex: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            worldP: *mut PF_EffectWorld,
            device_indexP: *mut A_u_long,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_PathOutline {
    _unused: [u8; 0],
}
pub type PF_PathOutlinePtr = *mut PF_PathOutline;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_PathSegPrep {
    _unused: [u8; 0],
}
pub type PF_PathSegPrepPtr = *mut PF_PathSegPrep;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_PathQuerySuite1 {
    pub PF_NumPaths: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, num_pathsPL: *mut A_long) -> PF_Err,
    >,
    pub PF_PathInfo: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            indexL: A_long,
            unique_idP: *mut PF_PathID,
        ) -> PF_Err,
    >,
    pub PF_CheckoutPath: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            unique_id: PF_PathID,
            what_time: A_long,
            time_step: A_long,
            time_scale: A_u_long,
            pathPP: *mut PF_PathOutlinePtr,
        ) -> PF_Err,
    >,
    pub PF_CheckinPath: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            unique_id: PF_PathID,
            changedB: PF_Boolean,
            pathP: PF_PathOutlinePtr,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_PathVertex {
    pub x: PF_FpLong,
    pub y: PF_FpLong,
    pub tan_in_x: PF_FpLong,
    pub tan_in_y: PF_FpLong,
    pub tan_out_x: PF_FpLong,
    pub tan_out_y: PF_FpLong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_PathDataSuite1 {
    pub PF_PathIsOpen: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref0: PF_ProgPtr,
            pathP: PF_PathOutlinePtr,
            openPB: *mut PF_Boolean,
        ) -> PF_Err,
    >,
    pub PF_PathNumSegments: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref0: PF_ProgPtr,
            pathP: PF_PathOutlinePtr,
            num_segmentsPL: *mut A_long,
        ) -> PF_Err,
    >,
    pub PF_PathVertexInfo: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref0: PF_ProgPtr,
            pathP: PF_PathOutlinePtr,
            which_pointL: A_long,
            vertexP: *mut PF_PathVertex,
        ) -> PF_Err,
    >,
    pub PF_PathPrepareSegLength: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref0: PF_ProgPtr,
            pathP: PF_PathOutlinePtr,
            which_segL: A_long,
            frequencyL: A_long,
            lengthPrepPP: *mut PF_PathSegPrepPtr,
        ) -> PF_Err,
    >,
    pub PF_PathGetSegLength: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref0: PF_ProgPtr,
            pathP: PF_PathOutlinePtr,
            which_segL: A_long,
            lengthPrepP0: *mut PF_PathSegPrepPtr,
            lengthPF: *mut PF_FpLong,
        ) -> PF_Err,
    >,
    pub PF_PathEvalSegLength: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref0: PF_ProgPtr,
            pathP: PF_PathOutlinePtr,
            lengthPrepPP0: *mut PF_PathSegPrepPtr,
            which_segL: A_long,
            lengthF: PF_FpLong,
            x: *mut PF_FpLong,
            y: *mut PF_FpLong,
        ) -> PF_Err,
    >,
    pub PF_PathEvalSegLengthDeriv1: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref0: PF_ProgPtr,
            pathP: PF_PathOutlinePtr,
            lengthPrepPP0: *mut PF_PathSegPrepPtr,
            which_segL: A_long,
            lengthF: PF_FpLong,
            x: *mut PF_FpLong,
            y: *mut PF_FpLong,
            deriv1x: *mut PF_FpLong,
            deriv1y: *mut PF_FpLong,
        ) -> PF_Err,
    >,
    pub PF_PathCleanupSegLength: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref0: PF_ProgPtr,
            pathP: PF_PathOutlinePtr,
            which_segL: A_long,
            lengthPrepPP: *mut PF_PathSegPrepPtr,
        ) -> PF_Err,
    >,
    pub PF_PathIsInverted: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            unique_id: PF_PathID,
            invertedB: *mut PF_Boolean,
        ) -> PF_Err,
    >,
    pub PF_PathGetMaskMode: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            unique_id: PF_PathID,
            modeP: *mut PF_MaskMode,
        ) -> PF_Err,
    >,
    pub PF_PathGetName: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            unique_id: PF_PathID,
            nameZ: *mut A_char,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_State {
    pub reservedAL: [A_long; 4usize],
}
pub const PF_TimeDir_GREATER_THAN: _bindgen_ty_59 = 0;
pub const PF_TimeDir_LESS_THAN: _bindgen_ty_59 = 1;
pub const PF_TimeDir_GREATER_THAN_OR_EQUAL: _bindgen_ty_59 = 4096;
pub const PF_TimeDir_LESS_THAN_OR_EQUAL: _bindgen_ty_59 = 4097;
pub type _bindgen_ty_59 = ::std::os::raw::c_int;
pub type PF_TimeDir = A_long;
pub type PF_KeyIndex = A_long;
#[doc = " PF_ParamUtilsSuite3\n\nPF_UpdateParamUI()\n\nYou can call this function for each param whose UI settings you\nwant to change when handling a PF_Cmd_USER_CHANGED_PARAM or\nPF_Cmd_UPDATE_PARAMS_UI.  These changes are cosmetic only, and don't\ngo into the undo buffer.\n\nThe ONLY fields that can be changed in this way are:\n\nPF_ParamDef\nui_flags: PF_PUI_ECW_SEPARATOR, PF_PUI_DISABLED only (and PF_PUI_INVISIBLE in Premiere).\nui_width\nui_height\nname\nflags: PF_ParamFlag_COLLAPSE_TWIRLY only\n\nPF_ParamDefUnion:\nslider_min, slider_max, precision, display_flags of any slider type\n\nFor PF_PUI_STD_CONTROL_ONLY params, you can also change the value field by setting\nPF_ChangeFlag_CHANGED_VALUE before returning.  But you are not allowed to change\nthe value during PF_Cmd_UPDATE_PARAMS_UI.\n\nPF_GetCurrentState() / PF_AreStatesIdentical()\nThis API lets you determine if a set of your inputs (either layers, other properties, or both)\nare different between when you first called PF_GetCurrentState() and a current call, so it can\nbe used for caching. You can specify a range of time to consider or all of time.\n\nFor effects that do simulation across time and therefore set PF_OutFlag2_AUTOMATIC_WIDE_TIME_INPUT,\nwhen you ask about a time range, it will be expanded to include any times needed to produce\nthat range.\n\nSee doc on the old PF_HaveInputsChangedOverTimeSpan() for historical context."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ParamUtilsSuite3 {
    pub PF_UpdateParamUI: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            param_index: PF_ParamIndex,
            defP: *const PF_ParamDef,
        ) -> PF_Err,
    >,
    pub PF_GetCurrentState: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            param_index: PF_ParamIndex,
            startPT0: *const A_Time,
            durationPT0: *const A_Time,
            stateP: *mut PF_State,
        ) -> PF_Err,
    >,
    pub PF_AreStatesIdentical: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            state1P: *const PF_State,
            state2P: *const PF_State,
            samePB: *mut A_Boolean,
        ) -> PF_Err,
    >,
    pub PF_IsIdenticalCheckout: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            param_index: PF_ParamIndex,
            what_time1: A_long,
            time_step1: A_long,
            time_scale1: A_u_long,
            what_time2: A_long,
            time_step2: A_long,
            time_scale2: A_u_long,
            identicalPB: *mut PF_Boolean,
        ) -> PF_Err,
    >,
    pub PF_FindKeyframeTime: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            param_index: PF_ParamIndex,
            what_time: A_long,
            time_scale: A_u_long,
            time_dir: PF_TimeDir,
            foundPB: *mut PF_Boolean,
            key_indexP0: *mut PF_KeyIndex,
            key_timeP0: *mut A_long,
            key_timescaleP0: *mut A_u_long,
        ) -> PF_Err,
    >,
    pub PF_GetKeyframeCount: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            param_index: PF_ParamIndex,
            key_countP: *mut PF_KeyIndex,
        ) -> PF_Err,
    >,
    pub PF_CheckoutKeyframe: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            param_index: PF_ParamIndex,
            key_index: PF_KeyIndex,
            key_timeP0: *mut A_long,
            key_timescaleP0: *mut A_u_long,
            paramP0: *mut PF_ParamDef,
        ) -> PF_Err,
    >,
    pub PF_CheckinKeyframe: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, paramP: *mut PF_ParamDef) -> PF_Err,
    >,
    pub PF_KeyIndexToTime: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            param_index: PF_ParamIndex,
            key_indexP: PF_KeyIndex,
            key_timeP: *mut A_long,
            key_timescaleP: *mut A_u_long,
        ) -> PF_Err,
    >,
}
#[doc = " PF_ColorParamSuite1"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ColorParamSuite1 {
    pub PF_GetFloatingPointColorFromColorDef: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            color_defP: *const PF_ParamDef,
            fp_colorP: *mut PF_PixelFloat,
        ) -> PF_Err,
    >,
}
#[doc = " PF_PointParamSuite1"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_PointParamSuite1 {
    pub PF_GetFloatingPointValueFromPointDef: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            point_defP: *const PF_ParamDef,
            fp_pointP: *mut A_FloatPoint,
        ) -> PF_Err,
    >,
}
#[doc = " PF_AngleParamSuite1"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_AngleParamSuite1 {
    pub PF_GetFloatingPointValueFromAngleDef: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            angle_defP: *const PF_ParamDef,
            fp_valueP: *mut A_FpLong,
        ) -> PF_Err,
    >,
}
pub const PF_App_Color_NONE: _bindgen_ty_60 = -1;
pub const PF_App_Color_FRAME: _bindgen_ty_60 = 0;
pub const PF_App_Color_FILL: _bindgen_ty_60 = 1;
pub const PF_App_Color_TEXT: _bindgen_ty_60 = 2;
pub const PF_App_Color_LIGHT_TINGE: _bindgen_ty_60 = 3;
pub const PF_App_Color_DARK_TINGE: _bindgen_ty_60 = 4;
pub const PF_App_Color_HILITE: _bindgen_ty_60 = 5;
pub const PF_App_Color_SHADOW: _bindgen_ty_60 = 6;
pub const PF_App_Color_BUTTON_FRAME: _bindgen_ty_60 = 7;
pub const PF_App_Color_BUTTON_FILL: _bindgen_ty_60 = 8;
pub const PF_App_Color_BUTTON_TEXT: _bindgen_ty_60 = 9;
pub const PF_App_Color_BUTTON_LIGHT_TINGE: _bindgen_ty_60 = 10;
pub const PF_App_Color_BUTTON_DARK_TINGE: _bindgen_ty_60 = 11;
pub const PF_App_Color_BUTTON_HILITE: _bindgen_ty_60 = 12;
pub const PF_App_Color_BUTTON_SHADOW: _bindgen_ty_60 = 13;
pub const PF_App_Color_BUTTON_PRESSED_FRAME: _bindgen_ty_60 = 14;
pub const PF_App_Color_BUTTON_PRESSED_FILL: _bindgen_ty_60 = 15;
pub const PF_App_Color_BUTTON_PRESSED_TEXT: _bindgen_ty_60 = 16;
pub const PF_App_Color_BUTTON_PRESSED_LIGHT_TINGE: _bindgen_ty_60 = 17;
pub const PF_App_Color_BUTTON_PRESSED_DARK_TINGE: _bindgen_ty_60 = 18;
pub const PF_App_Color_BUTTON_PRESSED_HILITE: _bindgen_ty_60 = 19;
pub const PF_App_Color_BUTTON_PRESSED_SHADOW: _bindgen_ty_60 = 20;
pub const PF_App_Color_FRAME_DISABLED: _bindgen_ty_60 = 21;
pub const PF_App_Color_FILL_DISABLED: _bindgen_ty_60 = 22;
pub const PF_App_Color_TEXT_DISABLED: _bindgen_ty_60 = 23;
pub const PF_App_Color_LIGHT_TINGE_DISABLED: _bindgen_ty_60 = 24;
pub const PF_App_Color_DARK_TINGE_DISABLED: _bindgen_ty_60 = 25;
pub const PF_App_Color_HILITE_DISABLED: _bindgen_ty_60 = 26;
pub const PF_App_Color_SHADOW_DISABLED: _bindgen_ty_60 = 27;
pub const PF_App_Color_BUTTON_FRAME_DISABLED: _bindgen_ty_60 = 28;
pub const PF_App_Color_BUTTON_FILL_DISABLED: _bindgen_ty_60 = 29;
pub const PF_App_Color_BUTTON_TEXT_DISABLED: _bindgen_ty_60 = 30;
pub const PF_App_Color_BUTTON_LIGHT_TINGE_DISABLED: _bindgen_ty_60 = 31;
pub const PF_App_Color_BUTTON_DARK_TINGE_DISABLED: _bindgen_ty_60 = 32;
pub const PF_App_Color_BUTTON_HILITE_DISABLED: _bindgen_ty_60 = 33;
pub const PF_App_Color_BUTTON_SHADOW_DISABLED: _bindgen_ty_60 = 34;
pub const PF_App_Color_BUTTON_PRESSED_FRAME_DISABLED: _bindgen_ty_60 = 35;
pub const PF_App_Color_BUTTON_PRESSED_FILL_DISABLED: _bindgen_ty_60 = 36;
pub const PF_App_Color_BUTTON_PRESSED_TEXT_DISABLED: _bindgen_ty_60 = 37;
pub const PF_App_Color_BUTTON_PRESSED_LIGHT_TINGE_DISABLED: _bindgen_ty_60 = 38;
pub const PF_App_Color_BUTTON_PRESSED_DARK_TINGE_DISABLED: _bindgen_ty_60 = 39;
pub const PF_App_Color_BUTTON_PRESSED_HILITE_DISABLED: _bindgen_ty_60 = 40;
pub const PF_App_Color_BUTTON_PRESSED_SHADOW_DISABLED: _bindgen_ty_60 = 41;
pub const PF_App_Color_BLACK: _bindgen_ty_60 = 42;
pub const PF_App_Color_WHITE: _bindgen_ty_60 = 43;
pub const PF_App_Color_GRAY: _bindgen_ty_60 = 44;
pub const PF_App_Color_RED: _bindgen_ty_60 = 45;
pub const PF_App_Color_YELLOW: _bindgen_ty_60 = 46;
pub const PF_App_Color_GREEN: _bindgen_ty_60 = 47;
pub const PF_App_Color_CYAN: _bindgen_ty_60 = 48;
pub const PF_App_Color_TLW_NEEDLE_CURRENT_TIME: _bindgen_ty_60 = 49;
pub const PF_App_Color_TLW_NEEDLE_PREVIEW_TIME: _bindgen_ty_60 = 50;
pub const PF_App_Color_TLW_CACHE_MARK_MEM: _bindgen_ty_60 = 51;
pub const PF_App_Color_TLW_CACHE_MARK_DISK: _bindgen_ty_60 = 52;
pub const PF_App_Color_TLW_CACHE_MARK_MIX: _bindgen_ty_60 = 53;
pub const PF_App_Color_FILL_LIGHT: _bindgen_ty_60 = 54;
pub const PF_App_Color_HOT_TEXT: _bindgen_ty_60 = 55;
pub const PF_App_Color_HOT_TEXT_DISABLED: _bindgen_ty_60 = 56;
pub const PF_App_Color_LABEL_0: _bindgen_ty_60 = 57;
pub const PF_App_Color_LABEL_1: _bindgen_ty_60 = 58;
pub const PF_App_Color_LABEL_2: _bindgen_ty_60 = 59;
pub const PF_App_Color_LABEL_3: _bindgen_ty_60 = 60;
pub const PF_App_Color_LABEL_4: _bindgen_ty_60 = 61;
pub const PF_App_Color_LABEL_5: _bindgen_ty_60 = 62;
pub const PF_App_Color_LABEL_6: _bindgen_ty_60 = 63;
pub const PF_App_Color_LABEL_7: _bindgen_ty_60 = 64;
pub const PF_App_Color_LABEL_8: _bindgen_ty_60 = 65;
pub const PF_App_Color_LABEL_9: _bindgen_ty_60 = 66;
pub const PF_App_Color_LABEL_10: _bindgen_ty_60 = 67;
pub const PF_App_Color_LABEL_11: _bindgen_ty_60 = 68;
pub const PF_App_Color_LABEL_12: _bindgen_ty_60 = 69;
pub const PF_App_Color_LABEL_13: _bindgen_ty_60 = 70;
pub const PF_App_Color_LABEL_14: _bindgen_ty_60 = 71;
pub const PF_App_Color_LABEL_15: _bindgen_ty_60 = 72;
pub const PF_App_Color_LABEL_16: _bindgen_ty_60 = 73;
pub const PF_App_Color_TLW_CACHE_MARK_MEM_DUBIOUS: _bindgen_ty_60 = 74;
pub const PF_App_Color_TLW_CACHE_MARK_DISK_DUBIOUS: _bindgen_ty_60 = 75;
pub const PF_App_Color_TLW_CACHE_MARK_MIX_DUBIOUS: _bindgen_ty_60 = 76;
pub const PF_App_Color_HOT_TEXT_PRESSED: _bindgen_ty_60 = 77;
pub const PF_App_Color_HOT_TEXT_WARNING: _bindgen_ty_60 = 78;
pub const PF_App_Color_PURE_BLACK: _bindgen_ty_60 = 79;
pub const PF_App_Color_PURE_WHITE: _bindgen_ty_60 = 80;
pub const PF_App_Color_PANEL_BACKGROUND: _bindgen_ty_60 = 1000;
pub const PF_App_Color_LIST_BOX_FILL: _bindgen_ty_60 = 1001;
pub const PF_App_Color_DARK_CAPTION_FILL: _bindgen_ty_60 = 1002;
pub const PF_App_Color_DARK_CAPTION_TEXT: _bindgen_ty_60 = 1003;
pub const PF_App_Color_TEXT_ON_LIGHTER_BG: _bindgen_ty_60 = 1004;
pub const PF_App_Color_NUMTYPES: _bindgen_ty_60 = 1005;
pub type _bindgen_ty_60 = ::std::os::raw::c_int;
pub type PF_App_ColorType = A_short;
pub const PF_EyeDropperSampleMode_DEFAULT: _bindgen_ty_61 = 0;
pub const PF_EyeDropperSampleMode_STRAIGHT: _bindgen_ty_61 = 1;
pub const PF_EyeDropperSampleMode_PREMUL: _bindgen_ty_61 = 2;
pub type _bindgen_ty_61 = ::std::os::raw::c_int;
pub type PF_EyeDropperSampleMode = A_short;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_App_Color {
    pub red: A_u_short,
    pub green: A_u_short,
    pub blue: A_u_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_AppPersonalTextInfo {
    pub name: [A_char; 64usize],
    pub org: [A_char; 64usize],
    pub serial_str: [A_char; 64usize],
}
pub const PF_FontStyle_NONE: _bindgen_ty_62 = -1;
pub const PF_FontStyle_SYS: _bindgen_ty_62 = 0;
pub const PF_FontStyle_SMALL: _bindgen_ty_62 = 1;
pub const PF_FontStyle_SMALL_BOLD: _bindgen_ty_62 = 2;
pub const PF_FontStyle_SMALL_ITALIC: _bindgen_ty_62 = 3;
pub const PF_FontStyle_MED: _bindgen_ty_62 = 4;
pub const PF_FontStyle_MED_BOLD: _bindgen_ty_62 = 5;
pub const PF_FontStyle_APP: _bindgen_ty_62 = 6;
pub const PF_FontStyle_APP_BOLD: _bindgen_ty_62 = 7;
pub const PF_FontStyle_APP_ITALIC: _bindgen_ty_62 = 8;
pub type _bindgen_ty_62 = ::std::os::raw::c_int;
pub type PF_FontStyleSheet = A_LegacyEnumType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_FontName {
    pub font_nameAC: [A_char; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PF_AppProgressDialog {
    _unused: [u8; 0],
}
pub type PF_AppProgressDialogP = *mut _PF_AppProgressDialog;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PFAppSuite6 {
    pub PF_AppGetBgColor:
        ::std::option::Option<unsafe extern "C" fn(bg_colorP: *mut PF_App_Color) -> PF_Err>,
    pub PF_AppGetColor: ::std::option::Option<
        unsafe extern "C" fn(color_type: PF_App_ColorType, app_colorP: *mut PF_App_Color) -> PF_Err,
    >,
    pub PF_AppGetLanguage:
        ::std::option::Option<unsafe extern "C" fn(lang_tagZ: *mut A_char) -> PF_Err>,
    pub PF_GetPersonalInfo:
        ::std::option::Option<unsafe extern "C" fn(ptiP: *mut PF_AppPersonalTextInfo) -> PF_Err>,
    pub PF_GetFontStyleSheet: ::std::option::Option<
        unsafe extern "C" fn(
            sheet: PF_FontStyleSheet,
            font_nameP0: *mut PF_FontName,
            font_numPS0: *mut A_short,
            sizePS0: *mut A_short,
            stylePS0: *mut A_short,
        ) -> PF_Err,
    >,
    pub PF_SetCursor: ::std::option::Option<unsafe extern "C" fn(cursor: PF_CursorType) -> PF_Err>,
    pub PF_IsRenderEngine:
        ::std::option::Option<unsafe extern "C" fn(render_enginePB: *mut PF_Boolean) -> PF_Err>,
    pub PF_AppColorPickerDialog: ::std::option::Option<
        unsafe extern "C" fn(
            dialog_titleZ0: *const A_char,
            sample_colorP: *const PF_PixelFloat,
            use_ws_to_monitor_xformB: PF_Boolean,
            new_colorP: *mut PF_PixelFloat,
        ) -> PF_Err,
    >,
    pub PF_GetMouse: ::std::option::Option<unsafe extern "C" fn(pointP: *mut PF_Point) -> PF_Err>,
    pub PF_InvalidateRect: ::std::option::Option<
        unsafe extern "C" fn(contextH: PF_ContextH, rectP0: *const PF_Rect) -> PF_Err,
    >,
    pub PF_ConvertLocalToGlobal: ::std::option::Option<
        unsafe extern "C" fn(localP: *const PF_Point, globalP: *mut PF_Point) -> PF_Err,
    >,
    pub PF_GetColorAtGlobalPoint: ::std::option::Option<
        unsafe extern "C" fn(
            globalP: *const PF_Point,
            eyeSize: A_short,
            mode: PF_EyeDropperSampleMode,
            outColorP: *mut PF_PixelFloat,
        ) -> PF_Err,
    >,
    pub PF_CreateNewAppProgressDialog: ::std::option::Option<
        unsafe extern "C" fn(
            titleZ: *const A_UTF16Char,
            cancel_strZ0: *const A_UTF16Char,
            indeterminateB: PF_Boolean,
            prog_dlgPP: *mut PF_AppProgressDialogP,
        ) -> PF_Err,
    >,
    pub PF_AppProgressDialogUpdate: ::std::option::Option<
        unsafe extern "C" fn(
            prog_dlgP: PF_AppProgressDialogP,
            countL: A_long,
            totalL: A_long,
        ) -> PF_Err,
    >,
    pub PF_DisposeAppProgressDialog:
        ::std::option::Option<unsafe extern "C" fn(prog_dlgP: PF_AppProgressDialogP) -> PF_Err>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_EffectUISuite1 {
    pub PF_SetOptionsButtonName: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, nameZ: *const A_char) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PF_AsyncManager {
    _unused: [u8; 0],
}
pub type PF_AsyncManagerP = *mut _PF_AsyncManager;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_EffectCustomUISuite2 {
    pub PF_GetDrawingReference: ::std::option::Option<
        unsafe extern "C" fn(
            effect_contextH: PF_ContextH,
            referenceP0: *mut DRAWBOT_DrawRef,
        ) -> PF_Err,
    >,
    pub PF_GetContextAsyncManager: ::std::option::Option<
        unsafe extern "C" fn(
            in_data: *mut PF_InData,
            extra: *mut PF_EventExtra,
            managerPP0: *mut PF_AsyncManagerP,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_EffectCustomUIOverlayThemeSuite1 {
    pub PF_GetPreferredForegroundColor: ::std::option::Option<
        unsafe extern "C" fn(foreground_colorP: *mut DRAWBOT_ColorRGBA) -> PF_Err,
    >,
    pub PF_GetPreferredShadowColor: ::std::option::Option<
        unsafe extern "C" fn(shadow_colorP: *mut DRAWBOT_ColorRGBA) -> PF_Err,
    >,
    pub PF_GetPreferredStrokeWidth:
        ::std::option::Option<unsafe extern "C" fn(stroke_widthPF: *mut f32) -> PF_Err>,
    pub PF_GetPreferredVertexSize:
        ::std::option::Option<unsafe extern "C" fn(vertex_sizePF: *mut f32) -> PF_Err>,
    pub PF_GetPreferredShadowOffset:
        ::std::option::Option<unsafe extern "C" fn(shadow_offsetP: *mut A_LPoint) -> PF_Err>,
    pub PF_StrokePath: ::std::option::Option<
        unsafe extern "C" fn(
            drawbot_ref: DRAWBOT_DrawRef,
            path_ref: DRAWBOT_PathRef,
            draw_shadowB: PF_Boolean,
        ) -> PF_Err,
    >,
    pub PF_FillPath: ::std::option::Option<
        unsafe extern "C" fn(
            drawbot_ref: DRAWBOT_DrawRef,
            path_ref: DRAWBOT_PathRef,
            draw_shadowB: PF_Boolean,
        ) -> PF_Err,
    >,
    pub PF_FillVertex: ::std::option::Option<
        unsafe extern "C" fn(
            drawbot_ref: DRAWBOT_DrawRef,
            center_pointP: *const A_FloatPoint,
            draw_shadowB: PF_Boolean,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_ParamUtilsSuite1 {
    pub PF_UpdateParamUI: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            param_index: PF_ParamIndex,
            defP: *const PF_ParamDef,
        ) -> PF_Err,
    >,
    pub PF_GetCurrentStateObsolete: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, stateP: *mut PF_State) -> PF_Err,
    >,
    pub PF_HasParamChangedObsolete: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            stateP: *const PF_State,
            param_index: PF_ParamIndex,
            changedPB: *mut PF_Boolean,
        ) -> PF_Err,
    >,
    pub PF_HaveInputsChangedOverTimeSpanObsolete: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            stateP: *const PF_State,
            startPT0: *const A_Time,
            durationPT0: *const A_Time,
            changedPB: *mut PF_Boolean,
        ) -> PF_Err,
    >,
    pub PF_IsIdenticalCheckout: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            param_index: PF_ParamIndex,
            what_time1: A_long,
            time_step1: A_long,
            time_scale1: A_u_long,
            what_time2: A_long,
            time_step2: A_long,
            time_scale2: A_u_long,
            identicalPB: *mut PF_Boolean,
        ) -> PF_Err,
    >,
    pub PF_FindKeyframeTime: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            param_index: PF_ParamIndex,
            what_time: A_long,
            time_scale: A_u_long,
            time_dir: PF_TimeDir,
            foundPB: *mut PF_Boolean,
            key_indexP0: *mut PF_KeyIndex,
            key_timeP0: *mut A_long,
            key_timescaleP0: *mut A_u_long,
        ) -> PF_Err,
    >,
    pub PF_GetKeyframeCount: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            param_index: PF_ParamIndex,
            key_countP: *mut PF_KeyIndex,
        ) -> PF_Err,
    >,
    pub PF_CheckoutKeyframe: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            param_index: PF_ParamIndex,
            key_index: PF_KeyIndex,
            key_timeP0: *mut A_long,
            key_timescaleP0: *mut A_u_long,
            paramP0: *mut PF_ParamDef,
        ) -> PF_Err,
    >,
    pub PF_CheckinKeyframe: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, paramP: *mut PF_ParamDef) -> PF_Err,
    >,
    pub PF_KeyIndexToTime: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            param_index: PF_ParamIndex,
            key_indexP: PF_KeyIndex,
            key_timeP: *mut A_long,
            key_timescaleP: *mut A_u_long,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PFAppSuite4 {
    pub PF_AppGetBgColor:
        ::std::option::Option<unsafe extern "C" fn(bg_colorP: *mut PF_App_Color) -> PF_Err>,
    pub PF_AppGetColor: ::std::option::Option<
        unsafe extern "C" fn(color_type: PF_App_ColorType, app_colorP: *mut PF_App_Color) -> PF_Err,
    >,
    pub PF_GetPersonalInfo:
        ::std::option::Option<unsafe extern "C" fn(ptiP: *mut PF_AppPersonalTextInfo) -> PF_Err>,
    pub PF_GetFontStyleSheet: ::std::option::Option<
        unsafe extern "C" fn(
            sheet: PF_FontStyleSheet,
            font_nameP0: *mut PF_FontName,
            font_numPS0: *mut A_short,
            sizePS0: *mut A_short,
            stylePS0: *mut A_short,
        ) -> PF_Err,
    >,
    pub PF_SetCursor: ::std::option::Option<unsafe extern "C" fn(cursor: PF_CursorType) -> PF_Err>,
    pub PF_IsRenderEngine:
        ::std::option::Option<unsafe extern "C" fn(render_enginePB: *mut PF_Boolean) -> PF_Err>,
    pub PF_AppColorPickerDialog: ::std::option::Option<
        unsafe extern "C" fn(
            dialog_titleZ0: *const A_char,
            sample_colorP: *const PF_PixelFloat,
            use_ws_to_monitor_xformB: PF_Boolean,
            new_colorP: *mut PF_PixelFloat,
        ) -> PF_Err,
    >,
    pub PF_GetMouse: ::std::option::Option<unsafe extern "C" fn(pointP: *mut PF_Point) -> PF_Err>,
    pub PF_InvalidateRect: ::std::option::Option<
        unsafe extern "C" fn(contextH: PF_ContextH, rectP0: *const PF_Rect) -> PF_Err,
    >,
    pub PF_ConvertLocalToGlobal: ::std::option::Option<
        unsafe extern "C" fn(localP: *const PF_Point, globalP: *mut PF_Point) -> PF_Err,
    >,
    pub PF_GetColorAtGlobalPoint: ::std::option::Option<
        unsafe extern "C" fn(
            globalP: *const PF_Point,
            eyeSize: A_short,
            mode: PF_EyeDropperSampleMode,
            outColorP: *mut PF_PixelFloat,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PFAppSuite5 {
    pub PF_AppGetBgColor:
        ::std::option::Option<unsafe extern "C" fn(bg_colorP: *mut PF_App_Color) -> PF_Err>,
    pub PF_AppGetColor: ::std::option::Option<
        unsafe extern "C" fn(color_type: PF_App_ColorType, app_colorP: *mut PF_App_Color) -> PF_Err,
    >,
    pub PF_AppGetLanguage:
        ::std::option::Option<unsafe extern "C" fn(lang_tagZ: *mut A_char) -> PF_Err>,
    pub PF_GetPersonalInfo:
        ::std::option::Option<unsafe extern "C" fn(ptiP: *mut PF_AppPersonalTextInfo) -> PF_Err>,
    pub PF_GetFontStyleSheet: ::std::option::Option<
        unsafe extern "C" fn(
            sheet: PF_FontStyleSheet,
            font_nameP0: *mut PF_FontName,
            font_numPS0: *mut A_short,
            sizePS0: *mut A_short,
            stylePS0: *mut A_short,
        ) -> PF_Err,
    >,
    pub PF_SetCursor: ::std::option::Option<unsafe extern "C" fn(cursor: PF_CursorType) -> PF_Err>,
    pub PF_IsRenderEngine:
        ::std::option::Option<unsafe extern "C" fn(render_enginePB: *mut PF_Boolean) -> PF_Err>,
    pub PF_AppColorPickerDialog: ::std::option::Option<
        unsafe extern "C" fn(
            dialog_titleZ0: *const A_char,
            sample_colorP: *const PF_PixelFloat,
            use_ws_to_monitor_xformB: PF_Boolean,
            new_colorP: *mut PF_PixelFloat,
        ) -> PF_Err,
    >,
    pub PF_GetMouse: ::std::option::Option<unsafe extern "C" fn(pointP: *mut PF_Point) -> PF_Err>,
    pub PF_InvalidateRect: ::std::option::Option<
        unsafe extern "C" fn(contextH: PF_ContextH, rectP0: *const PF_Rect) -> PF_Err,
    >,
    pub PF_ConvertLocalToGlobal: ::std::option::Option<
        unsafe extern "C" fn(localP: *const PF_Point, globalP: *mut PF_Point) -> PF_Err,
    >,
    pub PF_GetColorAtGlobalPoint: ::std::option::Option<
        unsafe extern "C" fn(
            globalP: *const PF_Point,
            eyeSize: A_short,
            mode: PF_EyeDropperSampleMode,
            outColorP: *mut PF_PixelFloat,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_EffectCustomUISuite1 {
    pub PF_GetDrawingReference: ::std::option::Option<
        unsafe extern "C" fn(
            effect_contextH: PF_ContextH,
            referenceP0: *mut DRAWBOT_DrawRef,
        ) -> PF_Err,
    >,
}
pub const PF_SuiteTool_NONE: _bindgen_ty_63 = 0;
pub const PF_SuiteTool_ARROW: _bindgen_ty_63 = 1;
pub const PF_SuiteTool_ROTATE: _bindgen_ty_63 = 2;
pub const PF_SuiteTool_SHAPE: _bindgen_ty_63 = 3;
pub const PF_SuiteTool_OBSOLETE: _bindgen_ty_63 = 4;
pub const PF_SuiteTool_PEN: _bindgen_ty_63 = 5;
pub const PF_SuiteTool_PAN: _bindgen_ty_63 = 6;
pub const PF_SuiteTool_HAND: _bindgen_ty_63 = 7;
pub const PF_SuiteTool_MAGNIFY: _bindgen_ty_63 = 8;
pub const PF_SuiteTool_ROUNDED_RECT: _bindgen_ty_63 = 9;
pub const PF_SuiteTool_POLYGON: _bindgen_ty_63 = 10;
pub const PF_SuiteTool_STAR: _bindgen_ty_63 = 11;
pub const PF_SuiteTool_PIN: _bindgen_ty_63 = 12;
pub const PF_SuiteTool_PIN_STARCH: _bindgen_ty_63 = 13;
pub const PF_SuiteTool_PIN_DEPTH: _bindgen_ty_63 = 14;
pub type _bindgen_ty_63 = ::std::os::raw::c_int;
pub type PF_SuiteTool = A_LegacyEnumType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_HelperSuite1 {
    pub PF_GetCurrentTool:
        ::std::option::Option<unsafe extern "C" fn(toolP: *mut PF_SuiteTool) -> PF_Err>,
}
pub const PF_ExtendedSuiteTool_NONE: _bindgen_ty_64 = 0;
pub const PF_ExtendedSuiteTool_ARROW: _bindgen_ty_64 = 1;
pub const PF_ExtendedSuiteTool_ROTATE: _bindgen_ty_64 = 2;
pub const PF_ExtendedSuiteTool_PEN_NORMAL: _bindgen_ty_64 = 3;
pub const PF_ExtendedSuiteTool_PEN_ADD_POINT: _bindgen_ty_64 = 4;
pub const PF_ExtendedSuiteTool_PEN_DELETE_POINT: _bindgen_ty_64 = 5;
pub const PF_ExtendedSuiteTool_PEN_CONVERT_POINT: _bindgen_ty_64 = 6;
pub const PF_ExtendedSuiteTool_RECT: _bindgen_ty_64 = 7;
pub const PF_ExtendedSuiteTool_OVAL: _bindgen_ty_64 = 8;
pub const PF_ExtendedSuiteTool_CAMERA_ORBIT_CAMERA: _bindgen_ty_64 = 9;
pub const PF_ExtendedSuiteTool_CAMERA_PAN_CAMERA: _bindgen_ty_64 = 10;
pub const PF_ExtendedSuiteTool_CAMERA_DOLLY_CAMERA: _bindgen_ty_64 = 11;
pub const PF_ExtendedSuiteTool_PAN_BEHIND: _bindgen_ty_64 = 12;
pub const PF_ExtendedSuiteTool_HAND: _bindgen_ty_64 = 13;
pub const PF_ExtendedSuiteTool_MAGNIFY: _bindgen_ty_64 = 14;
pub const PF_ExtendedSuiteTool_PAINTBRUSH: _bindgen_ty_64 = 15;
pub const PF_ExtendedSuiteTool_PENCIL: _bindgen_ty_64 = 16;
pub const PF_ExtendedSuiteTool_CLONE_STAMP: _bindgen_ty_64 = 17;
pub const PF_ExtendedSuiteTool_ERASER: _bindgen_ty_64 = 18;
pub const PF_ExtendedSuiteTool_TEXT: _bindgen_ty_64 = 19;
pub const PF_ExtendedSuiteTool_TEXT_VERTICAL: _bindgen_ty_64 = 20;
pub const PF_ExtendedSuiteTool_PIN: _bindgen_ty_64 = 21;
pub const PF_ExtendedSuiteTool_PIN_STARCH: _bindgen_ty_64 = 22;
pub const PF_ExtendedSuiteTool_PIN_DEPTH: _bindgen_ty_64 = 23;
pub const PF_ExtendedSuiteTool_ROUNDED_RECT: _bindgen_ty_64 = 24;
pub const PF_ExtendedSuiteTool_POLYGON: _bindgen_ty_64 = 25;
pub const PF_ExtendedSuiteTool_STAR: _bindgen_ty_64 = 26;
pub const PF_ExtendedSuiteTool_QUICKSELECT: _bindgen_ty_64 = 27;
pub const PF_ExtendedSuiteTool_CAMERA_MAYA: _bindgen_ty_64 = 28;
pub const PF_ExtendedSuiteTool_HAIRBRUSH: _bindgen_ty_64 = 29;
pub const PF_ExtendedSuiteTool_FEATHER: _bindgen_ty_64 = 30;
pub const PF_ExtendedSuiteTool_PIN_BEND: _bindgen_ty_64 = 31;
pub const PF_ExtendedSuiteTool_PIN_ADVANCED: _bindgen_ty_64 = 32;
pub const PF_ExtendedSuiteTool_CAMERA_ORBIT_CURSOR: _bindgen_ty_64 = 33;
pub const PF_ExtendedSuiteTool_CAMERA_ORBIT_SCENE: _bindgen_ty_64 = 34;
pub const PF_ExtendedSuiteTool_CAMERA_PAN_CURSOR: _bindgen_ty_64 = 35;
pub const PF_ExtendedSuiteTool_CAMERA_DOLLY_TOWARDS_CURSOR: _bindgen_ty_64 = 36;
pub const PF_ExtendedSuiteTool_CAMERA_DOLLY_TO_CURSOR: _bindgen_ty_64 = 37;
pub const PF_ExtendedSuiteTool_OBJECTSELECT: _bindgen_ty_64 = 38;
pub const PF_ExtendedSuiteTool_CUBE: _bindgen_ty_64 = 39;
pub const PF_ExtendedSuiteTool_SPHERE: _bindgen_ty_64 = 40;
pub const PF_ExtendedSuiteTool_PLANE: _bindgen_ty_64 = 41;
pub const PF_ExtendedSuiteTool_TORUS: _bindgen_ty_64 = 42;
pub const PF_ExtendedSuiteTool_CONE: _bindgen_ty_64 = 43;
pub const PF_ExtendedSuiteTool_CYLINDER: _bindgen_ty_64 = 44;
#[doc = " PF_HelperSuite2\n\nPF_ParseClipboard()\n\ncauses After Effects to parse the clipboard immediately"]
pub type _bindgen_ty_64 = ::std::os::raw::c_int;
pub type PF_ExtendedSuiteTool = A_LegacyEnumType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_HelperSuite2 {
    pub PF_ParseClipboard: ::std::option::Option<unsafe extern "C" fn() -> PF_Err>,
    pub PF_SetCurrentExtendedTool:
        ::std::option::Option<unsafe extern "C" fn(tool: PF_ExtendedSuiteTool) -> PF_Err>,
    pub PF_GetCurrentExtendedTool:
        ::std::option::Option<unsafe extern "C" fn(tool: *mut PF_ExtendedSuiteTool) -> PF_Err>,
}
pub const FIEL_Type_FRAME_RENDERED: _bindgen_ty_65 = 0;
pub const FIEL_Type_INTERLACED: _bindgen_ty_65 = 1;
pub const FIEL_Type_HALF_HEIGHT: _bindgen_ty_65 = 2;
pub const FIEL_Type_FIELD_DOUBLED: _bindgen_ty_65 = 3;
pub const FIEL_Type_UNSPECIFIED: _bindgen_ty_65 = 4;
pub type _bindgen_ty_65 = ::std::os::raw::c_int;
pub type FIEL_Type = u32;
pub const FIEL_Order_UPPER_FIRST: _bindgen_ty_66 = 0;
pub const FIEL_Order_LOWER_FIRST: _bindgen_ty_66 = 1;
pub type _bindgen_ty_66 = ::std::os::raw::c_int;
pub type FIEL_Order = u32;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct FIEL_Label {
    pub signature: u32,
    pub version: i16,
    pub type_: FIEL_Type,
    pub order: FIEL_Order,
    pub reserved: u32,
}
#[doc = " $$$ move to aegp.h"]
pub type PR_Handle = *mut *mut _Up_OpaqueMem;
pub type PR_FlatHandle = PR_Handle;
pub type PR_GlobalDataH = PR_Handle;
pub type PR_InstanceDataH = PR_Handle;
pub type PR_RenderDataH = PR_Handle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PR_GlobalContext {
    _unused: [u8; 0],
}
pub type PR_GlobalContextH = *mut *mut PR_GlobalContext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PR_InstanceContext {
    _unused: [u8; 0],
}
pub type PR_InstanceContextH = *mut *mut PR_InstanceContext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PR_RenderContext {
    _unused: [u8; 0],
}
pub type PR_RenderContextH = *mut *mut PR_RenderContext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PR_QueryContext {
    _unused: [u8; 0],
}
pub type PR_QueryContextH = *mut *mut PR_QueryContext;
pub type PF_EffectWorldPtr = *mut PF_LayerDef;
#[doc = " in data is passed to every pr entry function"]
pub type PR_MessageFunc =
    ::std::option::Option<unsafe extern "C" fn(err_number: A_Err, msgA: *const A_char)>;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct PR_InData {
    pub msg_func: PR_MessageFunc,
    pub pica_basicP: *const SPBasicSuite,
    pub aegp_plug_id: A_long,
    pub aegp_refconPV: *mut ::std::os::raw::c_void,
}
pub const PR_DialogResult_NO_CHANGE: _bindgen_ty_67 = 0;
pub const PR_DialogResult_CHANGE_MADE: _bindgen_ty_67 = 1;
#[doc = " response from dialog box function"]
pub type _bindgen_ty_67 = ::std::os::raw::c_int;
pub type PR_DialogResult = A_long;
pub const PR_QueryType_NONE: _bindgen_ty_68 = 0;
pub const PR_QueryType_TRANSFORM: _bindgen_ty_68 = 1;
pub const PR_QueryType_INTERACTIVE_WINDOW_DISPOSE: _bindgen_ty_68 = 2;
pub const PR_QueryType_INTERACTIVE_WINDOW_CLEAR: _bindgen_ty_68 = 3;
pub const PR_QueryType_INTERACTIVE_WINDOW_FROZEN_PROXY: _bindgen_ty_68 = 4;
pub const PR_QueryType_INTERACTIVE_SWAP_BUFFER: _bindgen_ty_68 = 5;
pub const PR_QueryType_INTERACTIVE_DRAW_PROCS: _bindgen_ty_68 = 6;
pub const PR_QueryType_PREPARE_FOR_LINE_DRAWING: _bindgen_ty_68 = 7;
pub const PR_QueryType_UNPREPARE_FOR_LINE_DRAWING: _bindgen_ty_68 = 8;
pub const PR_QueryType_GET_CURRENT_CONTEXT_SAFE_FOR_LINE_DRAWING: _bindgen_ty_68 = 9;
pub const PR_QueryType_GET_ARTISAN_QUALITY: _bindgen_ty_68 = 10;
#[doc = " The types of queries that will be made.\n"]
pub type _bindgen_ty_68 = ::std::os::raw::c_int;
pub type PR_QueryType = A_u_long;
pub const PR_ArtisanFeature_NONE: _bindgen_ty_69 = 0;
pub type _bindgen_ty_69 = ::std::os::raw::c_int;
pub type PR_ArtisanFeature_Flags = A_long;
pub const PR_InstanceFlags_NONE: _bindgen_ty_70 = 0;
pub const PR_InstanceFlags_DUPLICATE: _bindgen_ty_70 = 1;
#[doc = " PR_InstanceSetupFunc flags"]
pub type _bindgen_ty_70 = ::std::os::raw::c_int;
pub type PR_InstanceFlags = A_u_long;
#[doc = " called after main. This happens just once, after the plugin is loaded.\n The global data is common across all instances of the plugin"]
pub type PR_GlobalSetupFunc = ::std::option::Option<
    unsafe extern "C" fn(
        in_dataP: *const PR_InData,
        global_contextH: PR_GlobalContextH,
        global_dataPH: *mut PR_GlobalDataH,
    ) -> A_Err,
>;
#[doc = " dispose of the global data"]
pub type PR_GlobalSetdownFunc = ::std::option::Option<
    unsafe extern "C" fn(
        in_dataP: *const PR_InData,
        global_contextH: PR_GlobalContextH,
        global_dataH: PR_GlobalDataH,
    ) -> A_Err,
>;
#[doc = " display an about box"]
pub type PR_GlobalDoAboutFunc = ::std::option::Option<
    unsafe extern "C" fn(
        in_dataP: *const PR_InData,
        global_contextH: PR_GlobalContextH,
        global_dataH: PR_GlobalDataH,
    ) -> A_Err,
>;
#[doc = " Analogous to an Effect's Sequence setup call. This sets up the renderer's\n instance data."]
pub type PR_InstanceSetupFunc = ::std::option::Option<
    unsafe extern "C" fn(
        in_dataP: *const PR_InData,
        global_contextH: PR_GlobalContextH,
        instance_contextH: PR_InstanceContextH,
        global_dataH: PR_GlobalDataH,
        flags: PR_InstanceFlags,
        flat_dataH0: PR_FlatHandle,
        instance_dataPH: *mut PR_InstanceDataH,
    ) -> A_Err,
>;
#[doc = " dispose of the instance data"]
pub type PR_InstanceSetdownFunc = ::std::option::Option<
    unsafe extern "C" fn(
        in_dataP: *const PR_InData,
        global_contextH: PR_GlobalContextH,
        instance_contextH: PR_InstanceContextH,
        global_dataH: PR_GlobalDataH,
        instance_dataH: PR_InstanceDataH,
    ) -> A_Err,
>;
#[doc = " flatten your data in preparation to being written to disk.\n Make sure its OS independent"]
pub type PR_FlattenInstanceFunc = ::std::option::Option<
    unsafe extern "C" fn(
        in_dataP: *const PR_InData,
        global_contextH: PR_GlobalContextH,
        instance_contextH: PR_InstanceContextH,
        global_dataH: PR_GlobalDataH,
        instance_dataH: PR_InstanceDataH,
        flatH: *mut PR_FlatHandle,
    ) -> A_Err,
>;
#[doc = " if the renderer has parameters, this is where they get set or changed."]
pub type PR_DoInstanceDialogFunc = ::std::option::Option<
    unsafe extern "C" fn(
        in_dataP: *const PR_InData,
        global_contextH: PR_GlobalContextH,
        instance_contextH: PR_InstanceContextH,
        global_dataH: PR_GlobalDataH,
        instance_dataH: PR_InstanceDataH,
        resultP: *mut PR_DialogResult,
    ) -> A_Err,
>;
#[doc = " allocate render data if needed"]
pub type PR_FrameSetupFunc = ::std::option::Option<
    unsafe extern "C" fn(
        in_dataP: *const PR_InData,
        global_contextH: PR_GlobalContextH,
        instance_contextH: PR_InstanceContextH,
        render_contextH: PR_RenderContextH,
        global_dataH: PR_GlobalDataH,
        instance_dataH: PR_InstanceDataH,
        render_dataPH: *mut PR_RenderDataH,
    ) -> A_Err,
>;
#[doc = " deallocate render data"]
pub type PR_FrameSetdownFunc = ::std::option::Option<
    unsafe extern "C" fn(
        in_dataP: *const PR_InData,
        global_contextH: PR_GlobalContextH,
        instance_contextH: PR_InstanceContextH,
        render_contextH: PR_RenderContextH,
        global_dataH: PR_GlobalDataH,
        instance_dataH: PR_InstanceDataH,
        render_dataH: PR_RenderDataH,
    ) -> A_Err,
>;
#[doc = " the main drawing routine"]
pub type PR_RenderFunc = ::std::option::Option<
    unsafe extern "C" fn(
        in_dataP: *const PR_InData,
        global_contextH: PR_GlobalContextH,
        instance_contextH: PR_InstanceContextH,
        render_contextH: PR_RenderContextH,
        global_dataH: PR_GlobalDataH,
        instance_dataH: PR_InstanceDataH,
        render_dataH: PR_RenderDataH,
    ) -> A_Err,
>;
#[doc = " AE will need to have the artisan process data on its behalf such as\n projecting points to the screen, transforming axis, etc. This routine will handle\n it all"]
pub type PR_QueryFunc = ::std::option::Option<
    unsafe extern "C" fn(
        in_dataP: *const PR_InData,
        global_contextH: PR_GlobalContextH,
        instance_contextH: PR_InstanceContextH,
        query_contextH: PR_QueryContextH,
        query_type: PR_QueryType,
        global_data: PR_GlobalDataH,
        instance_dataH: PR_InstanceDataH,
    ) -> A_Err,
>;
#[doc = " main fills this in, just once at plugin load time\n These are the entry points that AE calls to use an artisan."]
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct PR_ArtisanEntryPoints {
    pub global_setup_func0: PR_GlobalSetupFunc,
    pub global_setdown_func0: PR_GlobalSetdownFunc,
    pub global_do_about_func0: PR_GlobalDoAboutFunc,
    pub setup_instance_func0: PR_InstanceSetupFunc,
    pub setdown_instance_func0: PR_InstanceSetdownFunc,
    pub flatten_instance_func0: PR_FlattenInstanceFunc,
    pub do_instance_dialog_func0: PR_DoInstanceDialogFunc,
    pub frame_setup_func0: PR_FrameSetupFunc,
    pub render_func: PR_RenderFunc,
    pub frame_setdown_func0: PR_FrameSetdownFunc,
    pub query_func0: PR_QueryFunc,
}
#[doc = " line drawing routines for interactive artisans"]
pub type PR_Draw_MoveToFunc = ::std::option::Option<unsafe extern "C" fn(x: A_FpLong, y: A_FpLong)>;
pub type PR_Draw_LineToFunc = ::std::option::Option<unsafe extern "C" fn(x: A_FpLong, y: A_FpLong)>;
pub type PR_Draw_LineRelFunc =
    ::std::option::Option<unsafe extern "C" fn(dx: A_FpLong, dy: A_FpLong)>;
pub type PR_Draw_ForeColorFunc =
    ::std::option::Option<unsafe extern "C" fn(fore_color: *const A_Color)>;
pub type PR_Draw_BackColorFunc =
    ::std::option::Option<unsafe extern "C" fn(fore_color: *const A_Color)>;
pub type PR_Draw_FrameRectFunc =
    ::std::option::Option<unsafe extern "C" fn(rectPR: *const A_FloatRect)>;
pub type PR_Draw_PaintRectFunc =
    ::std::option::Option<unsafe extern "C" fn(rectPR: *const A_FloatRect)>;
pub type PR_Draw_FrameOvalFunc =
    ::std::option::Option<unsafe extern "C" fn(rectPR: *const A_FloatRect)>;
pub type PR_Draw_PaintOvalFunc =
    ::std::option::Option<unsafe extern "C" fn(rectPR: *const A_FloatRect)>;
pub type PR_Draw_InvertRectFunc =
    ::std::option::Option<unsafe extern "C" fn(rectPR: *const A_FloatRect)>;
pub type PR_Draw_SetClipFunc =
    ::std::option::Option<unsafe extern "C" fn(rectPR: *const A_FloatRect, invertB: A_Boolean)>;
pub type PR_Draw_PenNormal = ::std::option::Option<unsafe extern "C" fn()>;
pub type PR_Draw_PenSize =
    ::std::option::Option<unsafe extern "C" fn(widthS: A_FpLong, heightS: A_FpLong)>;
pub type PR_Draw_PenPat = ::std::option::Option<unsafe extern "C" fn(pattern: A_u_char)>;
pub type PR_Draw_Invert = ::std::option::Option<unsafe extern "C" fn(arg1: A_Boolean)>;
pub type PR_CacheIconFunc = ::std::option::Option<unsafe extern "C" fn(iconP: PF_EffectWorldPtr)>;
pub type PR_DrawCachedIconFunc = ::std::option::Option<unsafe extern "C" fn(x: A_long, y: A_long)>;
pub type PR_DrawStringFunc = ::std::option::Option<
    unsafe extern "C" fn(
        nameZ: *const A_UTF16Char,
        style: PF_FontStyleSheet,
        fore_colorP: *const A_Color,
        shadow_colorP: *const A_Color,
        originP: *const A_FloatPoint,
        shadow_offsetP: *const A_FloatPoint,
    ),
>;
pub type PR_StrokePolyFunc =
    ::std::option::Option<unsafe extern "C" fn(nptsL: A_long, ptsA: *mut A_FloatPoint)>;
pub type PR_PaintPolyFunc =
    ::std::option::Option<unsafe extern "C" fn(nptsL: A_long, ptsA: *mut A_FloatPoint)>;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct PR_InteractiveDrawProcs {
    pub move_to_func: PR_Draw_MoveToFunc,
    pub line_to_func: PR_Draw_LineToFunc,
    pub line_rel_func: PR_Draw_LineRelFunc,
    pub fore_color_func: PR_Draw_ForeColorFunc,
    pub back_color_func: PR_Draw_BackColorFunc,
    pub frame_rect_func: PR_Draw_FrameRectFunc,
    pub paint_rect_func: PR_Draw_PaintRectFunc,
    pub frame_oval_func: PR_Draw_FrameOvalFunc,
    pub paint_oval_func: PR_Draw_PaintOvalFunc,
    pub invert_rect_func: PR_Draw_InvertRectFunc,
    pub set_clip_func: PR_Draw_SetClipFunc,
    pub pen_normal_func: PR_Draw_PenNormal,
    pub pen_size_func: PR_Draw_PenSize,
    pub pen_pat_func: PR_Draw_PenPat,
    pub invert_func: PR_Draw_Invert,
    pub cache_icon_func: PR_CacheIconFunc,
    pub draw_cached_icon_func: PR_DrawCachedIconFunc,
    pub draw_string_func: PR_DrawStringFunc,
    pub stroke_poly_func: PR_StrokePolyFunc,
    pub paint_poly_func: PR_PaintPolyFunc,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct PF_MaskSuite1 {
    pub PF_MaskWorldWithPath: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            mask: *mut PF_PathOutlinePtr,
            feather_x: PF_FpLong,
            feather_y: PF_FpLong,
            invert: PF_Boolean,
            opacity: PF_FpLong,
            quality: PF_Quality,
            worldP: *mut PF_EffectWorld,
            bboxPR0: *mut PF_Rect,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEIO_FileExt {
    pub pad: A_char,
    pub extension: [A_char; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_MarkerVal {
    _unused: [u8; 0],
}
pub type AEGP_ConstMarkerValP = *const _AEGP_MarkerVal;
#[doc = " in data is passed to every function block function"]
pub type AEIO_MessageFunc =
    ::std::option::Option<unsafe extern "C" fn(err_number: A_Err, msgA: *const A_char)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEIO_InData {
    pub msg_func: AEIO_MessageFunc,
    pub pica_basicP: *const SPBasicSuite,
    pub aegp_plug_id: A_long,
    pub aegp_refconPV: *mut ::std::os::raw::c_void,
}
pub type AEIO_BasicData = AEIO_InData;
pub const AEIO_Err_UNSUPPORTED_CALLBACK: _bindgen_ty_71 = 9985;
pub const AEIO_Err_UNIMPLEMENTED: _bindgen_ty_71 = 9986;
pub const AEIO_Err_UNSUPPORTED_FILETYPE: _bindgen_ty_71 = 9987;
pub const AEIO_Err_INAPPROPRIATE_ACTION: _bindgen_ty_71 = 9988;
pub const AEIO_Err_BAD_BMWORLD: _bindgen_ty_71 = 9989;
pub const AEIO_Err_INCONSISTENT_PARAMETERS: _bindgen_ty_71 = 9990;
pub const AEIO_Err_INVALID_TIME: _bindgen_ty_71 = 9991;
pub const AEIO_Err_USE_DFLT_CALLBACK: _bindgen_ty_71 = 9992;
pub const AEIO_Err_USER_CANCEL: _bindgen_ty_71 = 9993;
pub const AEIO_Err_DISK_FULL: _bindgen_ty_71 = 9994;
pub const AEIO_Err_INITIALIZE_FAILED: _bindgen_ty_71 = 9995;
pub const AEIO_Err_BAD_FILENAME: _bindgen_ty_71 = 9996;
pub const AEIO_Err_PARSING: _bindgen_ty_71 = 9997;
pub const AEIO_Err_NOT_SEQUENCE: _bindgen_ty_71 = 9998;
pub const AEIO_Err_USE_DFLT_GETSIZES_FREESPACE: _bindgen_ty_71 = 9999;
pub type _bindgen_ty_71 = ::std::os::raw::c_int;
pub type AEIO_Handle = *mut *mut _Up_OpaqueMem;
pub const AEIO_DFlags_NONE: _bindgen_ty_72 = 0;
pub const AEIO_DFlags_DID_DEINT: _bindgen_ty_72 = 2;
pub const AEIO_DFlags_DID_ALPHA_CONV: _bindgen_ty_72 = 4;
pub type _bindgen_ty_72 = ::std::os::raw::c_int;
pub type AEIO_DrawingFlags = A_long;
pub const AEIO_Qual_LOW: _bindgen_ty_73 = 0;
pub const AEIO_Qual_HIGH: _bindgen_ty_73 = 1;
pub type _bindgen_ty_73 = ::std::os::raw::c_int;
pub type AEIO_Quality = A_short;
pub const AEIO_TimeDir_FORWARD: _bindgen_ty_74 = 0;
pub const AEIO_TimeDir_BACKWARD: _bindgen_ty_74 = 1;
pub const AEIO_TimeDir_INCLUDE_BASE_TIME: _bindgen_ty_74 = 4096;
pub type _bindgen_ty_74 = ::std::os::raw::c_int;
pub type AEIO_TimeDir = A_short;
pub const AEIO_IdleFlag_NONE: _bindgen_ty_75 = 0;
pub const AEIO_IdleFlag_PURGED_MEM: _bindgen_ty_75 = 1;
pub const AEIO_IdleFlag_ADD_YOUR_OWN: _bindgen_ty_75 = 2;
pub type _bindgen_ty_75 = ::std::os::raw::c_int;
pub type AEIO_IdleFlags = A_long;
pub const AEIO_SndQuality_APPROX: _bindgen_ty_76 = -1;
pub const AEIO_SndQuality_LO: _bindgen_ty_76 = 0;
pub const AEIO_SndQuality_HI: _bindgen_ty_76 = 1;
pub type _bindgen_ty_76 = ::std::os::raw::c_int;
pub type AEIO_SndQuality = A_long;
pub const AEIO_E_UNSIGNED_PCM: _bindgen_ty_77 = 1;
pub const AEIO_E_SIGNED_PCM: _bindgen_ty_77 = 2;
pub const AEIO_E_SIGNED_FLOAT: _bindgen_ty_77 = 3;
pub type _bindgen_ty_77 = ::std::os::raw::c_int;
pub type AEIO_SndEncoding = A_short;
pub const AEIO_SS_1: _bindgen_ty_78 = 1;
pub const AEIO_SS_2: _bindgen_ty_78 = 2;
pub const AEIO_SS_4: _bindgen_ty_78 = 4;
pub type _bindgen_ty_78 = ::std::os::raw::c_int;
pub type AEIO_SndSampleSize = A_short;
pub const AEIO_SndChannels_MONO: _bindgen_ty_79 = 1;
pub const AEIO_SndChannels_STEREO: _bindgen_ty_79 = 2;
pub type _bindgen_ty_79 = ::std::os::raw::c_int;
pub type AEIO_SndChannels = A_short;
pub const AEIO_Marker_URL_FLIP: _bindgen_ty_80 = 0;
pub const AEIO_Marker_CHAPTER: _bindgen_ty_80 = 1;
pub const AEIO_Marker_HOTSPOT: _bindgen_ty_80 = 2;
pub const AEIO_Marker_NONE: _bindgen_ty_80 = 3;
pub type _bindgen_ty_80 = ::std::os::raw::c_int;
pub type AEIO_MarkerType = A_u_char;
pub const AEIO_Field_FRAME: _bindgen_ty_81 = 0;
pub const AEIO_Field_UPPER: _bindgen_ty_81 = 1;
pub const AEIO_Field_LOWER: _bindgen_ty_81 = 2;
pub type _bindgen_ty_81 = ::std::os::raw::c_int;
pub type AEIO_Field = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEIO_Marker {
    pub chapterZ0: *const A_char,
    pub commentZ0: *const A_char,
    pub urlZ0: *const A_char,
    pub url_frame_targetZ0: *const A_char,
}
pub const AEIO_FrameBlend_NONE: _bindgen_ty_82 = 0;
pub const AEIO_FrameBlend_LOW: _bindgen_ty_82 = 1;
pub const AEIO_FrameBlend_HIGH: _bindgen_ty_82 = 2;
pub type _bindgen_ty_82 = ::std::os::raw::c_int;
pub type AEIO_FrameBlend = A_char;
pub const AEIO_LFlag_ALFA: _bindgen_ty_83 = 1;
pub const AEIO_LFlag_FIELDS: _bindgen_ty_83 = 2;
pub const AEIO_LFlag_SIGNATURE: _bindgen_ty_83 = 4;
pub type _bindgen_ty_83 = ::std::os::raw::c_int;
pub type AEIO_LabelFlags = A_long;
pub const AEIO_InputDepth_1: _bindgen_ty_84 = 1;
pub const AEIO_InputDepth_2: _bindgen_ty_84 = 2;
pub const AEIO_InputDepth_4: _bindgen_ty_84 = 4;
pub const AEIO_InputDepth_8: _bindgen_ty_84 = 8;
pub const AEIO_InputDepth_16: _bindgen_ty_84 = 16;
pub const AEIO_InputDepth_24: _bindgen_ty_84 = 24;
pub const AEIO_InputDepth_30: _bindgen_ty_84 = 30;
pub const AEIO_InputDepth_32: _bindgen_ty_84 = 32;
pub const AEIO_InputDepth_GRAY_2: _bindgen_ty_84 = 34;
pub const AEIO_InputDepth_GRAY_4: _bindgen_ty_84 = 36;
pub const AEIO_InputDepth_GRAY_8: _bindgen_ty_84 = 40;
pub const AEIO_InputDepth_48: _bindgen_ty_84 = 48;
pub const AEIO_InputDepth_64: _bindgen_ty_84 = 64;
pub const AEIO_InputDepth_96: _bindgen_ty_84 = 96;
pub const AEIO_InputDepth_128: _bindgen_ty_84 = 128;
pub const AEIO_InputDepth_GRAY_16: _bindgen_ty_84 = -16;
pub const AEIO_InputDepth_GRAY_32: _bindgen_ty_84 = -32;
pub type _bindgen_ty_84 = ::std::os::raw::c_int;
pub type AEIO_InputDepth = A_long;
pub const AEIO_SupportedDepthFlags_NONE: _bindgen_ty_85 = 0;
pub const AEIO_SupportedDepthFlags_DEPTH_1: _bindgen_ty_85 = 2;
pub const AEIO_SupportedDepthFlags_DEPTH_2: _bindgen_ty_85 = 4;
pub const AEIO_SupportedDepthFlags_DEPTH_4: _bindgen_ty_85 = 8;
pub const AEIO_SupportedDepthFlags_DEPTH_8: _bindgen_ty_85 = 16;
pub const AEIO_SupportedDepthFlags_DEPTH_16: _bindgen_ty_85 = 32;
pub const AEIO_SupportedDepthFlags_DEPTH_24: _bindgen_ty_85 = 64;
pub const AEIO_SupportedDepthFlags_DEPTH_32: _bindgen_ty_85 = 128;
pub const AEIO_SupportedDepthFlags_DEPTH_GRAY_2: _bindgen_ty_85 = 256;
pub const AEIO_SupportedDepthFlags_DEPTH_GRAY_4: _bindgen_ty_85 = 512;
pub const AEIO_SupportedDepthFlags_DEPTH_GRAY_8: _bindgen_ty_85 = 1024;
pub const AEIO_SupportedDepthFlags_DEPTH_48: _bindgen_ty_85 = 2048;
pub const AEIO_SupportedDepthFlags_DEPTH_64: _bindgen_ty_85 = 4096;
pub const AEIO_SupportedDepthFlags_DEPTH_GRAY_16: _bindgen_ty_85 = 8192;
pub const AEIO_SupportedDepthFlags_DEPTH_96: _bindgen_ty_85 = 16384;
pub const AEIO_SupportedDepthFlags_DEPTH_128: _bindgen_ty_85 = 32768;
pub const AEIO_SupportedDepthFlags_LAST: _bindgen_ty_85 = 65536;
pub type _bindgen_ty_85 = ::std::os::raw::c_int;
pub type AEIO_SupportedDepthFlags = A_long;
pub const AEIO_Phase_NO_PULLDOWN: _bindgen_ty_86 = 0;
pub const AEIO_Phase_WSSWW: _bindgen_ty_86 = 1;
pub const AEIO_Phase_SSWWW: _bindgen_ty_86 = 2;
pub const AEIO_Phase_SWWWS: _bindgen_ty_86 = 3;
pub const AEIO_Phase_WWWSS: _bindgen_ty_86 = 4;
pub const AEIO_Phase_WWSSW: _bindgen_ty_86 = 5;
pub type _bindgen_ty_86 = ::std::os::raw::c_int;
pub type AEIO_Pulldown = A_long;
pub type AEIO_FileType = A_long;
pub type AEIO_Creator = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PFILE_FileKind {
    pub type_: AEIO_FileType,
    pub creator: AEIO_Creator,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AEIO_FileKind {
    pub mac: PFILE_FileKind,
    pub ext: AEIO_FileExt,
    pub scrap: A_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEIO_Verbiage {
    pub name: [A_char; 32usize],
    pub type_: [A_char; 32usize],
    pub sub_type: [A_char; 128usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEIO_SeqSpec {
    _unused: [u8; 0],
}
pub type AEIO_InSpecH = *mut *mut AEIO_SeqSpec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEIO_OutSpec {
    _unused: [u8; 0],
}
pub type AEIO_OutSpecH = *mut *mut AEIO_OutSpec;
pub type AEIO_ModuleSignature = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEIO_RationalScale {
    pub x: A_Ratio,
    pub y: A_Ratio,
}
pub const AEIO_AlphaPremul: _bindgen_ty_87 = 1;
pub const AEIO_AlphaInverted: _bindgen_ty_87 = 2;
pub type _bindgen_ty_87 = ::std::os::raw::c_int;
pub type AEIO_AlphaFlags = A_u_long;
pub const AEIO_Alpha_STRAIGHT: _bindgen_ty_88 = 0;
pub const AEIO_Alpha_PREMUL: _bindgen_ty_88 = 1;
pub const AEIO_Alpha_IGNORE: _bindgen_ty_88 = 2;
pub const AEIO_Alpha_NONE: _bindgen_ty_88 = 3;
pub type _bindgen_ty_88 = ::std::os::raw::c_int;
pub type AEIO_AlphaType = A_u_char;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct AEIO_AlphaLabel {
    pub version: A_short,
    pub flags: AEIO_AlphaFlags,
    pub red: A_u_char,
    pub green: A_u_char,
    pub blue: A_u_char,
    pub alpha: AEIO_AlphaType,
}
pub type AEIO_AbortProc =
    ::std::option::Option<unsafe extern "C" fn(refcon: *mut ::std::os::raw::c_void) -> A_Err>;
pub type AEIO_ProgressProc = ::std::option::Option<
    unsafe extern "C" fn(
        refcon: *mut ::std::os::raw::c_void,
        count: A_long,
        total: A_long,
    ) -> A_Err,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEIO_InterruptFuncs {
    pub refcon: *mut ::std::os::raw::c_void,
    pub abort0: AEIO_AbortProc,
    pub progress0: AEIO_ProgressProc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEIO_DrawFramePB {
    pub qual: AEIO_Quality,
    pub alpha_label: AEIO_AlphaLabel,
    pub field_request: AEIO_Field,
    pub rs: AEIO_RationalScale,
    pub tr: A_Time,
    pub duration: A_Time,
    pub time_filter: AEIO_FrameBlend,
    pub required_region0: A_LRect,
    pub inter: AEIO_InterruptFuncs,
}
pub const AEIO_RenderMarkerFlag_NONE: _bindgen_ty_89 = 0;
pub const AEIO_RenderMarkerFlag_COMP: _bindgen_ty_89 = 1;
pub type _bindgen_ty_89 = ::std::os::raw::c_int;
pub type AEIO_RenderMarkerFlag = A_long;
pub const AEIO_MFlag_NONE: _bindgen_ty_90 = 0;
pub const AEIO_MFlag_INPUT: _bindgen_ty_90 = 1;
pub const AEIO_MFlag_OUTPUT: _bindgen_ty_90 = 2;
pub const AEIO_MFlag_FILE: _bindgen_ty_90 = 4;
pub const AEIO_MFlag_STILL: _bindgen_ty_90 = 8;
pub const AEIO_MFlag_VIDEO: _bindgen_ty_90 = 16;
pub const AEIO_MFlag_AUDIO: _bindgen_ty_90 = 32;
pub const AEIO_MFlag_NO_TIME: _bindgen_ty_90 = 64;
pub const AEIO_MFlag_INTERACTIVE_GET: _bindgen_ty_90 = 128;
pub const AEIO_MFlag_INTERACTIVE_PUT: _bindgen_ty_90 = 256;
pub const AEIO_MFlag_CANT_CLIP: _bindgen_ty_90 = 512;
pub const AEIO_MFlag_MUST_INTERACT_PUT: _bindgen_ty_90 = 1024;
pub const AEIO_MFlag_CANT_SOUND_INTERLEAVE: _bindgen_ty_90 = 2048;
pub const AEIO_MFlag_CAN_ADD_FRAMES_NON_LINEAR: _bindgen_ty_90 = 4096;
pub const AEIO_MFlag_HOST_DEPTH_DIALOG: _bindgen_ty_90 = 8192;
pub const AEIO_MFlag_HOST_FRAME_START_DIALOG: _bindgen_ty_90 = 16384;
pub const AEIO_MFlag_RESERVED1: _bindgen_ty_90 = 32768;
pub const AEIO_MFlag_NO_OPTIONS: _bindgen_ty_90 = 65536;
pub const AEIO_MFlag_RESERVED2: _bindgen_ty_90 = 131072;
pub const AEIO_MFlag_RESERVED3: _bindgen_ty_90 = 262144;
pub const AEIO_MFlag_NO_PIXELS: _bindgen_ty_90 = 524288;
pub const AEIO_MFlag_SEQUENCE_OPTIONS_OK: _bindgen_ty_90 = 1048576;
pub const AEIO_MFlag_INPUT_OPTIONS: _bindgen_ty_90 = 2097152;
pub const AEIO_MFlag_HSF_AWARE: _bindgen_ty_90 = 4194304;
pub const AEIO_MFlag_HAS_LAYERS: _bindgen_ty_90 = 8388608;
pub const AEIO_MFlag_SCRAP: _bindgen_ty_90 = 16777216;
pub const AEIO_MFlag_NO_UI: _bindgen_ty_90 = 33554432;
pub const AEIO_MFlag_SEQ_OPTIONS_DLG: _bindgen_ty_90 = 67108864;
pub const AEIO_MFlag_HAS_AUX_DATA: _bindgen_ty_90 = 134217728;
pub const AEIO_MFlag_HAS_META_DATA: _bindgen_ty_90 = 268435456;
pub const AEIO_MFlag_CAN_DO_MARKERS: _bindgen_ty_90 = 536870912;
pub const AEIO_MFlag_CAN_DRAW_DEEP: _bindgen_ty_90 = 1073741824;
pub const AEIO_MFlag_RESERVED4: _bindgen_ty_90 = -2147483648;
#[doc = "\n PUBLIC ///////////////////////////////////\n"]
pub type _bindgen_ty_90 = ::std::os::raw::c_int;
pub type AEIO_ModuleFlags = A_u_long;
pub const AEIO_MFlag2_NONE: _bindgen_ty_91 = 0;
pub const AEIO_MFlag2_AUDIO_OPTIONS: _bindgen_ty_91 = 1;
pub const AEIO_MFlag2_RESERVED1: _bindgen_ty_91 = 2;
pub const AEIO_MFlag2_SEND_ADDMARKER_BEFORE_ADDFRAME: _bindgen_ty_91 = 4;
pub const AEIO_MFlag2_CAN_DO_MARKERS_2: _bindgen_ty_91 = 8;
pub const AEIO_MFlag2_CAN_DRAW_FLOAT: _bindgen_ty_91 = 16;
pub const AEIO_MFlag2_RESERVED2: _bindgen_ty_91 = 32;
pub const AEIO_MFlag2_CAN_DO_AUDIO_32: _bindgen_ty_91 = 64;
pub const AEIO_MFlag2_RESERVED3: _bindgen_ty_91 = 128;
pub const AEIO_MFlag2_SUPPORTS_ICC_PROFILES: _bindgen_ty_91 = 256;
pub const AEIO_MFlag2_CAN_DO_MARKERS_3: _bindgen_ty_91 = 512;
pub const AEIO_MFlag2_SEND_ADDMARKER_BEFORE_STARTADDING: _bindgen_ty_91 = 1024;
pub const AEIO_MFlag2_RESERVED4: _bindgen_ty_91 = 2048;
pub const AEIO_MFlag2_USES_QUICKTIME: _bindgen_ty_91 = 4096;
pub const AEIO_MFlag2_RESERVED5: _bindgen_ty_91 = 8192;
pub const AEIO_MFlag2_RESERVED6: _bindgen_ty_91 = 16384;
pub const AEIO_MFlag2_RESERVED7: _bindgen_ty_91 = 32768;
pub const AEIO_MFlag2_RESERVED8: _bindgen_ty_91 = 65536;
pub const AEIO_MFlag2_RESERVED9: _bindgen_ty_91 = 131072;
pub const AEIO_MFlag2_RESERVED10: _bindgen_ty_91 = 262144;
pub type _bindgen_ty_91 = ::std::os::raw::c_int;
pub type AEIO_ModuleFlags2 = A_u_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEIO_AuxExt {
    pub extension: [A_char; 4usize],
    pub type_: A_long,
    pub creator: A_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AEIO_ModuleInfo {
    pub sig: AEIO_ModuleSignature,
    pub name: [A_char; 32usize],
    pub flags: AEIO_ModuleFlags,
    pub flags2: AEIO_ModuleFlags2,
    pub max_width: A_long,
    pub max_height: A_long,
    pub num_filetypes: A_short,
    pub num_extensions: A_short,
    pub num_clips: A_short,
    pub pad: A_short,
    pub create_kind: PFILE_FileKind,
    pub create_ext: AEIO_FileExt,
    pub read_kinds: [AEIO_FileKind; 16usize],
    pub num_aux_extensionsS: A_short,
    pub aux_ext: [AEIO_AuxExt; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEIO_OptionsCBInfo {
    pub o_flags: AEIO_SupportedDepthFlags,
    pub out_specH: AEIO_OutSpecH,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEIO_DrawSparseFramePB {
    pub qual: AEIO_Quality,
    pub rs: AEIO_RationalScale,
    pub tr: A_Time,
    pub duration: A_Time,
    pub required_region: A_LRect,
    pub inter: AEIO_InterruptFuncs,
}
#[doc = "   plugin entry points  *****************************\n the main routine of each plugin fills in these function pointers\n AE will call them as appropriate"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEIO_FunctionBlock4 {
    pub AEIO_InitInSpecFromFile: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            file_pathZ: *const A_UTF16Char,
            inH: AEIO_InSpecH,
        ) -> A_Err,
    >,
    pub AEIO_InitInSpecInteractive: ::std::option::Option<
        unsafe extern "C" fn(basic_dataP: *mut AEIO_BasicData, inH: AEIO_InSpecH) -> A_Err,
    >,
    pub AEIO_DisposeInSpec: ::std::option::Option<
        unsafe extern "C" fn(basic_dataP: *mut AEIO_BasicData, inH: AEIO_InSpecH) -> A_Err,
    >,
    pub AEIO_FlattenOptions: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            inH: AEIO_InSpecH,
            flat_optionsPH: *mut AEIO_Handle,
        ) -> A_Err,
    >,
    pub AEIO_InflateOptions: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            inH: AEIO_InSpecH,
            flat_optionsH: AEIO_Handle,
        ) -> A_Err,
    >,
    pub AEIO_SynchInSpec: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            inH: AEIO_InSpecH,
            changed0: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEIO_GetActiveExtent: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            inH: AEIO_InSpecH,
            tr: *const A_Time,
            extent: *mut A_LRect,
        ) -> A_Err,
    >,
    pub AEIO_GetInSpecInfo: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            inH: AEIO_InSpecH,
            verbiageP: *mut AEIO_Verbiage,
        ) -> A_Err,
    >,
    pub AEIO_DrawSparseFrame: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            inH: AEIO_InSpecH,
            sparse_framePPB: *const AEIO_DrawSparseFramePB,
            worldP: *mut PF_EffectWorld,
            draw_flagsP: *mut AEIO_DrawingFlags,
        ) -> A_Err,
    >,
    pub AEIO_GetDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            inH: AEIO_InSpecH,
            rs0: *const AEIO_RationalScale,
            width0: *mut A_long,
            height0: *mut A_long,
        ) -> A_Err,
    >,
    pub AEIO_GetDuration: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            inH: AEIO_InSpecH,
            tr: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEIO_GetTime: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            inH: AEIO_InSpecH,
            tr: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEIO_GetSound: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            inH: AEIO_InSpecH,
            quality: AEIO_SndQuality,
            interrupt_funcsP0: *const AEIO_InterruptFuncs,
            startPT: *const A_Time,
            durPT: *const A_Time,
            start_sampLu: A_u_long,
            num_samplesLu: A_u_long,
            dataPV: *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEIO_InqNextFrameTime: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            inH: AEIO_InSpecH,
            base_time_tr: *const A_Time,
            time_dir: AEIO_TimeDir,
            found0: *mut A_Boolean,
            key_time_tr0: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEIO_InitOutputSpec: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            outH: AEIO_OutSpecH,
            user_interacted: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEIO_GetFlatOutputOptions: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            outH: AEIO_OutSpecH,
            optionsH: *mut AEIO_Handle,
        ) -> A_Err,
    >,
    pub AEIO_DisposeOutputOptions: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            optionsPV: *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEIO_UserOptionsDialog: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            outH: AEIO_OutSpecH,
            sample0: *const PF_EffectWorld,
            user_interacted0: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEIO_GetOutputInfo: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            outH: AEIO_OutSpecH,
            verbiage: *mut AEIO_Verbiage,
        ) -> A_Err,
    >,
    pub AEIO_OutputInfoChanged: ::std::option::Option<
        unsafe extern "C" fn(basic_dataP: *mut AEIO_BasicData, outH: AEIO_OutSpecH) -> A_Err,
    >,
    pub AEIO_SetOutputFile: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            outH: AEIO_OutSpecH,
            file_pathZ: *const A_UTF16Char,
        ) -> A_Err,
    >,
    pub AEIO_StartAdding: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            outH: AEIO_OutSpecH,
            flags: A_long,
        ) -> A_Err,
    >,
    pub AEIO_AddFrame: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            outH: AEIO_OutSpecH,
            frame_index: A_long,
            frames: A_long,
            wP: *const PF_EffectWorld,
            origin0: *const A_LPoint,
            was_compressedB: A_Boolean,
            inter0: *mut AEIO_InterruptFuncs,
        ) -> A_Err,
    >,
    pub AEIO_EndAdding: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            outH: AEIO_OutSpecH,
            flags: A_long,
        ) -> A_Err,
    >,
    pub AEIO_OutputFrame: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            outH: AEIO_OutSpecH,
            wP: *const PF_EffectWorld,
        ) -> A_Err,
    >,
    pub AEIO_WriteLabels: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            outH: AEIO_OutSpecH,
            written: *mut AEIO_LabelFlags,
        ) -> A_Err,
    >,
    pub AEIO_GetSizes: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            outH: AEIO_OutSpecH,
            free_space: *mut A_u_longlong,
            file_size: *mut A_u_longlong,
        ) -> A_Err,
    >,
    pub AEIO_Flush: ::std::option::Option<
        unsafe extern "C" fn(basic_dataP: *mut AEIO_BasicData, outH: AEIO_OutSpecH) -> A_Err,
    >,
    pub AEIO_AddSoundChunk: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            outH: AEIO_OutSpecH,
            start: *const A_Time,
            num_samplesLu: A_u_long,
            dataPV: *const ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEIO_Idle: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            sig: AEIO_ModuleSignature,
            idle_flags0: *mut AEIO_IdleFlags,
        ) -> A_Err,
    >,
    pub AEIO_GetDepths: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            outH: AEIO_OutSpecH,
            which: *mut AEIO_SupportedDepthFlags,
        ) -> A_Err,
    >,
    pub AEIO_GetOutputSuffix: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            outH: AEIO_OutSpecH,
            suffix: *mut A_char,
        ) -> A_Err,
    >,
    pub AEIO_SeqOptionsDlg: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            inH: AEIO_InSpecH,
            user_interactedPB0: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEIO_GetNumAuxChannels: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            inH: AEIO_InSpecH,
            num_channelsPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEIO_GetAuxChannelDesc: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            inH: AEIO_InSpecH,
            chan_indexL: A_long,
            descP: *mut PF_ChannelDesc,
        ) -> A_Err,
    >,
    pub AEIO_DrawAuxChannel: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            inH: AEIO_InSpecH,
            chan_indexL: A_long,
            pbP: *const AEIO_DrawFramePB,
            chunkP: *mut PF_ChannelChunk,
        ) -> A_Err,
    >,
    pub AEIO_FreeAuxChannel: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            inH: AEIO_InSpecH,
            chunkP: *mut PF_ChannelChunk,
        ) -> A_Err,
    >,
    pub AEIO_NumAuxFiles: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            seqH: AEIO_InSpecH,
            files_per_framePL0: *mut A_long,
        ) -> A_Err,
    >,
    pub AEIO_GetNthAuxFileSpec: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            seqH: AEIO_InSpecH,
            frame_numL: A_long,
            n: A_long,
            pathPH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEIO_CloseSourceFiles: ::std::option::Option<
        unsafe extern "C" fn(basic_dataP: *mut AEIO_BasicData, seqH: AEIO_InSpecH) -> A_Err,
    >,
    pub AEIO_CountUserData: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            inH: AEIO_InSpecH,
            typeLu: A_u_long,
            max_sizeLu: A_u_long,
            num_of_typePLu: *mut A_u_long,
        ) -> A_Err,
    >,
    pub AEIO_SetUserData: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            outH: AEIO_OutSpecH,
            typeLu: A_u_long,
            indexLu: A_u_long,
            dataH: AEIO_Handle,
        ) -> A_Err,
    >,
    pub AEIO_GetUserData: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            inH: AEIO_InSpecH,
            typeLu: A_u_long,
            indexLu: A_u_long,
            max_sizeLu: A_u_long,
            dataPH: *mut AEIO_Handle,
        ) -> A_Err,
    >,
    pub AEIO_AddMarker: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            outH: AEIO_OutSpecH,
            frame_index: A_long,
            marker_type: AEIO_MarkerType,
            marker_dataPV: *mut ::std::os::raw::c_void,
            inter0: *mut AEIO_InterruptFuncs,
        ) -> A_Err,
    >,
    pub AEIO_VerifyFileImportable: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            sig: AEIO_ModuleSignature,
            file_pathZ: *const A_UTF16Char,
            importablePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEIO_UserAudioOptionsDialog: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            outH: AEIO_OutSpecH,
            user_interacted0: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEIO_AddMarker2: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            outH: AEIO_OutSpecH,
            frame_index: A_long,
            markerP: *const AEIO_Marker,
            inter0: *mut AEIO_InterruptFuncs,
        ) -> A_Err,
    >,
    pub AEIO_AddMarker3: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            outH: AEIO_OutSpecH,
            frame_index: A_long,
            marker_valP: AEGP_ConstMarkerValP,
            marker_flag: AEIO_RenderMarkerFlag,
            inter0: *mut AEIO_InterruptFuncs,
        ) -> A_Err,
    >,
    pub AEIO_GetMimeType: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEIO_BasicData,
            outH: AEIO_OutSpecH,
            mime_type_sizeL: A_long,
            mime_typeZ: *mut ::std::os::raw::c_char,
        ) -> A_Err,
    >,
}
#[doc = "   plugin entry points  *****************************\n the main routine of each plugin fills in these function pointers\n AE will call them as appropriate"]
pub type AEIO_FunctionBlock4 = _AEIO_FunctionBlock4;
pub type PT_Index = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PT_Tracker {
    _unused: [u8; 0],
}
pub type PT_TrackerPtr = *mut PT_Tracker;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PT_TrackerInstance {
    _unused: [u8; 0],
}
pub type PT_TrackerInstancePtr = *mut PT_TrackerInstance;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PT_TrackingContext {
    _unused: [u8; 0],
}
pub type PT_TrackingContextPtr = *mut PT_TrackingContext;
pub type PT_GlobalSetupFunc = ::std::option::Option<
    unsafe extern "C" fn(trackerP: PT_TrackerPtr, global_dataPH: *mut AEGP_MemHandle) -> A_Err,
>;
pub type PT_GlobalSetdownFunc =
    ::std::option::Option<unsafe extern "C" fn(trackerP: PT_TrackerPtr) -> A_Err>;
pub type PT_GlobalDoAboutFunc =
    ::std::option::Option<unsafe extern "C" fn(trackerP: PT_TrackerPtr) -> A_Err>;
pub type PT_InstanceSetupFunc = ::std::option::Option<
    unsafe extern "C" fn(
        tracker_instanceP: PT_TrackerInstancePtr,
        flat_instance_dataH0: AEGP_MemHandle,
        instance_dataPH: *mut AEGP_MemHandle,
    ) -> A_Err,
>;
pub type PT_InstanceSetdownFunc =
    ::std::option::Option<unsafe extern "C" fn(tracker_instanceP: PT_TrackerInstancePtr) -> A_Err>;
pub type PT_InstanceFlattenFunc = ::std::option::Option<
    unsafe extern "C" fn(
        tracker_instanceP: PT_TrackerInstancePtr,
        flat_instance_dataPH: *mut AEGP_MemHandle,
    ) -> A_Err,
>;
pub type PT_InstanceDoOptionsFunc =
    ::std::option::Option<unsafe extern "C" fn(tracker_instanceP: PT_TrackerInstancePtr) -> A_Err>;
pub type PT_PrepareTrackFunc = ::std::option::Option<
    unsafe extern "C" fn(
        contextP: PT_TrackingContextPtr,
        tracker_dataPH: *mut AEGP_MemHandle,
    ) -> A_Err,
>;
pub type PT_TrackFunc =
    ::std::option::Option<unsafe extern "C" fn(contextP: PT_TrackingContextPtr) -> A_Err>;
pub type PT_FinishTrackFunc =
    ::std::option::Option<unsafe extern "C" fn(contextP: PT_TrackingContextPtr) -> A_Err>;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct PT_TrackerEntryPoints {
    pub global_setup_func: PT_GlobalSetupFunc,
    pub global_setdown_func: PT_GlobalSetdownFunc,
    pub global_do_about_func: PT_GlobalDoAboutFunc,
    pub instance_setup_func: PT_InstanceSetupFunc,
    pub instance_setdown_func: PT_InstanceSetdownFunc,
    pub instance_flatten_func: PT_InstanceFlattenFunc,
    pub instance_do_options_func: PT_InstanceDoOptionsFunc,
    pub track_prepare_func: PT_PrepareTrackFunc,
    pub track_func: PT_TrackFunc,
    pub track_finish_func: PT_FinishTrackFunc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_Project {
    _unused: [u8; 0],
}
pub type AEGP_ProjectH = *mut *mut _AEGP_Project;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_Item {
    _unused: [u8; 0],
}
pub type AEGP_ItemH = *mut *mut _AEGP_Item;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_Comp {
    _unused: [u8; 0],
}
pub type AEGP_CompH = *mut *mut _AEGP_Comp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_Footage {
    _unused: [u8; 0],
}
pub type AEGP_FootageH = *mut *mut _AEGP_Footage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_Layer {
    _unused: [u8; 0],
}
pub type AEGP_LayerH = *mut *mut _AEGP_Layer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_Effect {
    _unused: [u8; 0],
}
pub type AEGP_EffectRefH = *mut *mut _AEGP_Effect;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_Mask {
    _unused: [u8; 0],
}
pub type AEGP_MaskRefH = *mut *mut _AEGP_Mask;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGPp_Stream {
    _unused: [u8; 0],
}
pub type AEGP_StreamRefH = *mut *mut _AEGPp_Stream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_LayerContext {
    _unused: [u8; 0],
}
pub type AEGP_RenderLayerContextH = *mut *mut _AEGP_LayerContext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_PersistentBlob {
    _unused: [u8; 0],
}
pub type AEGP_PersistentBlobH = *mut *mut _AEGP_PersistentBlob;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_MaskOutline {
    _unused: [u8; 0],
}
pub type AEGP_MaskOutlineValH = *mut *mut _AEGP_MaskOutline;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_Collection {
    _unused: [u8; 0],
}
pub type AEGP_CollectionH = *mut *mut _AEGP_Collection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_Collection2 {
    _unused: [u8; 0],
}
pub type AEGP_Collection2H = *mut *mut _AEGP_Collection2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_SoundData {
    _unused: [u8; 0],
}
pub type AEGP_SoundDataH = *mut *mut _AEGP_SoundData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_AddKeyframesInfo {
    _unused: [u8; 0],
}
pub type AEGP_AddKeyframesInfoH = *mut *mut _AEGP_AddKeyframesInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_RenderReceipt {
    _unused: [u8; 0],
}
pub type AEGP_RenderReceiptH = *mut *mut _AEGP_RenderReceipt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_World {
    _unused: [u8; 0],
}
pub type AEGP_WorldH = *mut *mut _AEGP_World;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_RenderOptions {
    _unused: [u8; 0],
}
pub type AEGP_RenderOptionsH = *mut *mut _AEGP_RenderOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_LayerRenderOptions {
    _unused: [u8; 0],
}
pub type AEGP_LayerRenderOptionsH = *mut *mut _AEGP_LayerRenderOptions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_FrameReceipt {
    _unused: [u8; 0],
}
pub type AEGP_FrameReceiptH = *mut *mut _AEGP_FrameReceipt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_RenderQueueItem {
    _unused: [u8; 0],
}
pub type AEGP_RQItemRefH = *mut *mut _AEGP_RenderQueueItem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_OutputModule {
    _unused: [u8; 0],
}
pub type AEGP_OutputModuleRefH = *mut *mut _AEGP_OutputModule;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_TextDocument {
    _unused: [u8; 0],
}
pub type AEGP_TextDocumentH = *mut *mut _AEGP_TextDocument;
pub type AEGP_MarkerValP = *mut _AEGP_MarkerVal;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_TextOutlines {
    _unused: [u8; 0],
}
pub type AEGP_TextOutlinesH = *mut *mut _AEGP_TextOutlines;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_TimeStamp {
    pub a: [A_char; 4usize],
}
pub type AEGP_TimeStamp = _AEGP_TimeStamp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_PlatformWorld {
    _unused: [u8; 0],
}
pub type AEGP_PlatformWorldH = *mut *mut _AEGP_PlatformWorld;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_ItemView {
    _unused: [u8; 0],
}
pub type AEGP_ItemViewP = *mut _AEGP_ItemView;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_ColorProfile {
    _unused: [u8; 0],
}
pub type AEGP_ColorProfileP = *mut _AEGP_ColorProfile;
pub type AEGP_ConstColorProfileP = *mut _AEGP_ColorProfile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_Guid {
    _unused: [u8; 0],
}
pub type AEGP_GuidP = *mut _AEGP_Guid;
pub type AEGP_SubLayerIndex = A_long;
pub type AEGP_PluginID = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_GlobalRefcon {
    _unused: [u8; 0],
}
pub type AEGP_GlobalRefcon = *mut _AEGP_GlobalRefcon;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_CommandRefcon {
    _unused: [u8; 0],
}
pub type AEGP_CommandRefcon = *mut _AEGP_CommandRefcon;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_UpdateMenuRefcon {
    _unused: [u8; 0],
}
pub type AEGP_UpdateMenuRefcon = *mut _AEGP_UpdateMenuRefcon;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_DeathRefcon {
    _unused: [u8; 0],
}
pub type AEGP_DeathRefcon = *mut _AEGP_DeathRefcon;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_VersionRefcon {
    _unused: [u8; 0],
}
pub type AEGP_VersionRefcon = *mut _AEGP_VersionRefcon;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_AboutStringRefcon {
    _unused: [u8; 0],
}
pub type AEGP_AboutStringRefcon = *mut _AEGP_AboutStringRefcon;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_AboutRefcon {
    _unused: [u8; 0],
}
pub type AEGP_AboutRefcon = *mut _AEGP_AboutRefcon;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_AsyncFrameRequestRefcon {
    _unused: [u8; 0],
}
pub type AEGP_AsyncFrameRequestRefcon = *mut _AEGP_AsyncFrameRequestRefcon;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_IdleRefcon {
    _unused: [u8; 0],
}
pub type AEGP_IdleRefcon = *mut _AEGP_IdleRefcon;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_IORefcon {
    _unused: [u8; 0],
}
pub type AEGP_IORefcon = *mut _AEGP_IORefcon;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_CancelRefcon {
    _unused: [u8; 0],
}
pub type AEGP_CancelRefcon = *mut _AEGP_CancelRefcon;
pub const AEGP_Platform_MAC: _bindgen_ty_92 = 0;
pub const AEGP_Platform_WIN: _bindgen_ty_92 = 1;
pub type _bindgen_ty_92 = ::std::os::raw::c_int;
pub type AEGP_Platform = A_long;
pub const AEGP_ProjBitDepth_8: _bindgen_ty_93 = 0;
pub const AEGP_ProjBitDepth_16: _bindgen_ty_93 = 1;
pub const AEGP_ProjBitDepth_32: _bindgen_ty_93 = 2;
pub const AEGP_ProjBitDepth_NUM_VALID_DEPTHS: _bindgen_ty_93 = 3;
pub type _bindgen_ty_93 = ::std::os::raw::c_int;
pub type AEGP_ProjBitDepth = A_char;
pub type AEGP_Index = A_long;
pub type AEGP_LayerIDVal = A_long;
pub type AEGP_MaskIDVal = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ColorVal {
    pub alphaF: A_FpLong,
    pub redF: A_FpLong,
    pub greenF: A_FpLong,
    pub blueF: A_FpLong,
}
pub const AEGP_CameraType_NONE: _bindgen_ty_94 = -1;
pub const AEGP_CameraType_PERSPECTIVE: _bindgen_ty_94 = 0;
pub const AEGP_CameraType_ORTHOGRAPHIC: _bindgen_ty_94 = 1;
pub const AEGP_CameraType_NUM_TYPES: _bindgen_ty_94 = 2;
pub type _bindgen_ty_94 = ::std::os::raw::c_int;
pub type AEGP_CameraType = A_u_long;
pub const AEGP_FootageDepth_1: _bindgen_ty_95 = 1;
pub const AEGP_FootageDepth_2: _bindgen_ty_95 = 2;
pub const AEGP_FootageDepth_4: _bindgen_ty_95 = 4;
pub const AEGP_FootageDepth_8: _bindgen_ty_95 = 8;
pub const AEGP_FootageDepth_16: _bindgen_ty_95 = 16;
pub const AEGP_FootageDepth_24: _bindgen_ty_95 = 24;
pub const AEGP_FootageDepth_30: _bindgen_ty_95 = 30;
pub const AEGP_FootageDepth_32: _bindgen_ty_95 = 32;
pub const AEGP_FootageDepth_GRAY_2: _bindgen_ty_95 = 34;
pub const AEGP_FootageDepth_GRAY_4: _bindgen_ty_95 = 36;
pub const AEGP_FootageDepth_GRAY_8: _bindgen_ty_95 = 40;
pub const AEGP_FootageDepth_48: _bindgen_ty_95 = 48;
pub const AEGP_FootageDepth_64: _bindgen_ty_95 = 64;
pub const AEGP_FootageDepth_GRAY_16: _bindgen_ty_95 = -16;
pub type _bindgen_ty_95 = ::std::os::raw::c_int;
pub const AEGP_FilmSizeUnits_NONE: _bindgen_ty_96 = 0;
pub const AEGP_FilmSizeUnits_HORIZONTAL: _bindgen_ty_96 = 1;
pub const AEGP_FilmSizeUnits_VERTICAL: _bindgen_ty_96 = 2;
pub const AEGP_FilmSizeUnits_DIAGONAL: _bindgen_ty_96 = 3;
pub type _bindgen_ty_96 = ::std::os::raw::c_int;
pub type AEGP_FilmSizeUnits = A_long;
pub const AEGP_LightType_NONE: _bindgen_ty_97 = -1;
pub const AEGP_LightType_PARALLEL: _bindgen_ty_97 = 0;
pub const AEGP_LightType_SPOT: _bindgen_ty_97 = 1;
pub const AEGP_LightType_POINT: _bindgen_ty_97 = 2;
pub const AEGP_LightType_AMBIENT: _bindgen_ty_97 = 3;
pub const AEGP_LightType_ENVIRONMENT: _bindgen_ty_97 = 4;
pub const AEGP_LightType_NUM_TYPES: _bindgen_ty_97 = 5;
pub type _bindgen_ty_97 = ::std::os::raw::c_int;
pub type AEGP_LightType = A_u_long;
pub const AEGP_LightFalloff_NONE: _bindgen_ty_98 = 0;
pub const AEGP_LightFalloff_SMOOTH: _bindgen_ty_98 = 1;
pub const AEGP_LightFalloff_INVERSE_SQUARE_CLAMPED: _bindgen_ty_98 = 2;
pub type _bindgen_ty_98 = ::std::os::raw::c_int;
pub type AEGP_LightFalloffType = A_u_long;
pub const AEGP_TimeDisplayType_TIMECODE: _bindgen_ty_99 = 0;
pub const AEGP_TimeDisplayType_FRAMES: _bindgen_ty_99 = 1;
pub const AEGP_TimeDisplayType_FEET_AND_FRAMES: _bindgen_ty_99 = 2;
pub type _bindgen_ty_99 = ::std::os::raw::c_int;
pub type AEGP_TimeDisplayType = A_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_TimeDisplay2 {
    pub time_display_type: AEGP_TimeDisplayType,
    pub timebaseC: A_char,
    pub non_drop_30B: A_Boolean,
    pub frames_per_footC: A_char,
    pub starting_frameL: A_long,
    pub auto_timecode_baseB: A_Boolean,
}
pub const AEGP_TimeDisplay_TIMECODE: _bindgen_ty_100 = 0;
pub const AEGP_TimeDisplay_FRAMES: _bindgen_ty_100 = 1;
pub type _bindgen_ty_100 = ::std::os::raw::c_int;
pub type AEGP_TimeDisplayMode = ::std::os::raw::c_char;
pub const AEGP_SourceTimecode_ZERO: _bindgen_ty_101 = 0;
pub const AEGP_SourceTimecode_SOURCE_TIMECODE: _bindgen_ty_101 = 1;
pub type _bindgen_ty_101 = ::std::os::raw::c_int;
pub type AEGP_SourceTimecodeDisplayMode = ::std::os::raw::c_char;
pub const AEGP_Frames_ZERO_BASED: _bindgen_ty_102 = 0;
pub const AEGP_Frames_ONE_BASED: _bindgen_ty_102 = 1;
pub const AEGP_Frames_TIMECODE_CONVERSION: _bindgen_ty_102 = 2;
pub type _bindgen_ty_102 = ::std::os::raw::c_int;
pub type AEGP_FramesDisplayMode = ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_TimeDisplay3 {
    pub display_mode: AEGP_TimeDisplayMode,
    pub footage_display_mode: AEGP_SourceTimecodeDisplayMode,
    pub display_dropframeB: A_Boolean,
    pub use_feet_framesB: A_Boolean,
    pub timebaseC: A_char,
    pub frames_per_footC: A_char,
    pub frames_display_mode: AEGP_FramesDisplayMode,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ProjSuite6 {
    pub AEGP_GetNumProjects:
        ::std::option::Option<unsafe extern "C" fn(num_projPL: *mut A_long) -> A_Err>,
    pub AEGP_GetProjectByIndex: ::std::option::Option<
        unsafe extern "C" fn(proj_indexL: A_long, projPH: *mut AEGP_ProjectH) -> A_Err,
    >,
    pub AEGP_GetProjectName: ::std::option::Option<
        unsafe extern "C" fn(projH: AEGP_ProjectH, nameZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_GetProjectPath: ::std::option::Option<
        unsafe extern "C" fn(projH: AEGP_ProjectH, unicode_pathPH: *mut AEGP_MemHandle) -> A_Err,
    >,
    pub AEGP_GetProjectRootFolder: ::std::option::Option<
        unsafe extern "C" fn(projH: AEGP_ProjectH, root_folderPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_SaveProjectToPath: ::std::option::Option<
        unsafe extern "C" fn(projH: AEGP_ProjectH, pathZ: *const A_UTF16Char) -> A_Err,
    >,
    pub AEGP_GetProjectTimeDisplay: ::std::option::Option<
        unsafe extern "C" fn(projH: AEGP_ProjectH, time_displayP: *mut AEGP_TimeDisplay3) -> A_Err,
    >,
    pub AEGP_SetProjectTimeDisplay: ::std::option::Option<
        unsafe extern "C" fn(
            projH: AEGP_ProjectH,
            time_displayP: *const AEGP_TimeDisplay3,
        ) -> A_Err,
    >,
    pub AEGP_ProjectIsDirty: ::std::option::Option<
        unsafe extern "C" fn(projH: AEGP_ProjectH, is_dirtyPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SaveProjectAs: ::std::option::Option<
        unsafe extern "C" fn(projH: AEGP_ProjectH, pathZ: *const A_UTF16Char) -> A_Err,
    >,
    pub AEGP_NewProject:
        ::std::option::Option<unsafe extern "C" fn(new_projectPH: *mut AEGP_ProjectH) -> A_Err>,
    pub AEGP_OpenProjectFromPath: ::std::option::Option<
        unsafe extern "C" fn(pathZ: *const A_UTF16Char, projectPH: *mut AEGP_ProjectH) -> A_Err,
    >,
    pub AEGP_GetProjectBitDepth: ::std::option::Option<
        unsafe extern "C" fn(projectH: AEGP_ProjectH, bit_depthP: *mut AEGP_ProjBitDepth) -> A_Err,
    >,
    pub AEGP_SetProjectBitDepth: ::std::option::Option<
        unsafe extern "C" fn(projectH: AEGP_ProjectH, bit_depth: AEGP_ProjBitDepth) -> A_Err,
    >,
}
pub const AEGP_SoundEncoding_UNSIGNED_PCM: _bindgen_ty_103 = 3;
pub const AEGP_SoundEncoding_SIGNED_PCM: _bindgen_ty_103 = 4;
pub const AEGP_SoundEncoding_FLOAT: _bindgen_ty_103 = 5;
pub const AEGP_SoundEncoding_END: _bindgen_ty_103 = 6;
pub const AEGP_SoundEncoding_BEGIN: _bindgen_ty_103 = 3;
pub type _bindgen_ty_103 = ::std::os::raw::c_int;
pub type AEGP_SoundEncoding = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_SoundDataFormat {
    pub sample_rateF: A_FpLong,
    pub encoding: AEGP_SoundEncoding,
    pub bytes_per_sampleL: A_long,
    pub num_channelsL: A_long,
}
pub const AEGP_ItemType_NONE: _bindgen_ty_104 = 0;
pub const AEGP_ItemType_FOLDER: _bindgen_ty_104 = 1;
pub const AEGP_ItemType_COMP: _bindgen_ty_104 = 2;
pub const AEGP_ItemType_SOLID_defunct: _bindgen_ty_104 = 3;
pub const AEGP_ItemType_FOOTAGE: _bindgen_ty_104 = 4;
pub const AEGP_ItemType_NUM_TYPES1: _bindgen_ty_104 = 5;
pub type _bindgen_ty_104 = ::std::os::raw::c_int;
pub type AEGP_ItemType = A_short;
pub const AEGP_ItemFlag_MISSING: _bindgen_ty_105 = 1;
pub const AEGP_ItemFlag_HAS_PROXY: _bindgen_ty_105 = 2;
pub const AEGP_ItemFlag_USING_PROXY: _bindgen_ty_105 = 4;
pub const AEGP_ItemFlag_MISSING_PROXY: _bindgen_ty_105 = 8;
pub const AEGP_ItemFlag_HAS_VIDEO: _bindgen_ty_105 = 16;
pub const AEGP_ItemFlag_HAS_AUDIO: _bindgen_ty_105 = 32;
pub const AEGP_ItemFlag_STILL: _bindgen_ty_105 = 64;
pub const AEGP_ItemFlag_HAS_ACTIVE_AUDIO: _bindgen_ty_105 = 128;
pub type _bindgen_ty_105 = ::std::os::raw::c_int;
pub type AEGP_ItemFlags = A_long;
pub const AEGP_Label_NONE: _bindgen_ty_106 = -1;
pub const AEGP_Label_NO_LABEL: _bindgen_ty_106 = 0;
pub const AEGP_Label_1: _bindgen_ty_106 = 1;
pub const AEGP_Label_2: _bindgen_ty_106 = 2;
pub const AEGP_Label_3: _bindgen_ty_106 = 3;
pub const AEGP_Label_4: _bindgen_ty_106 = 4;
pub const AEGP_Label_5: _bindgen_ty_106 = 5;
pub const AEGP_Label_6: _bindgen_ty_106 = 6;
pub const AEGP_Label_7: _bindgen_ty_106 = 7;
pub const AEGP_Label_8: _bindgen_ty_106 = 8;
pub const AEGP_Label_9: _bindgen_ty_106 = 9;
pub const AEGP_Label_10: _bindgen_ty_106 = 10;
pub const AEGP_Label_11: _bindgen_ty_106 = 11;
pub const AEGP_Label_12: _bindgen_ty_106 = 12;
pub const AEGP_Label_13: _bindgen_ty_106 = 13;
pub const AEGP_Label_14: _bindgen_ty_106 = 14;
pub const AEGP_Label_15: _bindgen_ty_106 = 15;
pub const AEGP_Label_16: _bindgen_ty_106 = 16;
pub const AEGP_Label_NUMTYPES: _bindgen_ty_106 = 17;
pub type _bindgen_ty_106 = ::std::os::raw::c_int;
pub type AEGP_LabelID = A_char;
pub const AEGP_PersistentType_MACHINE_SPECIFIC: _bindgen_ty_107 = 0;
pub const AEGP_PersistentType_MACHINE_INDEPENDENT: _bindgen_ty_107 = 1;
pub const AEGP_PersistentType_MACHINE_INDEPENDENT_RENDER: _bindgen_ty_107 = 2;
pub const AEGP_PersistentType_MACHINE_INDEPENDENT_OUTPUT: _bindgen_ty_107 = 3;
pub const AEGP_PersistentType_MACHINE_INDEPENDENT_COMPOSITION: _bindgen_ty_107 = 4;
pub const AEGP_PersistentType_MACHINE_SPECIFIC_TEXT: _bindgen_ty_107 = 5;
pub const AEGP_PersistentType_MACHINE_SPECIFIC_PAINT: _bindgen_ty_107 = 6;
pub const AEGP_PersistentType_MACHINE_SPECIFIC_EFFECTS: _bindgen_ty_107 = 7;
pub const AEGP_PersistentType_MACHINE_SPECIFIC_EXPRESSION_SNIPPETS: _bindgen_ty_107 = 8;
pub const AEGP_PersistentType_MACHINE_SPECIFIC_SCRIPT_SNIPPETS: _bindgen_ty_107 = 9;
pub const AEGP_PersistentType_NUMTYPES: _bindgen_ty_107 = 10;
pub type _bindgen_ty_107 = ::std::os::raw::c_int;
pub type AEGP_PersistentType = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ItemSuite9 {
    pub AEGP_GetFirstProjItem: ::std::option::Option<
        unsafe extern "C" fn(projectH: AEGP_ProjectH, itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetNextProjItem: ::std::option::Option<
        unsafe extern "C" fn(
            projectH: AEGP_ProjectH,
            itemH: AEGP_ItemH,
            next_itemPH: *mut AEGP_ItemH,
        ) -> A_Err,
    >,
    pub AEGP_GetActiveItem:
        ::std::option::Option<unsafe extern "C" fn(itemPH: *mut AEGP_ItemH) -> A_Err>,
    pub AEGP_IsItemSelected: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, selectedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SelectItem: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            selectB: A_Boolean,
            deselect_othersB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetItemType: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_typeP: *mut AEGP_ItemType) -> A_Err,
    >,
    pub AEGP_GetTypeName: ::std::option::Option<
        unsafe extern "C" fn(item_type: AEGP_ItemType, nameZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_GetItemName: ::std::option::Option<
        unsafe extern "C" fn(
            pluginID: AEGP_PluginID,
            itemH: AEGP_ItemH,
            unicode_namePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_SetItemName: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, nameZ: *const A_UTF16Char) -> A_Err,
    >,
    pub AEGP_GetItemID: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_idPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetItemFlags: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_flagsP: *mut AEGP_ItemFlags) -> A_Err,
    >,
    pub AEGP_SetItemUseProxy: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, use_proxyB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetItemParentFolder: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, parent_folder_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_SetItemParentFolder: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, parent_folder_itemH: AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetItemDuration: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetItemCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, curr_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetItemDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            widthPL: *mut A_long,
            heightPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetItemPixelAspectRatio: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, pix_aspect_ratioPRt: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_DeleteItem: ::std::option::Option<unsafe extern "C" fn(itemH: AEGP_ItemH) -> A_Err>,
    pub AEGP_CreateNewFolder: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_UTF16Char,
            parent_folderH0: AEGP_ItemH,
            new_folderPH: *mut AEGP_ItemH,
        ) -> A_Err,
    >,
    pub AEGP_SetItemCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, new_timePT: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetItemComment: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, unicode_namePH: *mut AEGP_MemHandle) -> A_Err,
    >,
    pub AEGP_SetItemComment: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, commentZ: *const A_UTF16Char) -> A_Err,
    >,
    pub AEGP_GetItemLabel: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, labelP: *mut AEGP_LabelID) -> A_Err,
    >,
    pub AEGP_SetItemLabel: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, label: AEGP_LabelID) -> A_Err,
    >,
    pub AEGP_GetItemMRUView: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, mru_viewP: *mut AEGP_ItemViewP) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ItemViewSuite1 {
    pub AEGP_GetItemViewPlaybackTime: ::std::option::Option<
        unsafe extern "C" fn(
            item_viewP: AEGP_ItemViewP,
            is_currently_previewingPB0: *mut A_Boolean,
            curr_timePT: *mut A_Time,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_SoundDataSuite1 {
    pub AEGP_NewSoundData: ::std::option::Option<
        unsafe extern "C" fn(
            sound_formatP: *const AEGP_SoundDataFormat,
            new_sound_dataPH: *mut AEGP_SoundDataH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeSoundData:
        ::std::option::Option<unsafe extern "C" fn(sound_dataH: AEGP_SoundDataH) -> A_Err>,
    pub AEGP_GetSoundDataFormat: ::std::option::Option<
        unsafe extern "C" fn(
            soundH: AEGP_SoundDataH,
            sound_formatP: *mut AEGP_SoundDataFormat,
        ) -> A_Err,
    >,
    pub AEGP_LockSoundDataSamples: ::std::option::Option<
        unsafe extern "C" fn(
            soundH: AEGP_SoundDataH,
            samples: *mut *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_UnlockSoundDataSamples:
        ::std::option::Option<unsafe extern "C" fn(soundH: AEGP_SoundDataH) -> A_Err>,
    pub AEGP_GetNumSamples: ::std::option::Option<
        unsafe extern "C" fn(soundH: AEGP_SoundDataH, num_samplesPL: *mut A_long) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_DownsampleFactor {
    pub xS: A_short,
    pub yS: A_short,
}
pub const AEGP_CompFlag_SHOW_ALL_SHY: _bindgen_ty_108 = 1;
pub const AEGP_CompFlag_RESERVED_1: _bindgen_ty_108 = 2;
pub const AEGP_CompFlag_RESERVED_2: _bindgen_ty_108 = 4;
pub const AEGP_CompFlag_ENABLE_MOTION_BLUR: _bindgen_ty_108 = 8;
pub const AEGP_CompFlag_ENABLE_TIME_FILTER: _bindgen_ty_108 = 16;
pub const AEGP_CompFlag_GRID_TO_FRAMES: _bindgen_ty_108 = 32;
pub const AEGP_CompFlag_GRID_TO_FIELDS: _bindgen_ty_108 = 64;
pub const AEGP_CompFlag_USE_LOCAL_DSF: _bindgen_ty_108 = 128;
pub const AEGP_CompFlag_DRAFT_3D: _bindgen_ty_108 = 256;
pub const AEGP_CompFlag_SHOW_GRAPH: _bindgen_ty_108 = 512;
pub const AEGP_CompFlag_RESERVED_3: _bindgen_ty_108 = 1024;
pub type _bindgen_ty_108 = ::std::os::raw::c_int;
pub type AEGP_CompFlags = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CompSuite12 {
    pub AEGP_GetCompFromItem: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetItemFromComp: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *mut AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_SetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *const AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_GetCompBGColor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, bg_colorP: *mut AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_SetCompBGColor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, bg_colorP: *const AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_GetCompFlags: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, comp_flagsP: *mut AEGP_CompFlags) -> A_Err,
    >,
    pub AEGP_GetShowLayerNameOrSourceName: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, layer_names_shownPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetShowLayerNameOrSourceName: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, show_layer_namesB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetShowBlendModes: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, blend_modes_shownPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetShowBlendModes: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, show_blend_modesB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetCompFramerate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_SetCompFrameRate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *const A_FpLong) -> A_Err,
    >,
    pub AEGP_GetCompShutterAnglePhase: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, angle: *mut A_Ratio, phase: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_GetCompShutterFrameRange: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            comp_timeP: *const A_Time,
            start: *mut A_Time,
            duration: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetCompSuggestedMotionBlurSamples: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, samplesPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_SetCompSuggestedMotionBlurSamples:
        ::std::option::Option<unsafe extern "C" fn(compH: AEGP_CompH, samplesL: A_long) -> A_Err>,
    pub AEGP_GetCompMotionBlurAdaptiveSampleLimit: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, samplesPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_SetCompMotionBlurAdaptiveSampleLimit:
        ::std::option::Option<unsafe extern "C" fn(compH: AEGP_CompH, samplesL: A_long) -> A_Err>,
    pub AEGP_GetCompWorkAreaStart: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_startPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetCompWorkAreaDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompWorkAreaStartAndDuration: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            work_area_startPT: *const A_Time,
            work_area_durationPT: *const A_Time,
        ) -> A_Err,
    >,
    pub AEGP_CreateSolidInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            width: A_long,
            height: A_long,
            color: *const AEGP_ColorVal,
            parent_compH: AEGP_CompH,
            durationPT0: *const A_Time,
            new_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateCameraInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_CompH,
            new_cameraPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateLightInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_CompH,
            new_lightPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_folderH0: AEGP_ItemH,
            utf_nameZ: *const A_UTF16Char,
            widthL: A_long,
            heightL: A_long,
            pixel_aspect_ratioPRt: *const A_Ratio,
            durationPT: *const A_Time,
            frameratePRt: *const A_Ratio,
            new_compPH: *mut AEGP_CompH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewCollectionFromCompSelection: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            compH: AEGP_CompH,
            collectionPH: *mut AEGP_Collection2H,
        ) -> A_Err,
    >,
    pub AEGP_SetSelection: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, collectionH: AEGP_Collection2H) -> A_Err,
    >,
    pub AEGP_GetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *const A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, durationPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_CreateNullInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            parent_compH: AEGP_CompH,
            durationPT0: *const A_Time,
            new_null_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_SetCompPixelAspectRatio: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, pix_aspectratioPRt: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_CreateTextLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_compH: AEGP_CompH,
            select_new_layerB: A_Boolean,
            horzB: A_Boolean,
            new_text_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateBoxTextLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_compH: AEGP_CompH,
            select_new_layerB: A_Boolean,
            box_dimensions: A_FloatPoint,
            horzB: A_Boolean,
            new_text_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_SetCompDimensions: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, widthL: A_long, heightL: A_long) -> A_Err,
    >,
    pub AEGP_DuplicateComp: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, new_compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetCompFrameDuration:
        ::std::option::Option<unsafe extern "C" fn(compH: AEGP_CompH, timeP: *mut A_Time) -> A_Err>,
    pub AEGP_GetMostRecentlyUsedComp:
        ::std::option::Option<unsafe extern "C" fn(compPH: *mut AEGP_CompH) -> A_Err>,
    pub AEGP_CreateVectorLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_compH: AEGP_CompH,
            new_vector_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewCompMarkerStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            parent_compH: AEGP_CompH,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetCompDisplayDropFrame: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dropFramePB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetCompDisplayDropFrame: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dropFrameB: A_Boolean) -> A_Err,
    >,
    pub AEGP_ReorderCompSelection:
        ::std::option::Option<unsafe extern "C" fn(compH: AEGP_CompH, index: A_long) -> A_Err>,
}
pub const AEGP_MemFlag_NONE: _bindgen_ty_109 = 0;
pub const AEGP_MemFlag_CLEAR: _bindgen_ty_109 = 1;
pub const AEGP_MemFlag_QUIET: _bindgen_ty_109 = 2;
pub type _bindgen_ty_109 = ::std::os::raw::c_int;
pub type AEGP_MemFlag = A_long;
pub type AEGP_MemSize = A_u_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_MemorySuite1 {
    pub AEGP_NewMemHandle: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            whatZ: *const A_char,
            size: AEGP_MemSize,
            flags: AEGP_MemFlag,
            memPH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_FreeMemHandle:
        ::std::option::Option<unsafe extern "C" fn(memH: AEGP_MemHandle) -> A_Err>,
    pub AEGP_LockMemHandle: ::std::option::Option<
        unsafe extern "C" fn(
            memH: AEGP_MemHandle,
            ptr_to_ptr: *mut *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_UnlockMemHandle:
        ::std::option::Option<unsafe extern "C" fn(memH: AEGP_MemHandle) -> A_Err>,
    pub AEGP_GetMemHandleSize: ::std::option::Option<
        unsafe extern "C" fn(memH: AEGP_MemHandle, sizeP: *mut AEGP_MemSize) -> A_Err,
    >,
    pub AEGP_ResizeMemHandle: ::std::option::Option<
        unsafe extern "C" fn(
            whatZ: *const A_char,
            new_size: AEGP_MemSize,
            memH: AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_SetMemReportingOn:
        ::std::option::Option<unsafe extern "C" fn(turn_OnB: A_Boolean) -> A_Err>,
    pub AEGP_GetMemStats: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            countPL: *mut A_long,
            sizePL: *mut A_long,
        ) -> A_Err,
    >,
}
pub const AEGP_TransferFlag_PRESERVE_ALPHA: _bindgen_ty_110 = 1;
pub const AEGP_TransferFlag_RANDOMIZE_DISSOLVE: _bindgen_ty_110 = 2;
pub type _bindgen_ty_110 = ::std::os::raw::c_int;
pub type AEGP_TransferFlags = A_long;
pub const AEGP_TrackMatte_NO_TRACK_MATTE: _bindgen_ty_111 = 0;
pub const AEGP_TrackMatte_ALPHA: _bindgen_ty_111 = 1;
pub const AEGP_TrackMatte_NOT_ALPHA: _bindgen_ty_111 = 2;
pub const AEGP_TrackMatte_LUMA: _bindgen_ty_111 = 3;
pub const AEGP_TrackMatte_NOT_LUMA: _bindgen_ty_111 = 4;
pub type _bindgen_ty_111 = ::std::os::raw::c_int;
pub type AEGP_TrackMatte = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_LayerTransferMode {
    pub mode: PF_TransferMode,
    pub flags: AEGP_TransferFlags,
    pub track_matte: AEGP_TrackMatte,
}
pub const AEGP_LayerQual_NONE: _bindgen_ty_112 = -1;
pub const AEGP_LayerQual_WIREFRAME: _bindgen_ty_112 = 0;
pub const AEGP_LayerQual_DRAFT: _bindgen_ty_112 = 1;
pub const AEGP_LayerQual_BEST: _bindgen_ty_112 = 2;
pub type _bindgen_ty_112 = ::std::os::raw::c_int;
pub type AEGP_LayerQuality = A_short;
pub const AEGP_LayerSamplingQual_BILINEAR: _bindgen_ty_113 = 0;
pub const AEGP_LayerSamplingQual_BICUBIC: _bindgen_ty_113 = 1;
pub type _bindgen_ty_113 = ::std::os::raw::c_int;
pub type AEGP_LayerSamplingQuality = A_short;
pub const AEGP_LayerFlag_NONE: _bindgen_ty_114 = 0;
pub const AEGP_LayerFlag_VIDEO_ACTIVE: _bindgen_ty_114 = 1;
pub const AEGP_LayerFlag_AUDIO_ACTIVE: _bindgen_ty_114 = 2;
pub const AEGP_LayerFlag_EFFECTS_ACTIVE: _bindgen_ty_114 = 4;
pub const AEGP_LayerFlag_MOTION_BLUR: _bindgen_ty_114 = 8;
pub const AEGP_LayerFlag_FRAME_BLENDING: _bindgen_ty_114 = 16;
pub const AEGP_LayerFlag_LOCKED: _bindgen_ty_114 = 32;
pub const AEGP_LayerFlag_SHY: _bindgen_ty_114 = 64;
pub const AEGP_LayerFlag_COLLAPSE: _bindgen_ty_114 = 128;
pub const AEGP_LayerFlag_AUTO_ORIENT_ROTATION: _bindgen_ty_114 = 256;
pub const AEGP_LayerFlag_ADJUSTMENT_LAYER: _bindgen_ty_114 = 512;
pub const AEGP_LayerFlag_TIME_REMAPPING: _bindgen_ty_114 = 1024;
pub const AEGP_LayerFlag_LAYER_IS_3D: _bindgen_ty_114 = 2048;
pub const AEGP_LayerFlag_LOOK_AT_CAMERA: _bindgen_ty_114 = 4096;
pub const AEGP_LayerFlag_LOOK_AT_POI: _bindgen_ty_114 = 8192;
pub const AEGP_LayerFlag_SOLO: _bindgen_ty_114 = 16384;
pub const AEGP_LayerFlag_MARKERS_LOCKED: _bindgen_ty_114 = 32768;
pub const AEGP_LayerFlag_NULL_LAYER: _bindgen_ty_114 = 65536;
pub const AEGP_LayerFlag_HIDE_LOCKED_MASKS: _bindgen_ty_114 = 131072;
pub const AEGP_LayerFlag_GUIDE_LAYER: _bindgen_ty_114 = 262144;
pub const AEGP_LayerFlag_ADVANCED_FRAME_BLENDING: _bindgen_ty_114 = 524288;
pub const AEGP_LayerFlag_SUBLAYERS_RENDER_SEPARATELY: _bindgen_ty_114 = 1048576;
pub const AEGP_LayerFlag_ENVIRONMENT_LAYER: _bindgen_ty_114 = 2097152;
pub type _bindgen_ty_114 = ::std::os::raw::c_int;
pub type AEGP_LayerFlags = A_long;
pub const AEGP_ObjectType_NONE: _bindgen_ty_115 = -1;
pub const AEGP_ObjectType_AV: _bindgen_ty_115 = 0;
pub const AEGP_ObjectType_LIGHT: _bindgen_ty_115 = 1;
pub const AEGP_ObjectType_CAMERA: _bindgen_ty_115 = 2;
pub const AEGP_ObjectType_TEXT: _bindgen_ty_115 = 3;
pub const AEGP_ObjectType_VECTOR: _bindgen_ty_115 = 4;
pub const AEGP_ObjectType_3D_MODEL: _bindgen_ty_115 = 5;
pub const AEGP_ObjectType_RESERVED1: _bindgen_ty_115 = 6;
pub const AEGP_ObjectType_RESERVED2: _bindgen_ty_115 = 7;
pub const AEGP_ObjectType_RESERVED3: _bindgen_ty_115 = 8;
pub const AEGP_ObjectType_NUM_TYPES: _bindgen_ty_115 = 9;
pub type _bindgen_ty_115 = ::std::os::raw::c_int;
pub type AEGP_ObjectType = A_long;
pub const AEGP_LTimeMode_LayerTime: _bindgen_ty_116 = 0;
pub const AEGP_LTimeMode_CompTime: _bindgen_ty_116 = 1;
pub type _bindgen_ty_116 = ::std::os::raw::c_int;
pub type AEGP_LTimeMode = A_short;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_LayerSuite9 {
    pub AEGP_GetCompNumLayers: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, num_layersPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetCompLayerByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            layer_indexL: A_long,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetActiveLayer:
        ::std::option::Option<unsafe extern "C" fn(layerPH: *mut AEGP_LayerH) -> A_Err>,
    pub AEGP_GetLayerIndex: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_indexPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerSourceItem: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, source_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetLayerSourceItemID: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, source_item_idPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerParentComp: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetLayerName: ::std::option::Option<
        unsafe extern "C" fn(
            pluginID: AEGP_PluginID,
            layerH: AEGP_LayerH,
            utf_layer_namePH0: *mut AEGP_MemHandle,
            utf_source_namePH0: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerQuality: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, qualityP: *mut AEGP_LayerQuality) -> A_Err,
    >,
    pub AEGP_SetLayerQuality: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, quality: AEGP_LayerQuality) -> A_Err,
    >,
    pub AEGP_GetLayerFlags: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_flagsP: *mut AEGP_LayerFlags) -> A_Err,
    >,
    pub AEGP_SetLayerFlag: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            single_flag: AEGP_LayerFlags,
            valueB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsLayerVideoReallyOn: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, onPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsLayerAudioReallyOn: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, onPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetLayerCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            curr_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerInPoint: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            in_pointPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerDuration: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            durationPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerInPointAndDuration: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            in_pointPT: *const A_Time,
            durationPT: *const A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerOffset: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, offsetPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetLayerOffset: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, offsetPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetLayerStretch: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, stretchPRt: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_SetLayerStretch: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, stretchPRt: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_GetLayerTransferMode: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            transfer_modeP: *mut AEGP_LayerTransferMode,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerTransferMode: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            transfer_modeP: *const AEGP_LayerTransferMode,
        ) -> A_Err,
    >,
    pub AEGP_IsAddLayerValid: ::std::option::Option<
        unsafe extern "C" fn(
            item_to_addH: AEGP_ItemH,
            into_compH: AEGP_CompH,
            validPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_AddLayer: ::std::option::Option<
        unsafe extern "C" fn(
            item_to_addH: AEGP_ItemH,
            into_compH: AEGP_CompH,
            added_layerPH0: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_ReorderLayer: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_indexL: A_long) -> A_Err,
    >,
    pub AEGP_GetLayerMaskedBounds: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            boundsPR: *mut A_FloatRect,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerObjectType: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, object_type: *mut AEGP_ObjectType) -> A_Err,
    >,
    pub AEGP_IsLayer3D: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, is_3DPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsLayer2D: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, is_2DPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsVideoActive: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            is_activePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsLayerUsedAsTrackMatte: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            fill_must_be_activeB: A_Boolean,
            is_track_mattePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_DoesLayerHaveTrackMatte: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, has_track_mattePB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_ConvertCompToLayerTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            comp_timePT: *const A_Time,
            layer_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_ConvertLayerToCompTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            layer_timePT: *const A_Time,
            comp_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerDancingRandValue: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            comp_timePT: *const A_Time,
            rand_valuePL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerID: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, id_valP: *mut AEGP_LayerIDVal) -> A_Err,
    >,
    pub AEGP_GetLayerToWorldXform: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            comp_timeP: *const A_Time,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerToWorldXformFromView: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            view_timeP: *const A_Time,
            comp_timeP: *const A_Time,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerName: ::std::option::Option<
        unsafe extern "C" fn(aegp_layerH: AEGP_LayerH, new_nameZ: *const A_UTF16Char) -> A_Err,
    >,
    pub AEGP_GetLayerParent: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, parent_layerPH: *mut AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_SetLayerParent: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, parent_layerH0: AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_DeleteLayer: ::std::option::Option<unsafe extern "C" fn(layerH: AEGP_LayerH) -> A_Err>,
    pub AEGP_DuplicateLayer: ::std::option::Option<
        unsafe extern "C" fn(
            orig_layerH: AEGP_LayerH,
            duplicate_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerFromLayerID: ::std::option::Option<
        unsafe extern "C" fn(
            parent_compH: AEGP_CompH,
            id: AEGP_LayerIDVal,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerLabel: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, labelP: *mut AEGP_LabelID) -> A_Err,
    >,
    pub AEGP_SetLayerLabel: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, label: AEGP_LabelID) -> A_Err,
    >,
    pub AEGP_GetLayerSamplingQuality: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            qualityP: *mut AEGP_LayerSamplingQuality,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerSamplingQuality: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, quality: AEGP_LayerSamplingQuality) -> A_Err,
    >,
    pub AEGP_GetTrackMatteLayer: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, track_matte_layerPH: *mut AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_SetTrackMatte: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            track_matte_layerH0: AEGP_LayerH,
            track_matte_type: AEGP_TrackMatte,
        ) -> A_Err,
    >,
    pub AEGP_RemoveTrackMatte:
        ::std::option::Option<unsafe extern "C" fn(layerH: AEGP_LayerH) -> A_Err>,
}
pub const AEGP_LayerStream_NONE: _bindgen_ty_117 = -1;
pub const AEGP_LayerStream_ANCHORPOINT: _bindgen_ty_117 = 0;
pub const AEGP_LayerStream_POSITION: _bindgen_ty_117 = 1;
pub const AEGP_LayerStream_SCALE: _bindgen_ty_117 = 2;
pub const AEGP_LayerStream_ROTATION: _bindgen_ty_117 = 3;
pub const AEGP_LayerStream_ROTATE_Z: _bindgen_ty_117 = 3;
pub const AEGP_LayerStream_OPACITY: _bindgen_ty_117 = 4;
pub const AEGP_LayerStream_AUDIO: _bindgen_ty_117 = 5;
pub const AEGP_LayerStream_MARKER: _bindgen_ty_117 = 6;
pub const AEGP_LayerStream_TIME_REMAP: _bindgen_ty_117 = 7;
pub const AEGP_LayerStream_ROTATE_X: _bindgen_ty_117 = 8;
pub const AEGP_LayerStream_ROTATE_Y: _bindgen_ty_117 = 9;
pub const AEGP_LayerStream_ORIENTATION: _bindgen_ty_117 = 10;
pub const AEGP_LayerStream_ZOOM: _bindgen_ty_117 = 11;
pub const AEGP_LayerStream_DEPTH_OF_FIELD: _bindgen_ty_117 = 12;
pub const AEGP_LayerStream_FOCUS_DISTANCE: _bindgen_ty_117 = 13;
pub const AEGP_LayerStream_APERTURE: _bindgen_ty_117 = 14;
pub const AEGP_LayerStream_BLUR_LEVEL: _bindgen_ty_117 = 15;
pub const AEGP_LayerStream_INTENSITY: _bindgen_ty_117 = 16;
pub const AEGP_LayerStream_COLOR: _bindgen_ty_117 = 17;
pub const AEGP_LayerStream_CONE_ANGLE: _bindgen_ty_117 = 18;
pub const AEGP_LayerStream_CONE_FEATHER: _bindgen_ty_117 = 19;
pub const AEGP_LayerStream_SHADOW_DARKNESS: _bindgen_ty_117 = 20;
pub const AEGP_LayerStream_SHADOW_DIFFUSION: _bindgen_ty_117 = 21;
pub const AEGP_LayerStream_ACCEPTS_SHADOWS: _bindgen_ty_117 = 22;
pub const AEGP_LayerStream_ACCEPTS_LIGHTS: _bindgen_ty_117 = 23;
pub const AEGP_LayerStream_AMBIENT_COEFF: _bindgen_ty_117 = 24;
pub const AEGP_LayerStream_DIFFUSE_COEFF: _bindgen_ty_117 = 25;
pub const AEGP_LayerStream_SPECULAR_INTENSITY: _bindgen_ty_117 = 26;
pub const AEGP_LayerStream_SPECULAR_SHININESS: _bindgen_ty_117 = 27;
pub const AEGP_LayerStream_CASTS_SHADOWS: _bindgen_ty_117 = 28;
pub const AEGP_LayerStream_LIGHT_TRANSMISSION: _bindgen_ty_117 = 29;
pub const AEGP_LayerStream_METAL: _bindgen_ty_117 = 30;
pub const AEGP_LayerStream_SOURCE_TEXT: _bindgen_ty_117 = 31;
pub const AEGP_LayerStream_IRIS_SHAPE: _bindgen_ty_117 = 32;
pub const AEGP_LayerStream_IRIS_ROTATION: _bindgen_ty_117 = 33;
pub const AEGP_LayerStream_IRIS_ROUNDNESS: _bindgen_ty_117 = 34;
pub const AEGP_LayerStream_IRIS_ASPECT_RATIO: _bindgen_ty_117 = 35;
pub const AEGP_LayerStream_IRIS_DIFFRACTION_FRINGE: _bindgen_ty_117 = 36;
pub const AEGP_LayerStream_IRIS_HIGHLIGHT_GAIN: _bindgen_ty_117 = 37;
pub const AEGP_LayerStream_IRIS_HIGHLIGHT_THRESHOLD: _bindgen_ty_117 = 38;
pub const AEGP_LayerStream_IRIS_HIGHLIGHT_SATURATION: _bindgen_ty_117 = 39;
pub const AEGP_LayerStream_LIGHT_FALLOFF_TYPE: _bindgen_ty_117 = 40;
pub const AEGP_LayerStream_LIGHT_FALLOFF_START: _bindgen_ty_117 = 41;
pub const AEGP_LayerStream_LIGHT_FALLOFF_DISTANCE: _bindgen_ty_117 = 42;
pub const AEGP_LayerStream_REFLECTION_INTENSITY: _bindgen_ty_117 = 43;
pub const AEGP_LayerStream_REFLECTION_SHARPNESS: _bindgen_ty_117 = 44;
pub const AEGP_LayerStream_REFLECTION_ROLLOFF: _bindgen_ty_117 = 45;
pub const AEGP_LayerStream_TRANSPARENCY_COEFF: _bindgen_ty_117 = 46;
pub const AEGP_LayerStream_TRANSPARENCY_ROLLOFF: _bindgen_ty_117 = 47;
pub const AEGP_LayerStream_INDEX_OF_REFRACTION: _bindgen_ty_117 = 48;
pub const AEGP_LayerStream_EXTRUSION_BEVEL_STYLE: _bindgen_ty_117 = 49;
pub const AEGP_LayerStream_EXTRUSION_BEVEL_DIRECTION: _bindgen_ty_117 = 50;
pub const AEGP_LayerStream_EXTRUSION_BEVEL_DEPTH: _bindgen_ty_117 = 51;
pub const AEGP_LayerStream_EXTRUSION_HOLE_BEVEL_DEPTH: _bindgen_ty_117 = 52;
pub const AEGP_LayerStream_EXTRUSION_DEPTH: _bindgen_ty_117 = 53;
pub const AEGP_LayerStream_PLANE_CURVATURE: _bindgen_ty_117 = 54;
pub const AEGP_LayerStream_PLANE_SUBDIVISION: _bindgen_ty_117 = 55;
pub const AEGP_LayerStream_LIGHT_BACKGROUND_VISIBLE: _bindgen_ty_117 = 56;
pub const AEGP_LayerStream_LIGHT_BACKGROUND_OPACITY: _bindgen_ty_117 = 57;
pub const AEGP_LayerStream_LIGHT_BACKGROUND_BLUR: _bindgen_ty_117 = 58;
pub const AEGP_LayerStream_SHADOW_COLOR: _bindgen_ty_117 = 59;
pub const AEGP_LayerStream_NUMTYPES: _bindgen_ty_117 = 60;
pub const AEGP_LayerStream_BEGIN: _bindgen_ty_117 = 0;
pub const AEGP_LayerStream_END: _bindgen_ty_117 = 60;
pub type _bindgen_ty_117 = ::std::os::raw::c_int;
pub type AEGP_LayerStream = A_long;
pub const AEGP_MaskStream_OUTLINE: _bindgen_ty_118 = 400;
pub const AEGP_MaskStream_OPACITY: _bindgen_ty_118 = 401;
pub const AEGP_MaskStream_FEATHER: _bindgen_ty_118 = 402;
pub const AEGP_MaskStream_EXPANSION: _bindgen_ty_118 = 403;
pub const AEGP_MaskStream_BEGIN: _bindgen_ty_118 = 400;
pub const AEGP_MaskStream_END: _bindgen_ty_118 = 404;
pub type _bindgen_ty_118 = ::std::os::raw::c_int;
pub type AEGP_MaskStream = A_long;
pub const AEGP_StreamFlag_NONE: _bindgen_ty_119 = 0;
pub const AEGP_StreamFlag_HAS_MIN: _bindgen_ty_119 = 1;
pub const AEGP_StreamFlag_HAS_MAX: _bindgen_ty_119 = 2;
pub const AEGP_StreamFlag_IS_SPATIAL: _bindgen_ty_119 = 4;
pub type _bindgen_ty_119 = ::std::os::raw::c_int;
pub type AEGP_StreamFlags = A_long;
pub type AEGP_OneDVal = A_FpLong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_TwoDVal {
    pub x: A_FpLong,
    pub y: A_FpLong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ThreeDVal {
    pub x: A_FpLong,
    pub y: A_FpLong,
    pub z: A_FpLong,
}
pub type AEGP_FourDVal = [A_FpLong; 4usize];
pub type AEGP_ArbBlockVal = A_Handle;
pub const AEGP_KeyInterp_NONE: _bindgen_ty_120 = 0;
pub const AEGP_KeyInterp_LINEAR: _bindgen_ty_120 = 1;
pub const AEGP_KeyInterp_BEZIER: _bindgen_ty_120 = 2;
pub const AEGP_KeyInterp_HOLD: _bindgen_ty_120 = 3;
pub const AEGP_Interp_NUM_VALUES: _bindgen_ty_120 = 4;
pub type _bindgen_ty_120 = ::std::os::raw::c_int;
pub type AEGP_KeyframeInterpolationType = A_long;
pub const AEGP_KeyInterpMask_NONE: _bindgen_ty_121 = 0;
pub const AEGP_KeyInterpMask_LINEAR: _bindgen_ty_121 = 1;
pub const AEGP_KeyInterpMask_BEZIER: _bindgen_ty_121 = 2;
pub const AEGP_KeyInterpMask_HOLD: _bindgen_ty_121 = 4;
pub const AEGP_KeyInterpMask_CUSTOM: _bindgen_ty_121 = 8;
pub const AEGP_KeyInterpMask_ANY: _bindgen_ty_121 = 65535;
pub type _bindgen_ty_121 = ::std::os::raw::c_int;
pub type AEGP_KeyInterpolationMask = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_KeyframeEase {
    pub speedF: A_FpLong,
    pub influenceF: A_FpLong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AEGP_StreamVal2 {
    pub four_d: AEGP_FourDVal,
    pub three_d: AEGP_ThreeDVal,
    pub two_d: AEGP_TwoDVal,
    pub one_d: AEGP_OneDVal,
    pub color: AEGP_ColorVal,
    pub arbH: AEGP_ArbBlockVal,
    pub markerP: AEGP_MarkerValP,
    pub layer_id: AEGP_LayerIDVal,
    pub mask_id: AEGP_MaskIDVal,
    pub mask: AEGP_MaskOutlineValH,
    pub text_documentH: AEGP_TextDocumentH,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AEGP_StreamValue2 {
    pub streamH: AEGP_StreamRefH,
    pub val: AEGP_StreamVal2,
}
pub const AEGP_StreamType_NO_DATA: _bindgen_ty_122 = 0;
pub const AEGP_StreamType_ThreeD_SPATIAL: _bindgen_ty_122 = 1;
pub const AEGP_StreamType_ThreeD: _bindgen_ty_122 = 2;
pub const AEGP_StreamType_TwoD_SPATIAL: _bindgen_ty_122 = 3;
pub const AEGP_StreamType_TwoD: _bindgen_ty_122 = 4;
pub const AEGP_StreamType_OneD: _bindgen_ty_122 = 5;
pub const AEGP_StreamType_COLOR: _bindgen_ty_122 = 6;
pub const AEGP_StreamType_ARB: _bindgen_ty_122 = 7;
pub const AEGP_StreamType_MARKER: _bindgen_ty_122 = 8;
pub const AEGP_StreamType_LAYER_ID: _bindgen_ty_122 = 9;
pub const AEGP_StreamType_MASK_ID: _bindgen_ty_122 = 10;
pub const AEGP_StreamType_MASK: _bindgen_ty_122 = 11;
pub const AEGP_StreamType_TEXT_DOCUMENT: _bindgen_ty_122 = 12;
pub type _bindgen_ty_122 = ::std::os::raw::c_int;
pub type AEGP_StreamType = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_StreamSuite6 {
    pub AEGP_IsStreamLegal: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            which_stream: AEGP_LayerStream,
            is_legalP: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_CanVaryOverTime: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, can_varyPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetValidInterpolations: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            valid_interpolationsP: *mut AEGP_KeyInterpolationMask,
        ) -> A_Err,
    >,
    pub AEGP_GetNewLayerStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            which_stream: AEGP_LayerStream,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectNumParamStreams: ::std::option::Option<
        unsafe extern "C" fn(effect_refH: AEGP_EffectRefH, num_paramsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetNewEffectStreamByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            effect_refH: AEGP_EffectRefH,
            param_index: PF_ParamIndex,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewMaskStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            mask_refH: AEGP_MaskRefH,
            which_stream: AEGP_MaskStream,
            mask_streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeStream:
        ::std::option::Option<unsafe extern "C" fn(streamH: AEGP_StreamRefH) -> A_Err>,
    pub AEGP_GetStreamName: ::std::option::Option<
        unsafe extern "C" fn(
            pluginID: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            force_englishB: A_Boolean,
            utf_stream_namePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamUnitsText: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            force_englishB: A_Boolean,
            unitsZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamProperties: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            flagsP: *mut AEGP_StreamFlags,
            minP0: *mut A_FpLong,
            maxP0: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_IsStreamTimevarying: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, is_timevaryingPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetStreamType: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, stream_typeP: *mut AEGP_StreamType) -> A_Err,
    >,
    pub AEGP_GetNewStreamValue: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            pre_expressionB: A_Boolean,
            valueP: *mut AEGP_StreamValue2,
        ) -> A_Err,
    >,
    pub AEGP_DisposeStreamValue:
        ::std::option::Option<unsafe extern "C" fn(valueP: *mut AEGP_StreamValue2) -> A_Err>,
    pub AEGP_SetStreamValue: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            valueP: *mut AEGP_StreamValue2,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerStreamValue: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            which_stream: AEGP_LayerStream,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            pre_expressionB: A_Boolean,
            stream_valP: *mut AEGP_StreamVal2,
            stream_typeP0: *mut AEGP_StreamType,
        ) -> A_Err,
    >,
    pub AEGP_GetExpressionState: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            enabledPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_SetExpressionState: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            enabledB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetExpression: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            unicodeHZ: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_SetExpression: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            expressionP: *const A_UTF16Char,
        ) -> A_Err,
    >,
    pub AEGP_DuplicateStreamRef: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            dup_streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetUniqueStreamID: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, outID: *mut i32) -> A_Err,
    >,
}
pub const AEGP_StreamGroupingType_NONE: _bindgen_ty_123 = -1;
pub const AEGP_StreamGroupingType_LEAF: _bindgen_ty_123 = 0;
pub const AEGP_StreamGroupingType_NAMED_GROUP: _bindgen_ty_123 = 1;
pub const AEGP_StreamGroupingType_INDEXED_GROUP: _bindgen_ty_123 = 2;
pub type _bindgen_ty_123 = ::std::os::raw::c_int;
pub type AEGP_StreamGroupingType = A_long;
pub const AEGP_DynStreamFlag_ACTIVE_EYEBALL: _bindgen_ty_124 = 1;
pub const AEGP_DynStreamFlag_HIDDEN: _bindgen_ty_124 = 2;
pub const AEGP_DynStreamFlag_DISABLED: _bindgen_ty_124 = 16;
pub const AEGP_DynStreamFlag_ELIDED: _bindgen_ty_124 = 32;
pub const AEGP_DynStreamFlag_SHOWN_WHEN_EMPTY: _bindgen_ty_124 = 1024;
pub const AEGP_DynStreamFlag_SKIP_REVEAL_WHEN_UNHIDDEN: _bindgen_ty_124 = 65536;
pub type _bindgen_ty_124 = ::std::os::raw::c_int;
pub type AEGP_DynStreamFlags = A_u_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_DynamicStreamSuite4 {
    pub AEGP_GetNewStreamRefForLayer: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewStreamRefForMask: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            maskH: AEGP_MaskRefH,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamDepth: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, depthPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetStreamGroupingType: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            group_typeP: *mut AEGP_StreamGroupingType,
        ) -> A_Err,
    >,
    pub AEGP_GetNumStreamsInGroup: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, num_streamsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetDynamicStreamFlags: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            stream_flagsP: *mut AEGP_DynStreamFlags,
        ) -> A_Err,
    >,
    pub AEGP_SetDynamicStreamFlag: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            one_flag: AEGP_DynStreamFlags,
            undoableB: A_Boolean,
            setB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetNewStreamRefByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            parent_groupH: AEGP_StreamRefH,
            indexL: A_long,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewStreamRefByMatchname: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            parent_groupH: AEGP_StreamRefH,
            utf8_match_nameZ: *const A_char,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_DeleteStream:
        ::std::option::Option<unsafe extern "C" fn(streamH: AEGP_StreamRefH) -> A_Err>,
    pub AEGP_ReorderStream: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, new_indexL: A_long) -> A_Err,
    >,
    pub AEGP_DuplicateStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            new_indexPL0: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_SetStreamName: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, nameZ: *const A_UTF16Char) -> A_Err,
    >,
    pub AEGP_CanAddStream: ::std::option::Option<
        unsafe extern "C" fn(
            group_streamH: AEGP_StreamRefH,
            utf8_match_nameZ: *const A_char,
            can_addPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_AddStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            indexed_group_streamH: AEGP_StreamRefH,
            utf8_match_nameZ: *const A_char,
            streamPH0: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetMatchName: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, utf8_match_nameZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_GetNewParentStreamRef: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            parent_streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamIsModified: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, modifiedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetStreamIndexInParent: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, indexPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_IsSeparationLeader: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, leaderPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_AreDimensionsSeparated: ::std::option::Option<
        unsafe extern "C" fn(leader_streamH: AEGP_StreamRefH, separatedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetDimensionsSeparated: ::std::option::Option<
        unsafe extern "C" fn(leader_streamH: AEGP_StreamRefH, separatedB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetSeparationFollower: ::std::option::Option<
        unsafe extern "C" fn(
            leader_streamH: AEGP_StreamRefH,
            dimS: A_short,
            follower_streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_IsSeparationFollower: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, followerPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetSeparationLeader: ::std::option::Option<
        unsafe extern "C" fn(
            follower_streamH: AEGP_StreamRefH,
            leader_streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetSeparationDimension: ::std::option::Option<
        unsafe extern "C" fn(follower_streamH: AEGP_StreamRefH, dimPS: *mut A_short) -> A_Err,
    >,
}
pub type AEGP_KeyframeIndex = A_long;
pub const AEGP_KeyframeFlag_NONE: _bindgen_ty_125 = 0;
pub const AEGP_KeyframeFlag_TEMPORAL_CONTINUOUS: _bindgen_ty_125 = 1;
pub const AEGP_KeyframeFlag_TEMPORAL_AUTOBEZIER: _bindgen_ty_125 = 2;
pub const AEGP_KeyframeFlag_SPATIAL_CONTINUOUS: _bindgen_ty_125 = 4;
pub const AEGP_KeyframeFlag_SPATIAL_AUTOBEZIER: _bindgen_ty_125 = 8;
pub const AEGP_KeyframeFlag_ROVING: _bindgen_ty_125 = 16;
pub type _bindgen_ty_125 = ::std::os::raw::c_int;
pub type AEGP_KeyframeFlags = A_long;
pub const AEGP_NumKF_NO_DATA: _bindgen_ty_126 = -1;
pub type _bindgen_ty_126 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_KeyframeSuite5 {
    pub AEGP_GetStreamNumKFs: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, num_kfsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetKeyframeTime: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            time_mode: AEGP_LTimeMode,
            timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_InsertKeyframe: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            key_indexP: *mut AEGP_KeyframeIndex,
        ) -> A_Err,
    >,
    pub AEGP_DeleteKeyframe: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, key_index: AEGP_KeyframeIndex) -> A_Err,
    >,
    pub AEGP_GetNewKeyframeValue: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            valueP: *mut AEGP_StreamValue2,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeValue: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            valueP: *const AEGP_StreamValue2,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamValueDimensionality: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, value_dimPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_GetStreamTemporalDimensionality: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, temporal_dimPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_GetNewKeyframeSpatialTangents: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            in_tanP0: *mut AEGP_StreamValue2,
            out_tanP0: *mut AEGP_StreamValue2,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeSpatialTangents: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            in_tanP0: *const AEGP_StreamValue2,
            out_tanP0: *const AEGP_StreamValue2,
        ) -> A_Err,
    >,
    pub AEGP_GetKeyframeTemporalEase: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            dimensionL: A_long,
            in_easeP0: *mut AEGP_KeyframeEase,
            out_easeP0: *mut AEGP_KeyframeEase,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeTemporalEase: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            dimensionL: A_long,
            in_easeP0: *const AEGP_KeyframeEase,
            out_easeP0: *const AEGP_KeyframeEase,
        ) -> A_Err,
    >,
    pub AEGP_GetKeyframeFlags: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            flagsP: *mut AEGP_KeyframeFlags,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeFlag: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            flag: AEGP_KeyframeFlags,
            true_falseB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetKeyframeInterpolation: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            in_interpP0: *mut AEGP_KeyframeInterpolationType,
            out_interpP0: *mut AEGP_KeyframeInterpolationType,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeInterpolation: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            in_interp: AEGP_KeyframeInterpolationType,
            out_interp: AEGP_KeyframeInterpolationType,
        ) -> A_Err,
    >,
    pub AEGP_StartAddKeyframes: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, akPH: *mut AEGP_AddKeyframesInfoH) -> A_Err,
    >,
    pub AEGP_AddKeyframes: ::std::option::Option<
        unsafe extern "C" fn(
            akH: AEGP_AddKeyframesInfoH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            key_indexPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_SetAddKeyframe: ::std::option::Option<
        unsafe extern "C" fn(
            akH: AEGP_AddKeyframesInfoH,
            key_indexL: A_long,
            valueP: *const AEGP_StreamValue2,
        ) -> A_Err,
    >,
    pub AEGP_EndAddKeyframes: ::std::option::Option<
        unsafe extern "C" fn(addB: A_Boolean, akH: AEGP_AddKeyframesInfoH) -> A_Err,
    >,
    pub AEGP_GetKeyframeLabelColorIndex: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            key_labelP: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeLabelColorIndex: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            key_label: A_long,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_TextDocumentSuite1 {
    pub AEGP_GetNewText: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            text_documentH: AEGP_TextDocumentH,
            unicodePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_SetText: ::std::option::Option<
        unsafe extern "C" fn(
            text_documentH: AEGP_TextDocumentH,
            unicodePS: *const A_u_short,
            lengthL: A_long,
        ) -> A_Err,
    >,
}
pub const AEGP_MarkerString_NONE: _bindgen_ty_127 = 0;
pub const AEGP_MarkerString_COMMENT: _bindgen_ty_127 = 1;
pub const AEGP_MarkerString_CHAPTER: _bindgen_ty_127 = 2;
pub const AEGP_MarkerString_URL: _bindgen_ty_127 = 3;
pub const AEGP_MarkerString_FRAME_TARGET: _bindgen_ty_127 = 4;
pub const AEGP_MarkerString_CUE_POINT_NAME: _bindgen_ty_127 = 5;
pub const AEGP_MarkerString_NUMTYPES: _bindgen_ty_127 = 6;
pub type _bindgen_ty_127 = ::std::os::raw::c_int;
pub type AEGP_MarkerStringType = A_long;
pub const AEGP_MarkerFlag_NONE: _bindgen_ty_128 = 0;
pub const AEGP_MarkerFlag_NAVIGATION: _bindgen_ty_128 = 1;
pub const AEGP_MarkerFlag_PROTECT_REGION: _bindgen_ty_128 = 2;
pub type _bindgen_ty_128 = ::std::os::raw::c_int;
pub type AEGP_MarkerFlagType = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_MarkerSuite3 {
    pub AEGP_NewMarker:
        ::std::option::Option<unsafe extern "C" fn(markerPP: *mut AEGP_MarkerValP) -> A_Err>,
    pub AEGP_DisposeMarker:
        ::std::option::Option<unsafe extern "C" fn(markerP: AEGP_MarkerValP) -> A_Err>,
    pub AEGP_DuplicateMarker: ::std::option::Option<
        unsafe extern "C" fn(markerP: AEGP_MarkerValP, new_markerP: *mut AEGP_MarkerValP) -> A_Err,
    >,
    pub AEGP_SetMarkerFlag: ::std::option::Option<
        unsafe extern "C" fn(
            markerP: AEGP_MarkerValP,
            flagType: AEGP_MarkerFlagType,
            valueB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetMarkerFlag: ::std::option::Option<
        unsafe extern "C" fn(
            markerP: AEGP_ConstMarkerValP,
            flagType: AEGP_MarkerFlagType,
            valueBP: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetMarkerString: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            markerP: AEGP_ConstMarkerValP,
            strType: AEGP_MarkerStringType,
            unicodePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_SetMarkerString: ::std::option::Option<
        unsafe extern "C" fn(
            markerP: AEGP_MarkerValP,
            strType: AEGP_MarkerStringType,
            unicodeP: *const A_u_short,
            lengthL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_CountCuePointParams: ::std::option::Option<
        unsafe extern "C" fn(markerP: AEGP_ConstMarkerValP, paramsLP: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetIndCuePointParam: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            markerP: AEGP_ConstMarkerValP,
            param_indexL: A_long,
            unicodeKeyPH: *mut AEGP_MemHandle,
            unicodeValuePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_SetIndCuePointParam: ::std::option::Option<
        unsafe extern "C" fn(
            markerP: AEGP_MarkerValP,
            param_indexL: A_long,
            unicodeKeyP: *const A_u_short,
            key_lengthL: A_long,
            unicodeValueP: *const A_u_short,
            value_lengthL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_InsertCuePointParam: ::std::option::Option<
        unsafe extern "C" fn(markerP: AEGP_MarkerValP, param_indexL: A_long) -> A_Err,
    >,
    pub AEGP_DeleteIndCuePointParam: ::std::option::Option<
        unsafe extern "C" fn(markerP: AEGP_MarkerValP, param_indexL: A_long) -> A_Err,
    >,
    pub AEGP_SetMarkerDuration: ::std::option::Option<
        unsafe extern "C" fn(markerP: AEGP_MarkerValP, durationPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetMarkerDuration: ::std::option::Option<
        unsafe extern "C" fn(markerP: AEGP_ConstMarkerValP, durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetMarkerLabel: ::std::option::Option<
        unsafe extern "C" fn(markerP: AEGP_MarkerValP, value: A_long) -> A_Err,
    >,
    pub AEGP_GetMarkerLabel: ::std::option::Option<
        unsafe extern "C" fn(markerP: AEGP_ConstMarkerValP, valueP: *mut A_long) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_TextLayerSuite1 {
    pub AEGP_GetNewTextOutlines: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            layer_timePT: *const A_Time,
            outlinesPH: *mut AEGP_TextOutlinesH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeTextOutlines:
        ::std::option::Option<unsafe extern "C" fn(outlinesH: AEGP_TextOutlinesH) -> A_Err>,
    pub AEGP_GetNumTextOutlines: ::std::option::Option<
        unsafe extern "C" fn(outlinesH: AEGP_TextOutlinesH, num_outlinesPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetIndexedTextOutline: ::std::option::Option<
        unsafe extern "C" fn(
            outlinesH: AEGP_TextOutlinesH,
            path_indexL: A_long,
            pathPP: *mut PF_PathOutlinePtr,
        ) -> A_Err,
    >,
}
pub type AEGP_InstalledEffectKey = A_long;
pub const AEGP_EffectFlags_NONE: _bindgen_ty_129 = 0;
pub const AEGP_EffectFlags_ACTIVE: _bindgen_ty_129 = 1;
pub const AEGP_EffectFlags_AUDIO_ONLY: _bindgen_ty_129 = 2;
pub const AEGP_EffectFlags_AUDIO_TOO: _bindgen_ty_129 = 4;
pub const AEGP_EffectFlags_MISSING: _bindgen_ty_129 = 8;
pub type _bindgen_ty_129 = ::std::os::raw::c_int;
pub type AEGP_EffectFlags = A_long;
pub type AEGP_EffectIndex = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_EffectSuite5 {
    pub AEGP_GetLayerNumEffects: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, num_effectsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerEffectByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            layer_effect_indexL: AEGP_EffectIndex,
            effectPH: *mut AEGP_EffectRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetInstalledKeyFromLayerEffect: ::std::option::Option<
        unsafe extern "C" fn(
            effect_refH: AEGP_EffectRefH,
            installed_effect_keyP: *mut AEGP_InstalledEffectKey,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectParamUnionByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            effect_refH: AEGP_EffectRefH,
            param_index: PF_ParamIndex,
            param_typeP: *mut PF_ParamType,
            uP0: *mut PF_ParamDefUnion,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectFlags: ::std::option::Option<
        unsafe extern "C" fn(
            effect_refH: AEGP_EffectRefH,
            effect_flagsP: *mut AEGP_EffectFlags,
        ) -> A_Err,
    >,
    pub AEGP_SetEffectFlags: ::std::option::Option<
        unsafe extern "C" fn(
            effect_refH: AEGP_EffectRefH,
            effect_flags_set_mask: AEGP_EffectFlags,
            effect_flags: AEGP_EffectFlags,
        ) -> A_Err,
    >,
    pub AEGP_ReorderEffect: ::std::option::Option<
        unsafe extern "C" fn(effect_refH: AEGP_EffectRefH, effect_indexL: A_long) -> A_Err,
    >,
    #[doc = " new command parameter addded. To get old behaviour pass in PF_Cmd_COMPLETELY_GENERAL for effect_command"]
    pub AEGP_EffectCallGeneric: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            effect_refH: AEGP_EffectRefH,
            timePT: *const A_Time,
            effect_cmd: PF_Cmd,
            effect_extraPV: *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_DisposeEffect:
        ::std::option::Option<unsafe extern "C" fn(effect_refH: AEGP_EffectRefH) -> A_Err>,
    pub AEGP_ApplyEffect: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            installed_effect_key: AEGP_InstalledEffectKey,
            effect_refPH: *mut AEGP_EffectRefH,
        ) -> A_Err,
    >,
    pub AEGP_DeleteLayerEffect:
        ::std::option::Option<unsafe extern "C" fn(effect_refH: AEGP_EffectRefH) -> A_Err>,
    pub AEGP_GetNumInstalledEffects:
        ::std::option::Option<unsafe extern "C" fn(num_installed_effectsPL: *mut A_long) -> A_Err>,
    pub AEGP_GetNextInstalledEffect: ::std::option::Option<
        unsafe extern "C" fn(
            installed_effect_key: AEGP_InstalledEffectKey,
            next_effectPH: *mut AEGP_InstalledEffectKey,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectName: ::std::option::Option<
        unsafe extern "C" fn(
            installed_effect_key: AEGP_InstalledEffectKey,
            nameZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectMatchName: ::std::option::Option<
        unsafe extern "C" fn(
            installed_effect_key: AEGP_InstalledEffectKey,
            utf8_match_nameZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectCategory: ::std::option::Option<
        unsafe extern "C" fn(
            installed_effect_key: AEGP_InstalledEffectKey,
            categoryZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_DuplicateEffect: ::std::option::Option<
        unsafe extern "C" fn(
            original_effect_refH: AEGP_EffectRefH,
            duplicate_effect_refPH: *mut AEGP_EffectRefH,
        ) -> A_Err,
    >,
    #[doc = " new in AE 13.0: effect masks"]
    pub AEGP_NumEffectMask: ::std::option::Option<
        unsafe extern "C" fn(effect_refH: AEGP_EffectRefH, num_masksPL: *mut A_u_long) -> A_Err,
    >,
    pub AEGP_GetEffectMaskID: ::std::option::Option<
        unsafe extern "C" fn(
            effect_refH: AEGP_EffectRefH,
            mask_indexL: A_u_long,
            id_valP: *mut AEGP_MaskIDVal,
        ) -> A_Err,
    >,
    pub AEGP_AddEffectMask: ::std::option::Option<
        unsafe extern "C" fn(
            effect_refH: AEGP_EffectRefH,
            id_val: AEGP_MaskIDVal,
            streamPH0: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_RemoveEffectMask: ::std::option::Option<
        unsafe extern "C" fn(effect_refH: AEGP_EffectRefH, id_val: AEGP_MaskIDVal) -> A_Err,
    >,
    pub AEGP_SetEffectMask: ::std::option::Option<
        unsafe extern "C" fn(
            effect_refH: AEGP_EffectRefH,
            mask_indexL: A_u_long,
            id_val: AEGP_MaskIDVal,
            streamPH0: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetIsInternalEffect: ::std::option::Option<
        unsafe extern "C" fn(
            installed_effect_key: AEGP_InstalledEffectKey,
            isInternal: *mut A_Boolean,
        ) -> A_Err,
    >,
}
pub type AEGP_MaskIndex = A_long;
pub const AEGP_MaskMBlur_SAME_AS_LAYER: _bindgen_ty_130 = 0;
pub const AEGP_MaskMBlur_OFF: _bindgen_ty_130 = 1;
pub const AEGP_MaskMBlur_ON: _bindgen_ty_130 = 2;
pub type _bindgen_ty_130 = ::std::os::raw::c_int;
pub type AEGP_MaskMBlur = A_u_char;
pub const AEGP_MaskFeatherFalloff_SMOOTH: _bindgen_ty_131 = 0;
pub const AEGP_MaskFeatherFalloff_LINEAR: _bindgen_ty_131 = 1;
pub type _bindgen_ty_131 = ::std::os::raw::c_int;
pub type AEGP_MaskFeatherFalloff = A_u_char;
pub const AEGP_MaskFeatherInterp_NORMAL: _bindgen_ty_132 = 0;
pub const AEGP_MaskFeatherInterp_HOLD_CW: _bindgen_ty_132 = 1;
pub type _bindgen_ty_132 = ::std::os::raw::c_int;
pub type AEGP_MaskFeatherInterp = A_u_char;
pub const AEGP_MaskFeatherType_OUTER: _bindgen_ty_133 = 0;
pub const AEGP_MaskFeatherType_INNER: _bindgen_ty_133 = 1;
pub type _bindgen_ty_133 = ::std::os::raw::c_int;
pub type AEGP_MaskFeatherType = A_u_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_MaskSuite6 {
    pub AEGP_GetLayerNumMasks: ::std::option::Option<
        unsafe extern "C" fn(aegp_layerH: AEGP_LayerH, num_masksPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerMaskByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            mask_indexL: AEGP_MaskIndex,
            maskPH: *mut AEGP_MaskRefH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeMask:
        ::std::option::Option<unsafe extern "C" fn(mask_refH: AEGP_MaskRefH) -> A_Err>,
    pub AEGP_GetMaskInvert: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, invertPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetMaskInvert: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, invertB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetMaskMode: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, modeP: *mut PF_MaskMode) -> A_Err,
    >,
    pub AEGP_SetMaskMode: ::std::option::Option<
        unsafe extern "C" fn(maskH: AEGP_MaskRefH, mode: PF_MaskMode) -> A_Err,
    >,
    pub AEGP_GetMaskMotionBlurState: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, blur_stateP: *mut AEGP_MaskMBlur) -> A_Err,
    >,
    pub AEGP_SetMaskMotionBlurState: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, blur_state: AEGP_MaskMBlur) -> A_Err,
    >,
    pub AEGP_GetMaskFeatherFalloff: ::std::option::Option<
        unsafe extern "C" fn(
            mask_refH: AEGP_MaskRefH,
            feather_falloffP: *mut AEGP_MaskFeatherFalloff,
        ) -> A_Err,
    >,
    pub AEGP_SetMaskFeatherFalloff: ::std::option::Option<
        unsafe extern "C" fn(
            mask_refH: AEGP_MaskRefH,
            feather_falloffP: AEGP_MaskFeatherFalloff,
        ) -> A_Err,
    >,
    pub AEGP_GetMaskID: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, id_valP: *mut AEGP_MaskIDVal) -> A_Err,
    >,
    pub AEGP_CreateNewMask: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            mask_refPH: *mut AEGP_MaskRefH,
            mask_indexPL0: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_DeleteMaskFromLayer:
        ::std::option::Option<unsafe extern "C" fn(mask_refH: AEGP_MaskRefH) -> A_Err>,
    pub AEGP_GetMaskColor: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, colorP: *mut AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_SetMaskColor: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, colorP: *const AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_GetMaskLockState: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, is_lockedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetMaskLockState: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, lockB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetMaskIsRotoBezier: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, is_roto_bezierPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetMaskIsRotoBezier: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, is_roto_bezierB: A_Boolean) -> A_Err,
    >,
    pub AEGP_DuplicateMask: ::std::option::Option<
        unsafe extern "C" fn(
            orig_mask_refH: AEGP_MaskRefH,
            duplicate_mask_refPH: *mut AEGP_MaskRefH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_MaskFeather {
    pub segment: A_long,
    pub segment_sF: PF_FpLong,
    pub radiusF: PF_FpLong,
    pub ui_corner_angleF: PF_FpShort,
    pub tensionF: PF_FpShort,
    pub interp: AEGP_MaskFeatherInterp,
    pub type_: AEGP_MaskFeatherType,
}
pub type AEGP_FeatherIndex = A_long;
pub type AEGP_MaskVertex = PF_PathVertex;
pub type AEGP_VertexIndex = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_MaskOutlineSuite3 {
    pub AEGP_IsMaskOutlineOpen: ::std::option::Option<
        unsafe extern "C" fn(mask_outlineH: AEGP_MaskOutlineValH, openPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetMaskOutlineOpen: ::std::option::Option<
        unsafe extern "C" fn(mask_outlineH: AEGP_MaskOutlineValH, openB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetMaskOutlineNumSegments: ::std::option::Option<
        unsafe extern "C" fn(
            mask_outlineH: AEGP_MaskOutlineValH,
            num_segmentsPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetMaskOutlineVertexInfo: ::std::option::Option<
        unsafe extern "C" fn(
            mask_outlineH: AEGP_MaskOutlineValH,
            which_pointL: AEGP_VertexIndex,
            vertexP: *mut AEGP_MaskVertex,
        ) -> A_Err,
    >,
    pub AEGP_SetMaskOutlineVertexInfo: ::std::option::Option<
        unsafe extern "C" fn(
            mask_outlineH: AEGP_MaskOutlineValH,
            which_pointL: AEGP_VertexIndex,
            vertexP: *const AEGP_MaskVertex,
        ) -> A_Err,
    >,
    pub AEGP_CreateVertex: ::std::option::Option<
        unsafe extern "C" fn(
            mask_outlineH: AEGP_MaskOutlineValH,
            insert_position: AEGP_VertexIndex,
        ) -> A_Err,
    >,
    pub AEGP_DeleteVertex: ::std::option::Option<
        unsafe extern "C" fn(mask_outlineH: AEGP_MaskOutlineValH, index: AEGP_VertexIndex) -> A_Err,
    >,
    pub AEGP_GetMaskOutlineNumFeathers: ::std::option::Option<
        unsafe extern "C" fn(
            mask_outlineH: AEGP_MaskOutlineValH,
            num_feathersPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetMaskOutlineFeatherInfo: ::std::option::Option<
        unsafe extern "C" fn(
            mask_outlineH: AEGP_MaskOutlineValH,
            which_featherL: AEGP_FeatherIndex,
            featherP: *mut AEGP_MaskFeather,
        ) -> A_Err,
    >,
    pub AEGP_SetMaskOutlineFeatherInfo: ::std::option::Option<
        unsafe extern "C" fn(
            mask_outlineH: AEGP_MaskOutlineValH,
            which_featherL: AEGP_VertexIndex,
            featherP: *const AEGP_MaskFeather,
        ) -> A_Err,
    >,
    pub AEGP_CreateMaskOutlineFeather: ::std::option::Option<
        unsafe extern "C" fn(
            mask_outlineH: AEGP_MaskOutlineValH,
            featherP0: *const AEGP_MaskFeather,
            insert_positionP: *mut AEGP_FeatherIndex,
        ) -> A_Err,
    >,
    pub AEGP_DeleteMaskOutlineFeather: ::std::option::Option<
        unsafe extern "C" fn(
            mask_outlineH: AEGP_MaskOutlineValH,
            index: AEGP_FeatherIndex,
        ) -> A_Err,
    >,
}
pub type AEGP_InterlaceLabel = FIEL_Label;
pub const AEGP_AlphaPremul: _bindgen_ty_134 = 1;
pub const AEGP_AlphaInverted: _bindgen_ty_134 = 2;
pub const AEGP_AlphaIgnore: _bindgen_ty_134 = 4;
pub type _bindgen_ty_134 = ::std::os::raw::c_int;
pub type AEGP_AlphaFlags = A_u_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_AlphaLabel {
    pub flags: AEGP_AlphaFlags,
    pub redCu: A_u_char,
    pub greenCu: A_u_char,
    pub blueCu: A_u_char,
}
pub const AEGP_PulldownPhase_NO_PULLDOWN: _bindgen_ty_135 = 0;
pub const AEGP_PulldownPhase_WSSWW: _bindgen_ty_135 = 1;
pub const AEGP_PulldownPhase_SSWWW: _bindgen_ty_135 = 2;
pub const AEGP_PulldownPhase_SWWWS: _bindgen_ty_135 = 3;
pub const AEGP_PulldownPhase_WWWSS: _bindgen_ty_135 = 4;
pub const AEGP_PulldownPhase_WWSSW: _bindgen_ty_135 = 5;
pub const AEGP_PulldownPhase_WWWSW: _bindgen_ty_135 = 6;
pub const AEGP_PulldownPhase_WWSWW: _bindgen_ty_135 = 7;
pub const AEGP_PulldownPhase_WSWWW: _bindgen_ty_135 = 8;
pub const AEGP_PulldownPhase_SWWWW: _bindgen_ty_135 = 9;
pub const AEGP_PulldownPhase_WWWWS: _bindgen_ty_135 = 10;
pub type _bindgen_ty_135 = ::std::os::raw::c_int;
pub type AEGP_PulldownPhase = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_LoopBehavior {
    pub loops: A_long,
    pub reserved: A_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_FootageInterp {
    pub il: AEGP_InterlaceLabel,
    pub al: AEGP_AlphaLabel,
    pub pd: AEGP_PulldownPhase,
    pub loop_: AEGP_LoopBehavior,
    pub pix_aspect_ratio: A_Ratio,
    pub native_fpsF: A_FpLong,
    pub conform_fpsF: A_FpLong,
    pub depthL: A_long,
    pub motion_dB: A_Boolean,
}
pub const AEGP_LayerDrawStyle_LAYER_BOUNDS: _bindgen_ty_136 = 0;
pub const AEGP_LayerDrawStyle_DOCUMENT_BOUNDS: _bindgen_ty_136 = 1;
pub type _bindgen_ty_136 = ::std::os::raw::c_int;
pub type AEGP_LayerDrawStyle = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_FootageLayerKey {
    pub layer_idL: A_long,
    pub layer_indexL: A_long,
    pub nameAC: [A_char; 64usize],
    pub layer_draw_style: AEGP_LayerDrawStyle,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_FileSequenceImportOptions {
    pub all_in_folderB: A_Boolean,
    pub force_alphabeticalB: A_Boolean,
    pub start_frameL: A_long,
    pub end_frameL: A_long,
}
pub const AEGP_FootageSignature_NONE: _bindgen_ty_137 = -1;
pub const AEGP_FootageSignature_MISSING: _bindgen_ty_137 = 0;
pub const AEGP_FootageSignature_SOLID: _bindgen_ty_137 = 1399811177;
pub type _bindgen_ty_137 = ::std::os::raw::c_int;
pub type AEGP_FootageSignature = A_long;
pub const AEGP_InterpretationStyle_NO_DIALOG_GUESS: _bindgen_ty_138 = 0;
pub const AEGP_InterpretationStyle_DIALOG_OK: _bindgen_ty_138 = 1;
pub const AEGP_InterpretationStyle_NO_DIALOG_NO_GUESS: _bindgen_ty_138 = 2;
pub type _bindgen_ty_138 = ::std::os::raw::c_int;
pub type AEGP_InterpretationStyle = A_u_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_FootageSuite5 {
    pub AEGP_GetMainFootageFromItem: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, footagePH: *mut AEGP_FootageH) -> A_Err,
    >,
    pub AEGP_GetProxyFootageFromItem: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, proxy_footagePH: *mut AEGP_FootageH) -> A_Err,
    >,
    pub AEGP_GetFootageNumFiles: ::std::option::Option<
        unsafe extern "C" fn(
            footageH: AEGP_FootageH,
            num_main_filesPL0: *mut A_long,
            files_per_framePL0: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetFootagePath: ::std::option::Option<
        unsafe extern "C" fn(
            footageH: AEGP_FootageH,
            frame_numL: A_long,
            file_indexL: A_long,
            unicode_pathPH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetFootageSignature: ::std::option::Option<
        unsafe extern "C" fn(footageH: AEGP_FootageH, sigP: *mut AEGP_FootageSignature) -> A_Err,
    >,
    pub AEGP_NewFootage: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            pathZ: *const A_UTF16Char,
            layer_infoP0: *const AEGP_FootageLayerKey,
            sequence_optionsP0: *const AEGP_FileSequenceImportOptions,
            interp_style: AEGP_InterpretationStyle,
            reserved: *mut ::std::os::raw::c_void,
            footagePH: *mut AEGP_FootageH,
        ) -> A_Err,
    >,
    pub AEGP_AddFootageToProject: ::std::option::Option<
        unsafe extern "C" fn(
            footageH: AEGP_FootageH,
            folderH: AEGP_ItemH,
            added_itemPH0: *mut AEGP_ItemH,
        ) -> A_Err,
    >,
    pub AEGP_SetItemProxyFootage: ::std::option::Option<
        unsafe extern "C" fn(footageH: AEGP_FootageH, itemH: AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_ReplaceItemMainFootage: ::std::option::Option<
        unsafe extern "C" fn(footageH: AEGP_FootageH, itemH: AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_DisposeFootage:
        ::std::option::Option<unsafe extern "C" fn(footageH: AEGP_FootageH) -> A_Err>,
    pub AEGP_GetFootageInterpretation: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            proxyB: A_Boolean,
            interpP: *mut AEGP_FootageInterp,
        ) -> A_Err,
    >,
    pub AEGP_SetFootageInterpretation: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            proxyB: A_Boolean,
            interpP: *const AEGP_FootageInterp,
        ) -> A_Err,
    >,
    pub AEGP_GetFootageLayerKey: ::std::option::Option<
        unsafe extern "C" fn(
            footageH: AEGP_FootageH,
            layerKeyP: *mut AEGP_FootageLayerKey,
        ) -> A_Err,
    >,
    pub AEGP_NewPlaceholderFootage: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            nameZ: *const A_char,
            width: A_long,
            height: A_long,
            durationPT: *const A_Time,
            footagePH: *mut AEGP_FootageH,
        ) -> A_Err,
    >,
    pub AEGP_NewPlaceholderFootageWithPath: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            pathZ: *const A_UTF16Char,
            path_platform: AEGP_Platform,
            file_type: AEIO_FileType,
            widthL: A_long,
            heightL: A_long,
            durationPT: *const A_Time,
            footagePH: *mut AEGP_FootageH,
        ) -> A_Err,
    >,
    pub AEGP_NewSolidFootage: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            width: A_long,
            height: A_long,
            colorP: *const AEGP_ColorVal,
            footagePH: *mut AEGP_FootageH,
        ) -> A_Err,
    >,
    pub AEGP_GetSolidFootageColor: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            proxyB: A_Boolean,
            colorP: *mut AEGP_ColorVal,
        ) -> A_Err,
    >,
    pub AEGP_SetSolidFootageColor: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            proxyB: A_Boolean,
            colorP: *const AEGP_ColorVal,
        ) -> A_Err,
    >,
    pub AEGP_SetSolidFootageDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            proxyB: A_Boolean,
            widthL: A_long,
            heightL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetFootageSoundDataFormat: ::std::option::Option<
        unsafe extern "C" fn(
            footageH: AEGP_FootageH,
            sound_formatP: *mut AEGP_SoundDataFormat,
        ) -> A_Err,
    >,
    pub AEGP_GetFootageSequenceImportOptions: ::std::option::Option<
        unsafe extern "C" fn(
            footageH: AEGP_FootageH,
            optionsP: *mut AEGP_FileSequenceImportOptions,
        ) -> A_Err,
    >,
}
pub type AEGP_Command = A_long;
pub const AEGP_WindType_NONE: _bindgen_ty_139 = 0;
pub const AEGP_WindType_PROJECT: _bindgen_ty_139 = 1;
pub const AEGP_WindType_COMP: _bindgen_ty_139 = 2;
pub const AEGP_WindType_TIME_LAYOUT: _bindgen_ty_139 = 3;
pub const AEGP_WindType_LAYER: _bindgen_ty_139 = 4;
pub const AEGP_WindType_FOOTAGE: _bindgen_ty_139 = 5;
pub const AEGP_WindType_RENDER_QUEUE: _bindgen_ty_139 = 6;
pub const AEGP_WindType_QT: _bindgen_ty_139 = 7;
pub const AEGP_WindType_DIALOG: _bindgen_ty_139 = 8;
pub const AEGP_WindType_FLOWCHART: _bindgen_ty_139 = 9;
pub const AEGP_WindType_EFFECT: _bindgen_ty_139 = 10;
pub const AEGP_WindType_OTHER: _bindgen_ty_139 = 11;
pub type _bindgen_ty_139 = ::std::os::raw::c_int;
pub type AEGP_WindowType = A_LegacyEnumType;
pub const AEGP_HP_BeforeAE: _bindgen_ty_140 = 1;
pub const AEGP_HP_AfterAE: _bindgen_ty_140 = 2;
pub type _bindgen_ty_140 = ::std::os::raw::c_int;
pub type AEGP_HookPriority = A_u_long;
pub type AEGP_CommandHook = ::std::option::Option<
    unsafe extern "C" fn(
        plugin_refconP: AEGP_GlobalRefcon,
        refconP: AEGP_CommandRefcon,
        command: AEGP_Command,
        hook_priority: AEGP_HookPriority,
        already_handledB: A_Boolean,
        handledPB: *mut A_Boolean,
    ) -> A_Err,
>;
pub type AEGP_UpdateMenuHook = ::std::option::Option<
    unsafe extern "C" fn(
        plugin_refconP: AEGP_GlobalRefcon,
        refconP: AEGP_UpdateMenuRefcon,
        active_window: AEGP_WindowType,
    ) -> A_Err,
>;
pub type AEGP_DeathHook = ::std::option::Option<
    unsafe extern "C" fn(plugin_refconP: AEGP_GlobalRefcon, refconP: AEGP_DeathRefcon) -> A_Err,
>;
pub type AEGP_VersionHook = ::std::option::Option<
    unsafe extern "C" fn(
        plugin_refconP: AEGP_GlobalRefcon,
        refconP: AEGP_VersionRefcon,
        pf_versionPLu: *mut A_u_long,
    ) -> A_Err,
>;
pub type AEGP_AboutStringHook = ::std::option::Option<
    unsafe extern "C" fn(
        plugin_refconP: AEGP_GlobalRefcon,
        refconP: AEGP_AboutStringRefcon,
        aboutZ: *mut A_char,
    ) -> A_Err,
>;
pub type AEGP_AboutHook = ::std::option::Option<
    unsafe extern "C" fn(plugin_refconP: AEGP_GlobalRefcon, refconP: AEGP_AboutRefcon) -> A_Err,
>;
pub type AEGP_IdleHook = ::std::option::Option<
    unsafe extern "C" fn(
        plugin_refconP: AEGP_GlobalRefcon,
        refconP: AEGP_IdleRefcon,
        max_sleepPL: *mut A_long,
    ) -> A_Err,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_RegisterSuite5 {
    pub AEGP_RegisterCommandHook: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            hook_priority: AEGP_HookPriority,
            command: AEGP_Command,
            command_hook_func: AEGP_CommandHook,
            refconP: AEGP_CommandRefcon,
        ) -> A_Err,
    >,
    pub AEGP_RegisterUpdateMenuHook: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            update_menu_hook_func: AEGP_UpdateMenuHook,
            refconP: AEGP_UpdateMenuRefcon,
        ) -> A_Err,
    >,
    pub AEGP_RegisterDeathHook: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            death_hook_func: AEGP_DeathHook,
            refconP: AEGP_DeathRefcon,
        ) -> A_Err,
    >,
    pub AEGP_RegisterVersionHook: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            version_hook_func: AEGP_VersionHook,
            refconP: AEGP_VersionRefcon,
        ) -> A_Err,
    >,
    pub AEGP_RegisterAboutStringHook: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            about_string_hook_func: AEGP_AboutStringHook,
            refconP: AEGP_AboutStringRefcon,
        ) -> A_Err,
    >,
    pub AEGP_RegisterAboutHook: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            about_hook_func: AEGP_AboutHook,
            refconP: AEGP_AboutRefcon,
        ) -> A_Err,
    >,
    pub AEGP_RegisterArtisan: ::std::option::Option<
        unsafe extern "C" fn(
            api_version: A_Version,
            artisan_version: A_Version,
            aegp_plugin_id: AEGP_PluginID,
            aegp_refconPV: *mut ::std::os::raw::c_void,
            utf8_match_nameZ: *const A_char,
            artisan_nameZ: *const A_char,
            entry_funcs: *mut PR_ArtisanEntryPoints,
        ) -> A_Err,
    >,
    pub AEGP_RegisterIO: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            aegp_refconP: AEGP_IORefcon,
            io_infoP: *const AEIO_ModuleInfo,
            aeio_fcn_blockP: *const AEIO_FunctionBlock4,
        ) -> A_Err,
    >,
    pub AEGP_RegisterIdleHook: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            idle_hook_func: AEGP_IdleHook,
            refconP: AEGP_IdleRefcon,
        ) -> A_Err,
    >,
    pub AEGP_RegisterTracker: ::std::option::Option<
        unsafe extern "C" fn(
            api_version: A_Version,
            tracker_version: A_Version,
            aegp_plugin_id: AEGP_PluginID,
            refconP: AEGP_GlobalRefcon,
            utf8_match_nameZ: *const A_char,
            tracker_nameZ: *const A_char,
            entry_pointsP: *const PT_TrackerEntryPoints,
        ) -> A_Err,
    >,
    pub AEGP_RegisterInteractiveArtisan: ::std::option::Option<
        unsafe extern "C" fn(
            api_version: A_Version,
            artisan_version: A_Version,
            aegp_plugin_id: AEGP_PluginID,
            aegp_refconPV: *mut ::std::os::raw::c_void,
            utf8_match_nameZ: *const A_char,
            artisan_nameZ: *const A_char,
            entry_funcs: *mut PR_ArtisanEntryPoints,
        ) -> A_Err,
    >,
    pub AEGP_RegisterPresetLocalizationString: ::std::option::Option<
        unsafe extern "C" fn(english_nameZ: *const A_char, localized_nameZ: *const A_char) -> A_Err,
    >,
}
pub const AEGP_Menu_NONE: _bindgen_ty_141 = 0;
pub const AEGP_Menu_APPLE: _bindgen_ty_141 = 1;
pub const AEGP_Menu_FILE: _bindgen_ty_141 = 2;
pub const AEGP_Menu_EDIT: _bindgen_ty_141 = 3;
pub const AEGP_Menu_COMPOSITION: _bindgen_ty_141 = 4;
pub const AEGP_Menu_LAYER: _bindgen_ty_141 = 5;
pub const AEGP_Menu_EFFECT: _bindgen_ty_141 = 6;
pub const AEGP_Menu_WINDOW: _bindgen_ty_141 = 7;
pub const AEGP_Menu_FLOATERS: _bindgen_ty_141 = 8;
pub const AEGP_Menu_KF_ASSIST: _bindgen_ty_141 = 9;
pub const AEGP_Menu_IMPORT: _bindgen_ty_141 = 10;
pub const AEGP_Menu_SAVE_FRAME_AS: _bindgen_ty_141 = 11;
pub const AEGP_Menu_PREFS: _bindgen_ty_141 = 12;
pub const AEGP_Menu_EXPORT: _bindgen_ty_141 = 13;
pub const AEGP_Menu_ANIMATION: _bindgen_ty_141 = 14;
pub const AEGP_Menu_PURGE: _bindgen_ty_141 = 15;
pub const AEGP_Menu_NEW: _bindgen_ty_141 = 16;
pub type _bindgen_ty_141 = ::std::os::raw::c_int;
pub type AEGP_MenuID = A_LegacyEnumType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CommandSuite1 {
    pub AEGP_GetUniqueCommand:
        ::std::option::Option<unsafe extern "C" fn(unique_commandP: *mut AEGP_Command) -> A_Err>,
    pub AEGP_InsertMenuCommand: ::std::option::Option<
        unsafe extern "C" fn(
            command: AEGP_Command,
            nameZ: *const A_char,
            menu_id: AEGP_MenuID,
            after_itemL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_RemoveMenuCommand:
        ::std::option::Option<unsafe extern "C" fn(command: AEGP_Command) -> A_Err>,
    pub AEGP_SetMenuCommandName: ::std::option::Option<
        unsafe extern "C" fn(command: AEGP_Command, nameZ: *const A_char) -> A_Err,
    >,
    pub AEGP_EnableCommand:
        ::std::option::Option<unsafe extern "C" fn(command: AEGP_Command) -> A_Err>,
    pub AEGP_DisableCommand:
        ::std::option::Option<unsafe extern "C" fn(command: AEGP_Command) -> A_Err>,
    pub AEGP_CheckMarkMenuCommand: ::std::option::Option<
        unsafe extern "C" fn(command: AEGP_Command, checkB: A_Boolean) -> A_Err,
    >,
    pub AEGP_DoCommand: ::std::option::Option<unsafe extern "C" fn(command: AEGP_Command) -> A_Err>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ErrReportState {
    pub reservedAL: [A_long; 12usize],
}
pub const AEGP_GetPathTypes_PLUGIN: _bindgen_ty_142 = 0;
pub const AEGP_GetPathTypes_USER_PLUGIN: _bindgen_ty_142 = 1;
pub const AEGP_GetPathTypes_ALLUSER_PLUGIN: _bindgen_ty_142 = 2;
pub const AEGP_GetPathTypes_APP: _bindgen_ty_142 = 3;
pub type _bindgen_ty_142 = ::std::os::raw::c_int;
pub type AEGP_GetPathTypes = A_u_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_UtilitySuite6 {
    pub AEGP_ReportInfo: ::std::option::Option<
        unsafe extern "C" fn(aegp_plugin_id: AEGP_PluginID, info_stringZ: *const A_char) -> A_Err,
    >,
    pub AEGP_ReportInfoUnicode: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            info_stringP: *const A_UTF16Char,
        ) -> A_Err,
    >,
    pub AEGP_GetDriverPluginInitFuncVersion: ::std::option::Option<
        unsafe extern "C" fn(major_versionPS: *mut A_short, minor_versionPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_GetDriverImplementationVersion: ::std::option::Option<
        unsafe extern "C" fn(major_versionPS: *mut A_short, minor_versionPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_StartQuietErrors:
        ::std::option::Option<unsafe extern "C" fn(err_stateP: *mut AEGP_ErrReportState) -> A_Err>,
    pub AEGP_EndQuietErrors: ::std::option::Option<
        unsafe extern "C" fn(
            report_quieted_errorsB: A_Boolean,
            err_stateP: *mut AEGP_ErrReportState,
        ) -> A_Err,
    >,
    pub AEGP_GetLastErrorMessage: ::std::option::Option<
        unsafe extern "C" fn(
            buffer_size: A_long,
            error_string: *mut A_char,
            error_num: *mut A_Err,
        ) -> A_Err,
    >,
    pub AEGP_StartUndoGroup:
        ::std::option::Option<unsafe extern "C" fn(undo_nameZ: *const A_char) -> A_Err>,
    pub AEGP_EndUndoGroup: ::std::option::Option<unsafe extern "C" fn() -> A_Err>,
    pub AEGP_RegisterWithAEGP: ::std::option::Option<
        unsafe extern "C" fn(
            global_refcon: AEGP_GlobalRefcon,
            plugin_nameZ: *const A_char,
            plugin_id: *mut AEGP_PluginID,
        ) -> A_Err,
    >,
    pub AEGP_GetMainHWND: ::std::option::Option<
        unsafe extern "C" fn(main_hwnd: *mut ::std::os::raw::c_void) -> A_Err,
    >,
    pub AEGP_ShowHideAllFloaters:
        ::std::option::Option<unsafe extern "C" fn(include_tool_palB: A_Boolean) -> A_Err>,
    pub AEGP_PaintPalGetForeColor:
        ::std::option::Option<unsafe extern "C" fn(fore_colorP: *mut AEGP_ColorVal) -> A_Err>,
    pub AEGP_PaintPalGetBackColor:
        ::std::option::Option<unsafe extern "C" fn(back_colorP: *mut AEGP_ColorVal) -> A_Err>,
    pub AEGP_PaintPalSetForeColor:
        ::std::option::Option<unsafe extern "C" fn(fore_colorP: *const AEGP_ColorVal) -> A_Err>,
    pub AEGP_PaintPalSetBackColor:
        ::std::option::Option<unsafe extern "C" fn(back_colorP: *const AEGP_ColorVal) -> A_Err>,
    pub AEGP_CharPalGetFillColor: ::std::option::Option<
        unsafe extern "C" fn(
            is_fill_color_definedPB: *mut A_Boolean,
            fill_colorP: *mut AEGP_ColorVal,
        ) -> A_Err,
    >,
    pub AEGP_CharPalGetStrokeColor: ::std::option::Option<
        unsafe extern "C" fn(
            is_stroke_color_definedPB: *mut A_Boolean,
            stroke_colorP: *mut AEGP_ColorVal,
        ) -> A_Err,
    >,
    pub AEGP_CharPalSetFillColor:
        ::std::option::Option<unsafe extern "C" fn(fill_colorP: *const AEGP_ColorVal) -> A_Err>,
    pub AEGP_CharPalSetStrokeColor:
        ::std::option::Option<unsafe extern "C" fn(stroke_colorP: *const AEGP_ColorVal) -> A_Err>,
    pub AEGP_CharPalIsFillColorUIFrontmost: ::std::option::Option<
        unsafe extern "C" fn(is_fill_color_selectedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_ConvertFpLongToHSFRatio: ::std::option::Option<
        unsafe extern "C" fn(numberF: A_FpLong, ratioPR: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_ConvertHSFRatioToFpLong: ::std::option::Option<
        unsafe extern "C" fn(ratioR: A_Ratio, numberPF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_CauseIdleRoutinesToBeCalled: ::std::option::Option<unsafe extern "C" fn() -> A_Err>,
    pub AEGP_GetSuppressInteractiveUI:
        ::std::option::Option<unsafe extern "C" fn(ui_is_suppressedPB: *mut A_Boolean) -> A_Err>,
    pub AEGP_WriteToOSConsole:
        ::std::option::Option<unsafe extern "C" fn(textZ: *const A_char) -> A_Err>,
    pub AEGP_WriteToDebugLog: ::std::option::Option<
        unsafe extern "C" fn(
            subsystemZ: *const A_char,
            event_typeZ: *const A_char,
            infoZ: *const A_char,
        ) -> A_Err,
    >,
    pub AEGP_IsScriptingAvailable:
        ::std::option::Option<unsafe extern "C" fn(outAvailablePB: *mut A_Boolean) -> A_Err>,
    pub AEGP_ExecuteScript: ::std::option::Option<
        unsafe extern "C" fn(
            inPlugin_id: AEGP_PluginID,
            inScriptZ: *const A_char,
            platform_encodingB: A_Boolean,
            outResultPH0: *mut AEGP_MemHandle,
            outErrorStringPH0: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_HostIsActivated:
        ::std::option::Option<unsafe extern "C" fn(is_activatedPB: *mut A_Boolean) -> A_Err>,
    pub AEGP_GetPluginPlatformRef: ::std::option::Option<
        unsafe extern "C" fn(
            plug_id: AEGP_PluginID,
            plat_refPPV: *mut *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_UpdateFontList: ::std::option::Option<unsafe extern "C" fn() -> A_Err>,
    pub AEGP_GetPluginPaths: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            path_type: AEGP_GetPathTypes,
            unicode_pathPH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_MathSuite1 {
    pub AEGP_IdentityMatrix4:
        ::std::option::Option<unsafe extern "C" fn(matrixP: *mut A_Matrix4) -> A_Err>,
    pub AEGP_MultiplyMatrix4: ::std::option::Option<
        unsafe extern "C" fn(
            A: *const A_Matrix4,
            B: *const A_Matrix4,
            resultP: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_Matrix3ToMatrix4: ::std::option::Option<
        unsafe extern "C" fn(A: *const A_Matrix3, B: *mut A_Matrix4) -> A_Err,
    >,
    pub AEGP_MultiplyMatrix4by3: ::std::option::Option<
        unsafe extern "C" fn(
            A: *const A_Matrix4,
            B: *const A_Matrix3,
            resultP: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_MatrixDecompose4: ::std::option::Option<
        unsafe extern "C" fn(
            A: *const A_Matrix4,
            posVP: *mut A_FloatPoint3,
            scaleVP: *mut A_FloatPoint3,
            shearVP: *mut A_FloatPoint3,
            rotVP: *mut A_FloatPoint3,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PF_OpaqueBlendingTables {
    _unused: [u8; 0],
}
pub type PF_EffectBlendingTables = *mut _PF_OpaqueBlendingTables;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ColorSettingsSuite6 {
    pub AEGP_GetBlendingTables: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            blending_tables: *mut PF_EffectBlendingTables,
        ) -> A_Err,
    >,
    pub AEGP_DoesViewHaveColorSpaceXform: ::std::option::Option<
        unsafe extern "C" fn(viewP: AEGP_ItemViewP, has_xformPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_XformWorkingToViewColorSpace: ::std::option::Option<
        unsafe extern "C" fn(viewP: AEGP_ItemViewP, srcH: AEGP_WorldH, dstH: AEGP_WorldH) -> A_Err,
    >,
    pub AEGP_GetNewWorkingSpaceColorProfile: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            compH: AEGP_CompH,
            color_profilePP: *mut AEGP_ColorProfileP,
        ) -> A_Err,
    >,
    pub AEGP_GetNewColorProfileFromICCProfile: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            icc_sizeL: A_long,
            icc_dataPV: *const ::std::os::raw::c_void,
            color_profilePP: *mut AEGP_ColorProfileP,
        ) -> A_Err,
    >,
    pub AEGP_GetNewICCProfileFromColorProfile: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            color_profileP: AEGP_ConstColorProfileP,
            icc_profilePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetNewColorProfileDescription: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            color_profileP: AEGP_ConstColorProfileP,
            unicode_descPH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_DisposeColorProfile:
        ::std::option::Option<unsafe extern "C" fn(color_profileP: AEGP_ColorProfileP) -> A_Err>,
    pub AEGP_GetColorProfileApproximateGamma: ::std::option::Option<
        unsafe extern "C" fn(
            color_profileP: AEGP_ConstColorProfileP,
            approx_gammaP: *mut A_FpShort,
        ) -> A_Err,
    >,
    pub AEGP_IsRGBColorProfile: ::std::option::Option<
        unsafe extern "C" fn(
            color_profileP: AEGP_ConstColorProfileP,
            is_rgbPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_SetWorkingColorSpace: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            compH: AEGP_CompH,
            color_profileP: AEGP_ConstColorProfileP,
        ) -> A_Err,
    >,
    pub AEGP_IsOCIOColorManagementUsed: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            is_OCIOColorManagementUsedPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetOCIOConfigurationFile: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            config_filePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetOCIOConfigurationFilePath: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            config_filePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGPD_GetOCIOWorkingColorSpace: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            ocio_working_colorspaceH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGPD_GetOCIODisplayColorSpace: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            ocio_displayH: *mut AEGP_MemHandle,
            ocio_viewH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGPD_IsColorSpaceAwareEffectsEnabled: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            outIsGetColorAwareEnabled: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGPD_GetLUTInterpolationMethod: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            outLUTInterpolationMethod: *mut A_u_short,
        ) -> A_Err,
    >,
    pub AEGPD_GetGraphicsWhiteLuminance: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            outGraphicsWhiteLuminance: *mut A_u_short,
        ) -> A_Err,
    >,
    pub AEGPD_GetWorkingColorSpaceId: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            workingColorSpaceGuid: AEGP_GuidP,
        ) -> A_Err,
    >,
}
pub const AEGP_RenderQueueState_STOPPED: _bindgen_ty_143 = 0;
pub const AEGP_RenderQueueState_PAUSED: _bindgen_ty_143 = 1;
pub const AEGP_RenderQueueState_RENDERING: _bindgen_ty_143 = 2;
pub type _bindgen_ty_143 = ::std::os::raw::c_int;
pub type AEGP_RenderQueueState = A_u_long;
pub const AEGP_RenderItemStatus_NONE: _bindgen_ty_144 = -2;
pub const AEGP_RenderItemStatus_WILL_CONTINUE: _bindgen_ty_144 = -1;
pub const AEGP_RenderItemStatus_NEEDS_OUTPUT: _bindgen_ty_144 = 0;
pub const AEGP_RenderItemStatus_UNQUEUED: _bindgen_ty_144 = 1;
pub const AEGP_RenderItemStatus_QUEUED: _bindgen_ty_144 = 2;
pub const AEGP_RenderItemStatus_RENDERING: _bindgen_ty_144 = 3;
pub const AEGP_RenderItemStatus_USER_STOPPED: _bindgen_ty_144 = 4;
pub const AEGP_RenderItemStatus_ERR_STOPPED: _bindgen_ty_144 = 5;
pub const AEGP_RenderItemStatus_DONE: _bindgen_ty_144 = 6;
pub const AEGP_RenderItemStatus_LAST_PLUS_ONE: _bindgen_ty_144 = 7;
pub type _bindgen_ty_144 = ::std::os::raw::c_int;
pub type AEGP_RenderItemStatusType = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_RenderQueueSuite1 {
    pub AEGP_AddCompToRenderQueue: ::std::option::Option<
        unsafe extern "C" fn(comp: AEGP_CompH, pathZ: *const A_char) -> A_Err,
    >,
    pub AEGP_SetRenderQueueState:
        ::std::option::Option<unsafe extern "C" fn(state: AEGP_RenderQueueState) -> A_Err>,
    pub AEGP_GetRenderQueueState:
        ::std::option::Option<unsafe extern "C" fn(stateP: *mut AEGP_RenderQueueState) -> A_Err>,
}
pub const AEGP_LogType_NONE: _bindgen_ty_145 = -1;
pub const AEGP_LogType_ERRORS_ONLY: _bindgen_ty_145 = 0;
pub const AEGP_LogType_PLUS_SETTINGS: _bindgen_ty_145 = 1;
pub const AEGP_LogType_PER_FRAME_INFO: _bindgen_ty_145 = 2;
pub const AEGP_LogType_NUM_TYPES: _bindgen_ty_145 = 3;
pub type _bindgen_ty_145 = ::std::os::raw::c_int;
pub type AEGP_LogType = A_long;
pub const AEGP_Embedding_NONE: _bindgen_ty_146 = -1;
pub const AEGP_Embedding_NOTHING: _bindgen_ty_146 = 0;
pub const AEGP_Embedding_LINK: _bindgen_ty_146 = 1;
pub const AEGP_Embedding_LINK_AND_COPY: _bindgen_ty_146 = 2;
pub const AEGP_Embedding_NUM_TYPES: _bindgen_ty_146 = 3;
pub type _bindgen_ty_146 = ::std::os::raw::c_int;
pub type AEGP_EmbeddingType = A_long;
pub const AEGP_PostRenderOptions_NONE: _bindgen_ty_147 = -1;
pub const AEGP_PostRenderOptions_IMPORT: _bindgen_ty_147 = 0;
pub const AEGP_PostRenderOptions_IMPORT_AND_REPLACE_USAGE: _bindgen_ty_147 = 1;
pub const AEGP_PostRenderOptions_SET_PROXY: _bindgen_ty_147 = 2;
pub const AEGP_PostRenderOptions_NUM_OPTIONS: _bindgen_ty_147 = 3;
pub type _bindgen_ty_147 = ::std::os::raw::c_int;
pub type AEGP_PostRenderAction = A_long;
pub const AEGP_OutputType_NONE: _bindgen_ty_148 = 0;
pub const AEGP_OutputType_VIDEO: _bindgen_ty_148 = 1;
pub const AEGP_OutputType_AUDIO: _bindgen_ty_148 = 2;
pub const AEGP_OutputType_NUM_TYPES: _bindgen_ty_148 = 3;
pub type _bindgen_ty_148 = ::std::os::raw::c_int;
pub type AEGP_OutputTypes = A_long;
pub const AEGP_VideoChannels_NONE: _bindgen_ty_149 = -1;
pub const AEGP_VideoChannels_RGB: _bindgen_ty_149 = 0;
pub const AEGP_VideoChannels_RGBA: _bindgen_ty_149 = 1;
pub const AEGP_VideoChannels_ALPHA: _bindgen_ty_149 = 2;
pub const AEGP_VideoChannels_NUMTYPES: _bindgen_ty_149 = 3;
pub type _bindgen_ty_149 = ::std::os::raw::c_int;
pub type AEGP_VideoChannels = A_long;
pub const AEGP_StretchQual_NONE: _bindgen_ty_150 = -1;
pub const AEGP_StretchQual_LOW: _bindgen_ty_150 = 0;
pub const AEGP_StretchQual_HIGH: _bindgen_ty_150 = 1;
pub const AEGP_StretchQual_NUMTYPES: _bindgen_ty_150 = 2;
pub type _bindgen_ty_150 = ::std::os::raw::c_int;
pub type AEGP_StretchQuality = A_long;
pub const AEGP_OutputColorType_STRAIGHT: _bindgen_ty_151 = -1;
pub const AEGP_OutputColorType_PREMUL: _bindgen_ty_151 = 0;
pub type _bindgen_ty_151 = ::std::os::raw::c_int;
pub type AEGP_OutputColorType = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_RQItemSuite4 {
    pub AEGP_GetNumRQItems:
        ::std::option::Option<unsafe extern "C" fn(num_itemsPL: *mut A_long) -> A_Err>,
    pub AEGP_GetRQItemByIndex: ::std::option::Option<
        unsafe extern "C" fn(rq_item_index: A_long, rq_item_refPH: *mut AEGP_RQItemRefH) -> A_Err,
    >,
    pub AEGP_GetNextRQItem: ::std::option::Option<
        unsafe extern "C" fn(
            current_rq_itemH: AEGP_RQItemRefH,
            next_rq_itemH: *mut AEGP_RQItemRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetNumOutputModulesForRQItem: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, num_outmodsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetRenderState: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            statusP: *mut AEGP_RenderItemStatusType,
        ) -> A_Err,
    >,
    pub AEGP_SetRenderState: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, status: AEGP_RenderItemStatusType) -> A_Err,
    >,
    pub AEGP_GetStartedTime: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, started_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetElapsedTime: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, render_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetLogType: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, logtypeP: *mut AEGP_LogType) -> A_Err,
    >,
    pub AEGP_SetLogType: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, logtype: AEGP_LogType) -> A_Err,
    >,
    pub AEGP_RemoveOutputModule: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, outmodH: AEGP_OutputModuleRefH) -> A_Err,
    >,
    pub AEGP_GetComment: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, unicodeH: *mut AEGP_MemHandle) -> A_Err,
    >,
    pub AEGP_SetComment: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, commentZ: *const A_UTF16Char) -> A_Err,
    >,
    pub AEGP_GetCompFromRQItem: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_DeleteRQItem:
        ::std::option::Option<unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH) -> A_Err>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_OutputModuleSuite4 {
    pub AEGP_GetOutputModuleByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            outmod_indexL: A_long,
            outmodPH: *mut AEGP_OutputModuleRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetEmbedOptions: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            outmodH: AEGP_OutputModuleRefH,
            embed_optionsP: *mut AEGP_EmbeddingType,
        ) -> A_Err,
    >,
    pub AEGP_SetEmbedOptions: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            outmodH: AEGP_OutputModuleRefH,
            embed_options: AEGP_EmbeddingType,
        ) -> A_Err,
    >,
    pub AEGP_GetPostRenderAction: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            outmodH: AEGP_OutputModuleRefH,
            post_render_actionP: *mut AEGP_PostRenderAction,
        ) -> A_Err,
    >,
    pub AEGP_SetPostRenderAction: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            outmodH: AEGP_OutputModuleRefH,
            post_render_action: AEGP_PostRenderAction,
        ) -> A_Err,
    >,
    pub AEGP_GetEnabledOutputs: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            outmodH: AEGP_OutputModuleRefH,
            enabled_typesP: *mut AEGP_OutputTypes,
        ) -> A_Err,
    >,
    pub AEGP_SetEnabledOutputs: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            outmodH: AEGP_OutputModuleRefH,
            enabled_types: AEGP_OutputTypes,
        ) -> A_Err,
    >,
    pub AEGP_GetOutputChannels: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            outmodH: AEGP_OutputModuleRefH,
            output_channelsP: *mut AEGP_VideoChannels,
        ) -> A_Err,
    >,
    pub AEGP_SetOutputChannels: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            outmodH: AEGP_OutputModuleRefH,
            output_channels: AEGP_VideoChannels,
        ) -> A_Err,
    >,
    pub AEGP_GetStretchInfo: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            outmodH: AEGP_OutputModuleRefH,
            is_enabledPB: *mut A_Boolean,
            stretch_qualityP: *mut AEGP_StretchQuality,
            lockedPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_SetStretchInfo: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            outmodH: AEGP_OutputModuleRefH,
            is_enabledB: A_Boolean,
            stretch_quality: AEGP_StretchQuality,
        ) -> A_Err,
    >,
    pub AEGP_GetCropInfo: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            outmodH: AEGP_OutputModuleRefH,
            is_enabledBP: *mut A_Boolean,
            crop_rectP: *mut A_Rect,
        ) -> A_Err,
    >,
    pub AEGP_SetCropInfo: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            outmodH: AEGP_OutputModuleRefH,
            enableB: A_Boolean,
            crop_rect: A_Rect,
        ) -> A_Err,
    >,
    pub AEGP_GetSoundFormatInfo: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            outmodH: AEGP_OutputModuleRefH,
            sound_format_infoP: *mut AEGP_SoundDataFormat,
            audio_enabledPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_SetSoundFormatInfo: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            outmodH: AEGP_OutputModuleRefH,
            sound_format_info: AEGP_SoundDataFormat,
            audio_enabledB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetOutputFilePath: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            outmodH: AEGP_OutputModuleRefH,
            unicode_pathPH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_SetOutputFilePath: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            outmodH: AEGP_OutputModuleRefH,
            pathZ: *const A_UTF16Char,
        ) -> A_Err,
    >,
    pub AEGP_AddDefaultOutputModule: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            outmodPH: *mut AEGP_OutputModuleRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetExtraOutputModuleInfo: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            outmodH: AEGP_OutputModuleRefH,
            format_unicodePH: *mut AEGP_MemHandle,
            info__unicodePH: *mut AEGP_MemHandle,
            is_sequenceBP: *mut A_Boolean,
            multi_frameBP: *mut A_Boolean,
        ) -> A_Err,
    >,
}
pub const AEGP_RenderHints_NONE: _bindgen_ty_152 = 0;
pub const AEGP_RenderHints_IGNORE_EXTENTS: _bindgen_ty_152 = 1;
pub const AEGP_RenderHints_NO_TRANSFER_MODE: _bindgen_ty_152 = 2;
pub type _bindgen_ty_152 = ::std::os::raw::c_int;
pub type AEGP_RenderHints = A_u_long;
pub const AEGP_RenderReceiptStatus_INVALID: _bindgen_ty_153 = 0;
pub const AEGP_RenderReceiptStatus_VALID: _bindgen_ty_153 = 1;
pub const AEGP_RenderReceiptStatus_VALID_BUT_INCOMPLETE: _bindgen_ty_153 = 2;
pub type _bindgen_ty_153 = ::std::os::raw::c_int;
pub type AEGP_RenderReceiptStatus = A_u_long;
pub const AEGP_BinType_NONE: _bindgen_ty_154 = -1;
pub const AEGP_BinType_2D: _bindgen_ty_154 = 0;
pub const AEGP_BinType_3D: _bindgen_ty_154 = 1;
pub type _bindgen_ty_154 = ::std::os::raw::c_int;
pub type AEGP_BinType = A_long;
pub type AEGP_PlatformWindowRef = *mut ::std::os::raw::c_void;
pub const AEGP_DisplayChannel_NONE: _bindgen_ty_155 = 0;
pub const AEGP_DisplayChannel_RED: _bindgen_ty_155 = 1;
pub const AEGP_DisplayChannel_GREEN: _bindgen_ty_155 = 2;
pub const AEGP_DisplayChannel_BLUE: _bindgen_ty_155 = 3;
pub const AEGP_DisplayChannel_ALPHA: _bindgen_ty_155 = 4;
pub const AEGP_DisplayChannel_RED_ALT: _bindgen_ty_155 = 5;
pub const AEGP_DisplayChannel_GREEN_ALT: _bindgen_ty_155 = 6;
pub const AEGP_DisplayChannel_BLUE_ALT: _bindgen_ty_155 = 7;
pub const AEGP_DisplayChannel_ALPHA_ALT: _bindgen_ty_155 = 8;
pub const AEGP_DisplayChannel_NUM_ITEMS: _bindgen_ty_155 = 9;
pub type _bindgen_ty_155 = ::std::os::raw::c_int;
pub type AEGP_DisplayChannelType = A_long;
pub const AEGP_RenderNumEffects_ALL_EFFECTS: _bindgen_ty_156 = -1;
pub type _bindgen_ty_156 = ::std::os::raw::c_int;
pub type AEGP_NumEffectsToRenderType = A_short;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CanvasSuite8 {
    pub AEGP_GetCompToRender: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetNumLayersToRender: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            num_to_renderPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetNthLayerContextToRender: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            n: A_long,
            layer_contextPH: *mut AEGP_RenderLayerContextH,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerFromLayerContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerAndSubLayerFromLayerContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            layerPH: *mut AEGP_LayerH,
            sublayerP: *mut AEGP_SubLayerIndex,
        ) -> A_Err,
    >,
    #[doc = " With collapsed geometrics \"on\" this gives the layer in the root comp\n contining the layer context. With collapsed geometrics off\n this is the same as AEGP_GetLayerFromLayerContext.\n"]
    pub AEGP_GetTopLayerFromLayerContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetCompRenderTime: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            time: *mut A_Time,
            time_step: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetCompDestinationBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            compH: AEGP_CompH,
            dst: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetROI: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, roiPR: *mut A_LegacyRect) -> A_Err,
    >,
    pub AEGP_RenderTexture: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            suggested_scaleP0: *mut A_FloatPoint,
            suggested_src_rectP0: *mut A_FloatRect,
            src_matrixP0: *mut A_Matrix3,
            dstPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeTexture: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            dstH0: AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetFieldRender: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, field: *mut PF_Field) -> A_Err,
    >,
    pub AEGP_ReportArtisanProgress: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            countL: A_long,
            totalL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            dsfP: *mut AEGP_DownsampleFactor,
        ) -> A_Err,
    >,
    pub AEGP_SetRenderDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            dsfP: *mut AEGP_DownsampleFactor,
        ) -> A_Err,
    >,
    pub AEGP_IsBlankCanvas: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            is_blankPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderLayerToWorldXform: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timeP: *const A_Time,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderLayerBounds: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timeP: *const A_Time,
            boundsP: *mut A_LegacyRect,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderOpacity: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timePT: *const A_Time,
            opacityPF: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_IsRenderLayerActive: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timePT: *const A_Time,
            activePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_SetArtisanLayerProgress: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            countL: A_long,
            num_layersL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_RenderLayerPlus: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layerH: AEGP_LayerH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            render_bufferPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetTrackMatteContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            fill_contextH: AEGP_RenderLayerContextH,
            matte_contextPH: *mut AEGP_RenderLayerContextH,
        ) -> A_Err,
    >,
    pub AEGP_RenderTextureWithReceipt: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            num_effectsS: AEGP_NumEffectsToRenderType,
            suggested_scaleP0: *mut A_FloatPoint,
            suggested_src_rectP0: *mut A_FloatRect,
            src_matrixP0: *mut A_Matrix3,
            render_receiptPH: *mut AEGP_RenderReceiptH,
            dstPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetNumberOfSoftwareEffects: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            num_software_effectsPS: *mut A_short,
        ) -> A_Err,
    >,
    pub AEGP_RenderLayerPlusWithReceipt: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layerH: AEGP_LayerH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            render_receiptPH: *mut AEGP_RenderReceiptH,
            render_bufferPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeRenderReceipt:
        ::std::option::Option<unsafe extern "C" fn(render_receiptH: AEGP_RenderReceiptH) -> A_Err>,
    pub AEGP_CheckRenderReceipt: ::std::option::Option<
        unsafe extern "C" fn(
            current_render_contextH: PR_RenderContextH,
            current_layer_contextH: AEGP_RenderLayerContextH,
            old_render_receiptH: AEGP_RenderReceiptH,
            check_geometricsB: A_Boolean,
            num_effectsS: AEGP_NumEffectsToRenderType,
            receipt_statusP: *mut AEGP_RenderReceiptStatus,
        ) -> A_Err,
    >,
    pub AEGP_GenerateRenderReceipt: ::std::option::Option<
        unsafe extern "C" fn(
            current_render_contextH: PR_RenderContextH,
            current_layer_contextH: AEGP_RenderLayerContextH,
            num_effectsS: AEGP_NumEffectsToRenderType,
            render_receiptPH: *mut AEGP_RenderReceiptH,
        ) -> A_Err,
    >,
    pub AEGP_GetNumBinsToRender: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            num_bins_to_renderPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_SetNthBin: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, n: A_long) -> A_Err,
    >,
    pub AEGP_GetBinType: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            bin_typeP: *mut AEGP_BinType,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderLayerToWorldXform2D3D: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timeP: *const A_Time,
            only_2dB: A_Boolean,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_GetPlatformWindowRef: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            window_refP: *mut AEGP_PlatformWindowRef,
        ) -> A_Err,
    >,
    pub AEGP_GetViewportScale: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            scale_xPF: *mut A_FpLong,
            scale_yPF: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_GetViewportOrigin: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            origin_xPL: *mut A_long,
            origin_yPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetViewportRect: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            viewport_rectPR: *mut A_LegacyRect,
        ) -> A_Err,
    >,
    pub AEGP_GetFallowColor: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            fallow_colorP: *mut PF_Pixel8,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveBuffer: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, buffer: *mut AEGP_WorldH) -> A_Err,
    >,
    pub AEGP_GetInteractiveCheckerboard: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            checkerboard_onPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveCheckerboardColors: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            checkerboard_color1P: *mut PF_Pixel,
            checkerboard_color2P: *mut PF_Pixel,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveCheckerboardSize: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            checkerboard_widthPLu: *mut A_u_long,
            checkerboard_heightPLu: *mut A_u_long,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveCachedBuffer: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, buffer: *mut AEGP_WorldH) -> A_Err,
    >,
    pub AEGP_ArtisanMustRenderAsLayer: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            use_render_texturePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveDisplayChannel: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            display_channelP: *mut AEGP_DisplayChannelType,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveExposure: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            exposurePF: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_GetColorTransform: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            cms_onB: *mut A_Boolean,
            xform_keyLu: *mut A_u_long,
            xformP: *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_GetCompShutterTime: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            shutter_time: *mut A_Time,
            shutter_dur: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_MapCompToLayerTime: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timePT: *const A_Time,
            layer_timePT: *mut A_Time,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ArtisanUtilSuite1 {
    pub AEGP_GetGlobalContextFromInstanceContext: ::std::option::Option<
        unsafe extern "C" fn(
            instance_contextH: PR_InstanceContextH,
            global_contextPH: *mut PR_GlobalContextH,
        ) -> A_Err,
    >,
    pub AEGP_GetInstanceContextFromRenderContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            instance_contextPH: *mut PR_InstanceContextH,
        ) -> A_Err,
    >,
    pub AEGP_GetInstanceContextFromQueryContext: ::std::option::Option<
        unsafe extern "C" fn(
            query_contextH: PR_QueryContextH,
            instance_contextPH: *mut PR_InstanceContextH,
        ) -> A_Err,
    >,
    pub AEGP_GetGlobalData: ::std::option::Option<
        unsafe extern "C" fn(
            global_contextH: PR_GlobalContextH,
            global_dataPH: *mut PR_GlobalDataH,
        ) -> A_Err,
    >,
    pub AEGP_GetInstanceData: ::std::option::Option<
        unsafe extern "C" fn(
            instance_contextH: PR_InstanceContextH,
            instance_dataPH: *mut PR_InstanceDataH,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderData: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            render_dataPH: *mut PR_RenderDataH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CameraSuite2 {
    pub AEGP_GetCamera: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            comp_timeP: *const A_Time,
            camera_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetCameraType: ::std::option::Option<
        unsafe extern "C" fn(
            camera_layerH: AEGP_LayerH,
            camera_typeP: *mut AEGP_CameraType,
        ) -> A_Err,
    >,
    pub AEGP_GetDefaultCameraDistanceToImagePlane: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dist_to_planePF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_GetCameraFilmSize: ::std::option::Option<
        unsafe extern "C" fn(
            camera_layerH: AEGP_LayerH,
            film_size_unitsP: *mut AEGP_FilmSizeUnits,
            film_sizePF0: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_SetCameraFilmSize: ::std::option::Option<
        unsafe extern "C" fn(
            camera_layerH: AEGP_LayerH,
            film_size_units: AEGP_FilmSizeUnits,
            film_sizePF0: *mut A_FpLong,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_LightSuite2 {
    pub AEGP_GetLightType: ::std::option::Option<
        unsafe extern "C" fn(light_layerH: AEGP_LayerH, light_typeP: *mut AEGP_LightType) -> A_Err,
    >,
    pub AEGP_SetLightType: ::std::option::Option<
        unsafe extern "C" fn(light_layerH: AEGP_LayerH, light_type: AEGP_LightType) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_LightSuite3 {
    pub AEGP_GetLightType: ::std::option::Option<
        unsafe extern "C" fn(light_layerH: AEGP_LayerH, light_typeP: *mut AEGP_LightType) -> A_Err,
    >,
    pub AEGP_SetLightType: ::std::option::Option<
        unsafe extern "C" fn(light_layerH: AEGP_LayerH, light_type: AEGP_LightType) -> A_Err,
    >,
    pub AEGP_GetLightSource: ::std::option::Option<
        unsafe extern "C" fn(light_layerH: AEGP_LayerH, light_sourcePH: *mut AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_SetLightSource: ::std::option::Option<
        unsafe extern "C" fn(light_layerH: AEGP_LayerH, light_sourceH: AEGP_LayerH) -> A_Err,
    >,
}
pub const AEGP_Query_Xform_LAYER: _bindgen_ty_157 = 0;
pub const AEGP_Query_Xform_WORLD: _bindgen_ty_157 = 1;
pub const AEGP_Query_Xform_VIEW: _bindgen_ty_157 = 2;
pub const AEGP_Query_Xform_SCREEN: _bindgen_ty_157 = 3;
#[doc = " the type of source or dst transformation wanted"]
pub type _bindgen_ty_157 = ::std::os::raw::c_int;
pub type AEGP_QueryXformType = A_u_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_QueryXformSuite2 {
    pub AEGP_QueryXformGetSrcType: ::std::option::Option<
        unsafe extern "C" fn(
            query_contextH: PR_QueryContextH,
            src_type: *mut AEGP_QueryXformType,
        ) -> A_Err,
    >,
    pub AEGP_QueryXformGetDstType: ::std::option::Option<
        unsafe extern "C" fn(
            query_contextH: PR_QueryContextH,
            dst_type: *mut AEGP_QueryXformType,
        ) -> A_Err,
    >,
    pub AEGP_QueryXformGetLayer: ::std::option::Option<
        unsafe extern "C" fn(query_contextH: PR_QueryContextH, layerPH: *mut AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_QueryXformGetComp: ::std::option::Option<
        unsafe extern "C" fn(query_contextH: PR_QueryContextH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_QueryXformGetTransformTime: ::std::option::Option<
        unsafe extern "C" fn(query_contextH: PR_QueryContextH, time: *mut A_Time) -> A_Err,
    >,
    pub AEGP_QueryXformGetViewTime: ::std::option::Option<
        unsafe extern "C" fn(query_contextH: PR_QueryContextH, time: *mut A_Time) -> A_Err,
    >,
    pub AEGP_QueryXformGetCamera: ::std::option::Option<
        unsafe extern "C" fn(
            query_contextH: PR_QueryContextH,
            camera_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_QueryXformGetXform: ::std::option::Option<
        unsafe extern "C" fn(query_contextH: PR_QueryContextH, xform: *mut A_Matrix4) -> A_Err,
    >,
    pub AEGP_QueryXformSetXform: ::std::option::Option<
        unsafe extern "C" fn(query_contextH: PR_QueryContextH, xform: *mut A_Matrix4) -> A_Err,
    >,
    pub AEGP_QueryWindowRef: ::std::option::Option<
        unsafe extern "C" fn(
            query_contextH: PR_QueryContextH,
            window_refP: *mut AEGP_PlatformWindowRef,
        ) -> A_Err,
    >,
    pub AEGP_QueryWindowClear: ::std::option::Option<
        unsafe extern "C" fn(
            query_contextH: PR_QueryContextH,
            window_refP: *mut AEGP_PlatformWindowRef,
            boundsPR: *mut A_LegacyRect,
        ) -> A_Err,
    >,
    pub AEGP_QueryFrozenProxy: ::std::option::Option<
        unsafe extern "C" fn(query_contextH: PR_QueryContextH, onPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_QuerySwapBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            query_contextH: PR_QueryContextH,
            window_refP: *mut AEGP_PlatformWindowRef,
            dest_bufferp: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_QueryDrawProcs: ::std::option::Option<
        unsafe extern "C" fn(
            query_contextH: PR_QueryContextH,
            window_refP: *mut PR_InteractiveDrawProcs,
        ) -> A_Err,
    >,
    pub AEGP_QueryPrepareForLineDrawing: ::std::option::Option<
        unsafe extern "C" fn(
            query_contextH: PR_QueryContextH,
            window_refP: *mut AEGP_PlatformWindowRef,
            viewportP: *mut A_LegacyRect,
            originP: *mut A_LPoint,
            scaleP: *mut A_FloatPoint,
        ) -> A_Err,
    >,
    pub AEGP_QueryUnprepareForLineDrawing: ::std::option::Option<
        unsafe extern "C" fn(
            query_contextH: PR_QueryContextH,
            window_refP: *mut AEGP_PlatformWindowRef,
        ) -> A_Err,
    >,
    pub AEGP_QueryGetData: ::std::option::Option<
        unsafe extern "C" fn(
            query_contextH: PR_QueryContextH,
            i: A_long,
            dataPP: *mut *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_QuerySetData: ::std::option::Option<
        unsafe extern "C" fn(
            query_contextH: PR_QueryContextH,
            i: A_long,
            dataP: *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CompositeSuite2 {
    pub AEGP_ClearAlphaExceptRect: ::std::option::Option<
        unsafe extern "C" fn(clipped_dest_rectPR: *mut A_Rect, dstP: *mut PF_EffectWorld) -> A_Err,
    >,
    pub AEGP_PrepTrackMatte: ::std::option::Option<
        unsafe extern "C" fn(
            num_pix: A_long,
            deepB: A_Boolean,
            src_mask: *const PF_Pixel,
            mask_flags: PF_MaskFlags,
            dst_mask: *mut PF_Pixel,
        ) -> A_Err,
    >,
    pub AEGP_TransferRect: ::std::option::Option<
        unsafe extern "C" fn(
            quality: PF_Quality,
            m_flags: PF_ModeFlags,
            field: PF_Field,
            src_rec: *const A_Rect,
            src_world: *const PF_EffectWorld,
            comp_mode: *const PF_CompositeMode,
            blend_tablesP0: PF_EffectBlendingTables,
            mask_world0: *const PF_MaskWorld,
            dest_x: A_long,
            dest_y: A_long,
            dst_world: *mut PF_EffectWorld,
        ) -> A_Err,
    >,
    pub AEGP_CopyBits_LQ: ::std::option::Option<
        unsafe extern "C" fn(
            src_worldP: *mut PF_EffectWorld,
            src_r: *mut A_Rect,
            dst_r: *mut A_Rect,
            dst_worldP: *mut PF_EffectWorld,
        ) -> A_Err,
    >,
    pub AEGP_CopyBits_HQ_Straight: ::std::option::Option<
        unsafe extern "C" fn(
            src: *mut PF_EffectWorld,
            src_r: *mut A_Rect,
            dst_r: *mut A_Rect,
            dst: *mut PF_EffectWorld,
        ) -> A_Err,
    >,
    pub AEGP_CopyBits_HQ_Premul: ::std::option::Option<
        unsafe extern "C" fn(
            src: *mut PF_EffectWorld,
            src_r: *mut A_Rect,
            dst_r: *mut A_Rect,
            dst: *mut PF_EffectWorld,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_IterateSuite2 {
    pub AEGP_GetNumThreads:
        ::std::option::Option<unsafe extern "C" fn(num_threadsPL: *mut A_long) -> A_Err>,
    pub AEGP_IterateGeneric: ::std::option::Option<
        unsafe extern "C" fn(
            iterationsL: A_long,
            refconPV: *mut ::std::os::raw::c_void,
            fn_func: ::std::option::Option<
                unsafe extern "C" fn(
                    refconPV: *mut ::std::os::raw::c_void,
                    thread_indexL: A_long,
                    i: A_long,
                    iterationsL: A_long,
                ) -> A_Err,
            >,
        ) -> A_Err,
    >,
}
pub type AEGP_PluginInitFuncPrototype = ::std::option::Option<
    unsafe extern "C" fn(
        pica_basicP: *mut SPBasicSuite,
        driver_major_versionL: A_long,
        driver_minor_versionL: A_long,
        aegp_plugin_id: AEGP_PluginID,
        plugin_refconP: *mut AEGP_GlobalRefcon,
    ) -> A_Err,
>;
pub type AEGP_PluginInitFunc = AEGP_PluginInitFuncPrototype;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_PFInterfaceSuite1 {
    pub AEGP_GetEffectLayer: ::std::option::Option<
        unsafe extern "C" fn(effect_pp_ref: PF_ProgPtr, layerPH: *mut AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_GetNewEffectForEffect: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            effect_pp_ref: PF_ProgPtr,
            effect_refPH: *mut AEGP_EffectRefH,
        ) -> A_Err,
    >,
    pub AEGP_ConvertEffectToCompTime: ::std::option::Option<
        unsafe extern "C" fn(
            effect_pp_ref: PF_ProgPtr,
            what_timeL: A_long,
            time_scaleLu: A_u_long,
            comp_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectCamera: ::std::option::Option<
        unsafe extern "C" fn(
            effect_pp_ref: PF_ProgPtr,
            comp_timePT: *const A_Time,
            camera_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectCameraMatrix: ::std::option::Option<
        unsafe extern "C" fn(
            effect_pp_ref: PF_ProgPtr,
            comp_timePT: *const A_Time,
            camera_matrixP: *mut A_Matrix4,
            dist_to_image_planePF: *mut A_FpLong,
            image_plane_widthPL: *mut A_short,
            image_plane_heightPL: *mut A_short,
        ) -> A_Err,
    >,
}
pub type AEIO_FileSize = A_u_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_IOInSuite6 {
    pub AEGP_GetInSpecOptionsHandle: ::std::option::Option<
        unsafe extern "C" fn(
            inH: AEIO_InSpecH,
            optionsPPV: *mut *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_SetInSpecOptionsHandle: ::std::option::Option<
        unsafe extern "C" fn(
            inH: AEIO_InSpecH,
            optionsPV: *mut ::std::os::raw::c_void,
            old_optionsPPV: *mut *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_GetInSpecFilePath: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, unicode_pathPH: *mut AEGP_MemHandle) -> A_Err,
    >,
    pub AEGP_GetInSpecNativeFPS: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, native_fpsP: *mut A_Fixed) -> A_Err,
    >,
    pub AEGP_SetInSpecNativeFPS: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, native_fps: A_Fixed) -> A_Err,
    >,
    pub AEGP_GetInSpecDepth: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, depthPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_SetInSpecDepth:
        ::std::option::Option<unsafe extern "C" fn(inH: AEIO_InSpecH, depthS: A_short) -> A_Err>,
    pub AEGP_GetInSpecSize: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, sizePL: *mut AEIO_FileSize) -> A_Err,
    >,
    pub AEGP_SetInSpecSize: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, sizeL: AEIO_FileSize) -> A_Err,
    >,
    pub AEGP_GetInSpecInterlaceLabel: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, interlaceP: *mut FIEL_Label) -> A_Err,
    >,
    pub AEGP_SetInSpecInterlaceLabel: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, interlaceP: *const FIEL_Label) -> A_Err,
    >,
    pub AEGP_GetInSpecAlphaLabel: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, alphaP: *mut AEIO_AlphaLabel) -> A_Err,
    >,
    pub AEGP_SetInSpecAlphaLabel: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, alphaP: *const AEIO_AlphaLabel) -> A_Err,
    >,
    pub AEGP_GetInSpecDuration: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, durationP: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetInSpecDuration: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, durationP: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetInSpecDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            inH: AEIO_InSpecH,
            widthPL0: *mut A_long,
            heightPL0: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_SetInSpecDimensions: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, widthL: A_long, heightL: A_long) -> A_Err,
    >,
    pub AEGP_InSpecGetRationalDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            inH: AEIO_InSpecH,
            rs0: *const AEIO_RationalScale,
            width0: *mut A_long,
            height0: *mut A_long,
            r0: *mut A_Rect,
        ) -> A_Err,
    >,
    pub AEGP_GetInSpecHSF:
        ::std::option::Option<unsafe extern "C" fn(inH: AEIO_InSpecH, hsfP: *mut A_Ratio) -> A_Err>,
    pub AEGP_SetInSpecHSF: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, hsfP: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_GetInSpecSoundRate: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, ratePF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_SetInSpecSoundRate:
        ::std::option::Option<unsafe extern "C" fn(inH: AEIO_InSpecH, rateF: A_FpLong) -> A_Err>,
    pub AEGP_GetInSpecSoundEncoding: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, encodingP: *mut AEIO_SndEncoding) -> A_Err,
    >,
    pub AEGP_SetInSpecSoundEncoding: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, encoding: AEIO_SndEncoding) -> A_Err,
    >,
    pub AEGP_GetInSpecSoundSampleSize: ::std::option::Option<
        unsafe extern "C" fn(
            inH: AEIO_InSpecH,
            bytes_per_sampleP: *mut AEIO_SndSampleSize,
        ) -> A_Err,
    >,
    pub AEGP_SetInSpecSoundSampleSize: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, bytes_per_sample: AEIO_SndSampleSize) -> A_Err,
    >,
    pub AEGP_GetInSpecSoundChannels: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, num_channelsP: *mut AEIO_SndChannels) -> A_Err,
    >,
    pub AEGP_SetInSpecSoundChannels: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, num_channels: AEIO_SndChannels) -> A_Err,
    >,
    pub AEGP_AddAuxExtMap: ::std::option::Option<
        unsafe extern "C" fn(extension: *const A_char, file_type: A_long, creator: A_long) -> A_Err,
    >,
    pub AEGP_SetInSpecEmbeddedColorProfile: ::std::option::Option<
        unsafe extern "C" fn(
            inH: AEIO_InSpecH,
            color_profileP0: AEGP_ConstColorProfileP,
            profile_descP0: *const A_UTF16Char,
        ) -> A_Err,
    >,
    pub AEGP_SetInSpecAssignedColorProfile: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, color_profileP: AEGP_ConstColorProfileP) -> A_Err,
    >,
    pub AEGP_GetInSpecNativeStartTime: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, startTimeP: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetInSpecNativeStartTime: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, startTimeP: *const A_Time) -> A_Err,
    >,
    pub AEGP_ClearInSpecNativeStartTime:
        ::std::option::Option<unsafe extern "C" fn(inH: AEIO_InSpecH) -> A_Err>,
    pub AEGP_GetInSpecNativeDisplayDropFrame: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, displayDropFrameBP: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetInSpecNativeDisplayDropFrame: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, displayDropFrameB: A_Boolean) -> A_Err,
    >,
    pub AEGP_SetInSpecStillSequenceNativeFPS: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, native_still_seq_fps: A_Fixed) -> A_Err,
    >,
    pub AEGP_SetInSpecColorSpaceFromCICP: ::std::option::Option<
        unsafe extern "C" fn(
            inH: AEIO_InSpecH,
            inColorPrimariesCode: A_long,
            inTransferCharacteristicsCode: A_long,
            inMatrixCoefficientsCode: A_long,
            inFullRangeVideoFlag: A_long,
            inBitDepthL: A_long,
            inIsRGB: A_Boolean,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_IOOutSuite5 {
    pub AEGP_GetOutSpecOptionsHandle: ::std::option::Option<
        unsafe extern "C" fn(
            outH: AEIO_OutSpecH,
            optionsPPV: *mut *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_SetOutSpecOptionsHandle: ::std::option::Option<
        unsafe extern "C" fn(
            outH: AEIO_OutSpecH,
            optionsPV: *mut ::std::os::raw::c_void,
            old_optionsPPVO: *mut *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_GetOutSpecFilePath: ::std::option::Option<
        unsafe extern "C" fn(
            outH: AEIO_OutSpecH,
            unicode_pathPH: *mut AEGP_MemHandle,
            file_reservedPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetOutSpecFPS: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, native_fpsP: *mut A_Fixed) -> A_Err,
    >,
    pub AEGP_SetOutSpecNativeFPS: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, native_fpsP: A_Fixed) -> A_Err,
    >,
    pub AEGP_GetOutSpecDepth: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, depthPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_SetOutSpecDepth:
        ::std::option::Option<unsafe extern "C" fn(outH: AEIO_OutSpecH, depthPS: A_short) -> A_Err>,
    pub AEGP_GetOutSpecInterlaceLabel: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, interlaceP: *mut FIEL_Label) -> A_Err,
    >,
    pub AEGP_SetOutSpecInterlaceLabel: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, interlaceP: *const FIEL_Label) -> A_Err,
    >,
    pub AEGP_GetOutSpecAlphaLabel: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, alphaP: *mut AEIO_AlphaLabel) -> A_Err,
    >,
    pub AEGP_SetOutSpecAlphaLabel: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, alphaP: *const AEIO_AlphaLabel) -> A_Err,
    >,
    pub AEGP_GetOutSpecDuration: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, durationP: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetOutSpecDuration: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, durationP: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetOutSpecDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            outH: AEIO_OutSpecH,
            widthPL: *mut A_long,
            heightPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetOutSpecHSF: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, hsfP: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_SetOutSpecHSF: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, hsfP: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_GetOutSpecSoundRate: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, ratePF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_SetOutSpecSoundRate:
        ::std::option::Option<unsafe extern "C" fn(outH: AEIO_OutSpecH, rateF: A_FpLong) -> A_Err>,
    pub AEGP_GetOutSpecSoundEncoding: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, encodingP: *mut AEIO_SndEncoding) -> A_Err,
    >,
    pub AEGP_SetOutSpecSoundEncoding: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, encoding: AEIO_SndEncoding) -> A_Err,
    >,
    pub AEGP_GetOutSpecSoundSampleSize: ::std::option::Option<
        unsafe extern "C" fn(
            outH: AEIO_OutSpecH,
            bytes_per_sampleP: *mut AEIO_SndSampleSize,
        ) -> A_Err,
    >,
    pub AEGP_SetOutSpecSoundSampleSize: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, bytes_per_sample: AEIO_SndSampleSize) -> A_Err,
    >,
    pub AEGP_GetOutSpecSoundChannels: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, num_channelsP: *mut AEIO_SndChannels) -> A_Err,
    >,
    pub AEGP_SetOutSpecSoundChannels: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, num_channels: AEIO_SndChannels) -> A_Err,
    >,
    pub AEGP_GetOutSpecIsStill: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, is_stillPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetOutSpecPosterTime: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, poster_timeP: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetOutSpecStartFrame: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, start_frameP: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetOutSpecPullDown: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, pulldownP: *mut AEIO_Pulldown) -> A_Err,
    >,
    pub AEGP_GetOutSpecIsMissing: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, missingPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetOutSpecShouldEmbedICCProfile: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, embedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetNewOutSpecColorProfile: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            outH: AEIO_OutSpecH,
            color_profilePP: *mut AEGP_ColorProfileP,
        ) -> A_Err,
    >,
    pub AEGP_GetOutSpecOutputModule: ::std::option::Option<
        unsafe extern "C" fn(
            outH: AEIO_OutSpecH,
            rq_itemP: *mut AEGP_RQItemRefH,
            om_refP: *mut AEGP_OutputModuleRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetOutSpecStartTime: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, outStartTimePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetOutSpecFrameTime: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, outFrameTimePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetOutSpecIsDropFrame: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, outIsDropFramePB: *mut A_Boolean) -> A_Err,
    >,
}
pub type AE_FIM_ImportFlavorRef = A_long;
pub type AE_FIM_ImportFlags = A_long;
pub type AE_FIM_SpecialAction = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AE_FIM_RefconTag {
    _unused: [u8; 0],
}
pub type AE_FIM_Refcon = *mut AE_FIM_RefconTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AE_FIM_ImportOptionsTag {
    _unused: [u8; 0],
}
pub type AE_FIM_ImportOptions = *mut AE_FIM_ImportOptionsTag;
pub type AE_FIM_ImportFileCB = ::std::option::Option<
    unsafe extern "C" fn(
        pathZ: *const A_UTF16Char,
        imp_options: AE_FIM_ImportOptions,
        action: AE_FIM_SpecialAction,
        itemH: AEGP_ItemH,
        refcon: AE_FIM_Refcon,
    ) -> A_Err,
>;
pub type AE_FIM_VerifyImportableCB = ::std::option::Option<
    unsafe extern "C" fn(
        pathZ: *const A_UTF16Char,
        refcon: AE_FIM_Refcon,
        importablePB: *mut A_Boolean,
    ) -> A_Err,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AE_FIM_ImportCallbacks {
    pub refcon: AE_FIM_Refcon,
    pub import_cb: AE_FIM_ImportFileCB,
    pub verify_cb: AE_FIM_VerifyImportableCB,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_FIMSuite4 {
    pub AEGP_RegisterImportFlavor: ::std::option::Option<
        unsafe extern "C" fn(nameZ: *const A_char, imp_refP: *mut AE_FIM_ImportFlavorRef) -> A_Err,
    >,
    pub AEGP_RegisterImportFlavorFileTypes: ::std::option::Option<
        unsafe extern "C" fn(
            imp_ref: AE_FIM_ImportFlavorRef,
            num_filekindsL: A_long,
            kindsAP: *const AEIO_FileKind,
            num_fileextsL: A_long,
            extsAP: *const AEIO_FileKind,
        ) -> A_Err,
    >,
    pub AEGP_RegisterImportFlavorImportCallbacks: ::std::option::Option<
        unsafe extern "C" fn(
            imp_ref: AE_FIM_ImportFlavorRef,
            single_flag: AE_FIM_ImportFlags,
            imp_cbsP: *const AE_FIM_ImportCallbacks,
        ) -> A_Err,
    >,
    pub AEGP_SetImportedItem: ::std::option::Option<
        unsafe extern "C" fn(
            imp_options: AE_FIM_ImportOptions,
            imported_itemH: AEGP_ItemH,
        ) -> A_Err,
    >,
    pub AEGP_FileSequenceImportOptionsFromFIMImportOptions: ::std::option::Option<
        unsafe extern "C" fn(
            imp_options: AE_FIM_ImportOptions,
            seq_import_optionsP: *mut AEGP_FileSequenceImportOptions,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_PersistentDataSuite4 {
    pub AEGP_GetApplicationBlob: ::std::option::Option<
        unsafe extern "C" fn(
            blob_type: AEGP_PersistentType,
            blobPH: *mut AEGP_PersistentBlobH,
        ) -> A_Err,
    >,
    pub AEGP_GetNumSections: ::std::option::Option<
        unsafe extern "C" fn(blobH: AEGP_PersistentBlobH, num_sectionPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetSectionKeyByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_index: A_long,
            max_section_size: A_long,
            section_keyZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_DoesKeyExist: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            existsPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetNumKeys: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            num_keysPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetValueKeyByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            key_index: A_long,
            max_key_size: A_long,
            value_keyZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetDataHandle: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            defaultH0: AEGP_MemHandle,
            valuePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetData: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            data_sizeLu: A_u_long,
            defaultPV0: *const ::std::os::raw::c_void,
            bufPV: *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_GetString: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            defaultZ0: *const A_char,
            buf_sizeLu: A_u_long,
            bufZ: *mut A_char,
            actual_buf_sizeLu0: *mut A_u_long,
        ) -> A_Err,
    >,
    pub AEGP_GetLong: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            defaultL: A_long,
            valuePL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetFpLong: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            defaultF: A_FpLong,
            valuePF: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_GetTime: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            defaultPT0: *const A_Time,
            valuePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetARGB: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            defaultP0: *const PF_PixelFloat,
            valueP: *mut PF_PixelFloat,
        ) -> A_Err,
    >,
    pub AEGP_SetDataHandle: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            valueH: AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_SetData: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            data_sizeLu: A_u_long,
            dataPV: *const ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_SetString: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            strZ: *const A_char,
        ) -> A_Err,
    >,
    pub AEGP_SetLong: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            valueL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_SetFpLong: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            valueF: A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_SetTime: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            valuePT: *const A_Time,
        ) -> A_Err,
    >,
    pub AEGP_SetARGB: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            valueP: *const PF_PixelFloat,
        ) -> A_Err,
    >,
    pub AEGP_DeleteEntry: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetPrefsDirectory:
        ::std::option::Option<unsafe extern "C" fn(unicode_pathPH: *mut AEGP_MemHandle) -> A_Err>,
}
pub const AEGP_CollectionItemType_NONE: _bindgen_ty_160 = 0;
pub const AEGP_CollectionItemType_LAYER: _bindgen_ty_160 = 1;
pub const AEGP_CollectionItemType_MASK: _bindgen_ty_160 = 2;
pub const AEGP_CollectionItemType_EFFECT: _bindgen_ty_160 = 3;
pub const AEGP_CollectionItemType_STREAM: _bindgen_ty_160 = 4;
pub const AEGP_CollectionItemType_KEYFRAME: _bindgen_ty_160 = 5;
pub const AEGP_CollectionItemType_MASK_VERTEX: _bindgen_ty_160 = 6;
pub const AEGP_CollectionItemType_STREAMREF: _bindgen_ty_160 = 7;
pub const AEGP_CollectionItemType_END: _bindgen_ty_160 = 8;
pub const AEGP_CollectionItemType_BEGIN: _bindgen_ty_160 = 1;
pub type _bindgen_ty_160 = ::std::os::raw::c_int;
pub type AEGP_CollectionItemType = A_LegacyEnumType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_LayerCollectionItem {
    pub layerH: AEGP_LayerH,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_MaskCollectionItem {
    pub layerH: AEGP_LayerH,
    pub index: AEGP_MaskIndex,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_EffectCollectionItem {
    pub layerH: AEGP_LayerH,
    pub index: AEGP_EffectIndex,
}
pub const AEGP_StreamCollectionItemType_NONE: _bindgen_ty_161 = 0;
pub const AEGP_StreamCollectionItemType_LAYER: _bindgen_ty_161 = 1;
pub const AEGP_StreamCollectionItemType_MASK: _bindgen_ty_161 = 2;
pub const AEGP_StreamCollectionItemType_EFFECT: _bindgen_ty_161 = 3;
pub const AEGP_StreamCollectionItemType_END: _bindgen_ty_161 = 4;
pub const AEGP_StreamCollectionItemType_BEGIN: _bindgen_ty_161 = 1;
pub type _bindgen_ty_161 = ::std::os::raw::c_int;
pub type AEGP_StreamCollectionItemType = A_LegacyEnumType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_MaskStreamCollectionItem {
    pub mask: AEGP_MaskCollectionItem,
    pub mask_stream: AEGP_MaskStream,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_EffectStreamCollectionItem {
    pub effect: AEGP_EffectCollectionItem,
    pub param_index: A_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_LayerStreamCollectionItem {
    pub layerH: AEGP_LayerH,
    pub layer_stream: AEGP_LayerStream,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AEGP_StreamCollectionItem {
    pub type_: AEGP_StreamCollectionItemType,
    pub u: AEGP_StreamCollectionItem__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AEGP_StreamCollectionItem__bindgen_ty_1 {
    pub layer_stream: AEGP_LayerStreamCollectionItem,
    pub mask_stream: AEGP_MaskStreamCollectionItem,
    pub effect_stream: AEGP_EffectStreamCollectionItem,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_MaskVertexCollectionItem {
    pub mask_sel: AEGP_MaskCollectionItem,
    pub index: AEGP_VertexIndex,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AEGP_KeyframeCollectionItem {
    pub stream_coll: AEGP_StreamCollectionItem,
    pub index: AEGP_KeyframeIndex,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AEGP_CollectionItemV2 {
    pub type_: AEGP_CollectionItemType,
    pub u: AEGP_CollectionItemV2__bindgen_ty_1,
    pub stream_refH: AEGP_StreamRefH,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AEGP_CollectionItemV2__bindgen_ty_1 {
    pub layer: AEGP_LayerCollectionItem,
    pub mask: AEGP_MaskCollectionItem,
    pub effect: AEGP_EffectCollectionItem,
    pub stream: AEGP_StreamCollectionItem,
    pub mask_vertex: AEGP_MaskVertexCollectionItem,
    pub keyframe: AEGP_KeyframeCollectionItem,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CollectionSuite2 {
    pub AEGP_NewCollection: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            collectionPH: *mut AEGP_Collection2H,
        ) -> A_Err,
    >,
    pub AEGP_DisposeCollection:
        ::std::option::Option<unsafe extern "C" fn(collectionH: AEGP_Collection2H) -> A_Err>,
    pub AEGP_GetCollectionNumItems: ::std::option::Option<
        unsafe extern "C" fn(collectionH: AEGP_Collection2H, num_itemsPL: *mut A_u_long) -> A_Err,
    >,
    pub AEGP_GetCollectionItemByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            collectionH: AEGP_Collection2H,
            indexL: A_u_long,
            collection_itemP: *mut AEGP_CollectionItemV2,
        ) -> A_Err,
    >,
    pub AEGP_CollectionPushBack: ::std::option::Option<
        unsafe extern "C" fn(
            collectionH: AEGP_Collection2H,
            collection_itemP: *const AEGP_CollectionItemV2,
        ) -> A_Err,
    >,
    pub AEGP_CollectionErase: ::std::option::Option<
        unsafe extern "C" fn(
            collectionH: AEGP_Collection2H,
            index_firstL: A_u_long,
            index_lastL: A_u_long,
        ) -> A_Err,
    >,
}
pub const AEGP_WorldType_NONE: _bindgen_ty_162 = 0;
pub const AEGP_WorldType_8: _bindgen_ty_162 = 1;
pub const AEGP_WorldType_16: _bindgen_ty_162 = 2;
pub const AEGP_WorldType_32: _bindgen_ty_162 = 3;
pub type _bindgen_ty_162 = ::std::os::raw::c_int;
pub type AEGP_WorldType = A_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_WorldSuite3 {
    pub AEGP_New: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            type_: AEGP_WorldType,
            widthL: A_long,
            heightL: A_long,
            worldPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_Dispose: ::std::option::Option<unsafe extern "C" fn(worldH: AEGP_WorldH) -> A_Err>,
    pub AEGP_GetType: ::std::option::Option<
        unsafe extern "C" fn(worldH: AEGP_WorldH, typeP: *mut AEGP_WorldType) -> A_Err,
    >,
    pub AEGP_GetSize: ::std::option::Option<
        unsafe extern "C" fn(
            worldH: AEGP_WorldH,
            widthPL: *mut A_long,
            heightPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetRowBytes: ::std::option::Option<
        unsafe extern "C" fn(worldH: AEGP_WorldH, row_bytesPL: *mut A_u_long) -> A_Err,
    >,
    pub AEGP_GetBaseAddr8: ::std::option::Option<
        unsafe extern "C" fn(worldH: AEGP_WorldH, base_addrP: *mut *mut PF_Pixel8) -> A_Err,
    >,
    pub AEGP_GetBaseAddr16: ::std::option::Option<
        unsafe extern "C" fn(worldH: AEGP_WorldH, base_addrP: *mut *mut PF_Pixel16) -> A_Err,
    >,
    pub AEGP_GetBaseAddr32: ::std::option::Option<
        unsafe extern "C" fn(worldH: AEGP_WorldH, base_addrP: *mut *mut PF_PixelFloat) -> A_Err,
    >,
    pub AEGP_FillOutPFEffectWorld: ::std::option::Option<
        unsafe extern "C" fn(worldH: AEGP_WorldH, pf_worldP: *mut PF_EffectWorld) -> A_Err,
    >,
    pub AEGP_FastBlur: ::std::option::Option<
        unsafe extern "C" fn(
            radiusF: A_FpLong,
            mode: PF_ModeFlags,
            quality: PF_Quality,
            worldH: AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_NewPlatformWorld: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            type_: AEGP_WorldType,
            widthL: A_long,
            heightL: A_long,
            worldPH: *mut AEGP_PlatformWorldH,
        ) -> A_Err,
    >,
    pub AEGP_DisposePlatformWorld:
        ::std::option::Option<unsafe extern "C" fn(worldH: AEGP_PlatformWorldH) -> A_Err>,
    pub AEGP_NewReferenceFromPlatformWorld: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            platform_worldH: AEGP_PlatformWorldH,
            worldPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
}
pub const AEGP_MatteMode_STRAIGHT: _bindgen_ty_163 = 0;
pub const AEGP_MatteMode_PREMUL_BLACK: _bindgen_ty_163 = 1;
pub const AEGP_MatteMode_PREMUL_BG_COLOR: _bindgen_ty_163 = 2;
pub type _bindgen_ty_163 = ::std::os::raw::c_int;
pub type AEGP_MatteMode = A_long;
pub const AEGP_ChannelOrder_ARGB: _bindgen_ty_164 = 0;
pub const AEGP_ChannelOrder_BGRA: _bindgen_ty_164 = 1;
pub type _bindgen_ty_164 = ::std::os::raw::c_int;
pub type AEGP_ChannelOrder = A_char;
pub const AEGP_ItemQuality_DRAFT: _bindgen_ty_165 = 0;
pub const AEGP_ItemQuality_BEST: _bindgen_ty_165 = 1;
pub type _bindgen_ty_165 = ::std::os::raw::c_int;
pub type AEGP_ItemQuality = A_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_RenderOptionsSuite4 {
    pub AEGP_NewFromItem: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            itemH: AEGP_ItemH,
            optionsPH: *mut AEGP_RenderOptionsH,
        ) -> A_Err,
    >,
    pub AEGP_Duplicate: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            optionsH: AEGP_RenderOptionsH,
            copyPH: *mut AEGP_RenderOptionsH,
        ) -> A_Err,
    >,
    pub AEGP_Dispose:
        ::std::option::Option<unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH) -> A_Err>,
    pub AEGP_SetTime: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, time: A_Time) -> A_Err,
    >,
    pub AEGP_GetTime: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, timeP: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetTimeStep: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, time_step: A_Time) -> A_Err,
    >,
    pub AEGP_GetTimeStep: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetFieldRender: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, field_render: PF_Field) -> A_Err,
    >,
    pub AEGP_GetFieldRender: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, field_renderP: *mut PF_Field) -> A_Err,
    >,
    pub AEGP_SetWorldType: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, type_: AEGP_WorldType) -> A_Err,
    >,
    pub AEGP_GetWorldType: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, typeP: *mut AEGP_WorldType) -> A_Err,
    >,
    pub AEGP_SetDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, x: A_short, y: A_short) -> A_Err,
    >,
    pub AEGP_GetDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_RenderOptionsH,
            xP: *mut A_short,
            yP: *mut A_short,
        ) -> A_Err,
    >,
    pub AEGP_SetRegionOfInterest: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, roiP: *const A_LRect) -> A_Err,
    >,
    pub AEGP_GetRegionOfInterest: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, roiP: *mut A_LRect) -> A_Err,
    >,
    pub AEGP_SetMatteMode: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, mode: AEGP_MatteMode) -> A_Err,
    >,
    pub AEGP_GetMatteMode: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, modeP: *mut AEGP_MatteMode) -> A_Err,
    >,
    pub AEGP_SetChannelOrder: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_RenderOptionsH,
            channel_order: AEGP_ChannelOrder,
        ) -> A_Err,
    >,
    pub AEGP_GetChannelOrder: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_RenderOptionsH,
            channelP: *mut AEGP_ChannelOrder,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderGuideLayers: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, will_renderPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetRenderGuideLayers: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, render_themB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetRenderQuality: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_RenderOptionsH,
            qualityP: *mut AEGP_ItemQuality,
        ) -> A_Err,
    >,
    pub AEGP_SetRenderQuality: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, quality: AEGP_ItemQuality) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_LayerRenderOptionsSuite2 {
    pub AEGP_NewFromLayer: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            optionsPH: *mut AEGP_LayerRenderOptionsH,
        ) -> A_Err,
    >,
    pub AEGP_NewFromUpstreamOfEffect: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            effectH: AEGP_EffectRefH,
            optionsPH: *mut AEGP_LayerRenderOptionsH,
        ) -> A_Err,
    >,
    pub AEGP_NewFromDownstreamOfEffect: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            effectH: AEGP_EffectRefH,
            optionsPH: *mut AEGP_LayerRenderOptionsH,
        ) -> A_Err,
    >,
    pub AEGP_Duplicate: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            optionsH: AEGP_LayerRenderOptionsH,
            copyPH: *mut AEGP_LayerRenderOptionsH,
        ) -> A_Err,
    >,
    pub AEGP_Dispose:
        ::std::option::Option<unsafe extern "C" fn(optionsH: AEGP_LayerRenderOptionsH) -> A_Err>,
    pub AEGP_SetTime: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_LayerRenderOptionsH, time: A_Time) -> A_Err,
    >,
    pub AEGP_GetTime: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_LayerRenderOptionsH, timeP: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetTimeStep: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_LayerRenderOptionsH, time_step: A_Time) -> A_Err,
    >,
    pub AEGP_GetTimeStep: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_LayerRenderOptionsH, timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetWorldType: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_LayerRenderOptionsH, type_: AEGP_WorldType) -> A_Err,
    >,
    pub AEGP_GetWorldType: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_LayerRenderOptionsH,
            typeP: *mut AEGP_WorldType,
        ) -> A_Err,
    >,
    pub AEGP_SetDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_LayerRenderOptionsH, x: A_short, y: A_short) -> A_Err,
    >,
    pub AEGP_GetDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_LayerRenderOptionsH,
            xP: *mut A_short,
            yP: *mut A_short,
        ) -> A_Err,
    >,
    pub AEGP_SetMatteMode: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_LayerRenderOptionsH, mode: AEGP_MatteMode) -> A_Err,
    >,
    pub AEGP_GetMatteMode: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_LayerRenderOptionsH,
            modeP: *mut AEGP_MatteMode,
        ) -> A_Err,
    >,
}
pub type AEGP_AsyncRequestId = A_u_longlong;
pub type AEGP_RenderSuiteCheckForCancel = ::std::option::Option<
    unsafe extern "C" fn(refcon: *mut ::std::os::raw::c_void, cancelPB: *mut A_Boolean) -> A_Err,
>;
pub type AEGP_AsyncFrameReadyCallback = ::std::option::Option<
    unsafe extern "C" fn(
        request_id: AEGP_AsyncRequestId,
        was_canceled: A_Boolean,
        error: A_Err,
        receiptH: AEGP_FrameReceiptH,
        refconP0: AEGP_AsyncFrameRequestRefcon,
    ) -> A_Err,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_RenderSuite5 {
    pub AEGP_RenderAndCheckoutFrame: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_RenderOptionsH,
            cancel_functionP0: AEGP_RenderSuiteCheckForCancel,
            cancel_function_refconP0: AEGP_CancelRefcon,
            receiptPH: *mut AEGP_FrameReceiptH,
        ) -> A_Err,
    >,
    pub AEGP_RenderAndCheckoutLayerFrame: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_LayerRenderOptionsH,
            cancel_functionP0: AEGP_RenderSuiteCheckForCancel,
            cancel_function_refconP0: AEGP_CancelRefcon,
            receiptPH: *mut AEGP_FrameReceiptH,
        ) -> A_Err,
    >,
    pub AEGP_RenderAndCheckoutLayerFrame_Async: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_LayerRenderOptionsH,
            callback: AEGP_AsyncFrameReadyCallback,
            request_completion_refconP0: AEGP_AsyncFrameRequestRefcon,
            asyncRequestIdP: *mut AEGP_AsyncRequestId,
        ) -> A_Err,
    >,
    pub AEGP_CancelAsyncRequest:
        ::std::option::Option<unsafe extern "C" fn(asyncRequestId: AEGP_AsyncRequestId) -> A_Err>,
    pub AEGP_CheckinFrame:
        ::std::option::Option<unsafe extern "C" fn(receiptH: AEGP_FrameReceiptH) -> A_Err>,
    pub AEGP_GetReceiptWorld: ::std::option::Option<
        unsafe extern "C" fn(receiptH: AEGP_FrameReceiptH, worldPH: *mut AEGP_WorldH) -> A_Err,
    >,
    pub AEGP_GetRenderedRegion: ::std::option::Option<
        unsafe extern "C" fn(receiptH: AEGP_FrameReceiptH, rendered_regionP: *mut A_LRect) -> A_Err,
    >,
    pub AEGP_IsRenderedFrameSufficient: ::std::option::Option<
        unsafe extern "C" fn(
            rendered_optionsH: AEGP_RenderOptionsH,
            proposed_optionsH: AEGP_RenderOptionsH,
            rendered_is_sufficientPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_RenderNewItemSoundData: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            start_timePT: *const A_Time,
            durationPT: *const A_Time,
            sound_formatP: *const AEGP_SoundDataFormat,
            cancel_functionP0: AEGP_RenderSuiteCheckForCancel,
            cancel_function_refconP0: AEGP_CancelRefcon,
            new_sound_dataPH: *mut AEGP_SoundDataH,
        ) -> A_Err,
    >,
    pub AEGP_GetCurrentTimestamp:
        ::std::option::Option<unsafe extern "C" fn(time_stampP: *mut AEGP_TimeStamp) -> A_Err>,
    pub AEGP_HasItemChangedSinceTimestamp: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            start_timeP: *const A_Time,
            durationP: *const A_Time,
            time_stampP: *const AEGP_TimeStamp,
            item_has_changedPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsItemWorthwhileToRender: ::std::option::Option<
        unsafe extern "C" fn(
            roH: AEGP_RenderOptionsH,
            time_stampP: *const AEGP_TimeStamp,
            worthwhile_to_renderPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_CheckinRenderedFrame: ::std::option::Option<
        unsafe extern "C" fn(
            roH: AEGP_RenderOptionsH,
            time_stampP: *const AEGP_TimeStamp,
            ticks_to_renderL: A_u_long,
            imageH: AEGP_PlatformWorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetReceiptGuid: ::std::option::Option<
        unsafe extern "C" fn(receiptH: AEGP_FrameReceiptH, guidMH: *mut AEGP_MemHandle) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_RenderAsyncManagerSuite1 {
    pub AEGP_CheckoutOrRender_ItemFrame_AsyncManager: ::std::option::Option<
        unsafe extern "C" fn(
            async_managerP: PF_AsyncManagerP,
            purpose_id: A_u_long,
            ro: AEGP_RenderOptionsH,
            out_receiptPH: *mut AEGP_FrameReceiptH,
        ) -> A_Err,
    >,
    pub AEGP_CheckoutOrRender_LayerFrame_AsyncManager: ::std::option::Option<
        unsafe extern "C" fn(
            async_managerP: PF_AsyncManagerP,
            purpose_id: A_u_long,
            lro: AEGP_LayerRenderOptionsH,
            out_receiptPH: *mut AEGP_FrameReceiptH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_TrackerSuite1 {
    pub AEGP_GetNumFeatures: ::std::option::Option<
        unsafe extern "C" fn(contextP: PT_TrackingContextPtr, num_featuresPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetFeatureRegionByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            contextP: PT_TrackingContextPtr,
            index: PT_Index,
            rectP: *mut A_FloatRect,
        ) -> A_Err,
    >,
    pub AEGP_GetSearchRegionByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            contextP: PT_TrackingContextPtr,
            index: PT_Index,
            rectP: *mut A_FloatRect,
        ) -> A_Err,
    >,
    pub AEGP_GetFeatureWorldByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            contextP: PT_TrackingContextPtr,
            index: PT_Index,
            feature_worldPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetFrameWorld: ::std::option::Option<
        unsafe extern "C" fn(
            contextP: PT_TrackingContextPtr,
            frame_worldPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetTrackerSourceDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            contextP: PT_TrackingContextPtr,
            widthPL: *mut A_long,
            heightPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_SetFeatureRegionByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            contextP: PT_TrackingContextPtr,
            index: PT_Index,
            rectP: *const A_FloatRect,
        ) -> A_Err,
    >,
    pub AEGP_SetAccuracyByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            contextP: PT_TrackingContextPtr,
            index: PT_Index,
            accuracyF: A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_ShouldTrackFeature: ::std::option::Option<
        unsafe extern "C" fn(
            contextP: PT_TrackingContextPtr,
            index: PT_Index,
            trackPB: *mut A_Boolean,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_TrackerUtilitySuite1 {
    pub AEGP_HasUserCancelled: ::std::option::Option<
        unsafe extern "C" fn(
            contextP: PT_TrackingContextPtr,
            user_cancelledPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetTrackerFromTrackerInstance: ::std::option::Option<
        unsafe extern "C" fn(
            tracker_instanceP: PT_TrackerInstancePtr,
            trackerPP: *mut PT_TrackerPtr,
        ) -> A_Err,
    >,
    pub AEGP_GetTrackerInstanceFromTrackingContext: ::std::option::Option<
        unsafe extern "C" fn(
            contextP: PT_TrackingContextPtr,
            tracker_instancePP: *mut PT_TrackerInstancePtr,
        ) -> A_Err,
    >,
    pub AEGP_GetGlobalData: ::std::option::Option<
        unsafe extern "C" fn(trackerP: PT_TrackerPtr, global_dataPH: *mut AEGP_MemHandle) -> A_Err,
    >,
    pub AEGP_GetInstanceData: ::std::option::Option<
        unsafe extern "C" fn(
            tracker_instanceP: PT_TrackerInstancePtr,
            instance_dataPH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetTrackData: ::std::option::Option<
        unsafe extern "C" fn(
            contextP: PT_TrackingContextPtr,
            track_dataPH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_RQM_Refcon {
    _unused: [u8; 0],
}
pub type AEGP_RQM_Refcon = *mut _AEGP_RQM_Refcon;
pub type AEGP_RQM_SessionId = A_u_longlong;
pub type AEGP_RQM_ItemId = A_u_longlong;
pub type AEGP_RQM_FrameId = A_u_longlong;
pub const AEGP_RQM_FinishedStatus_AEGP_RQM_FinishedStatus_UNKNOWN: AEGP_RQM_FinishedStatus = 0;
pub const AEGP_RQM_FinishedStatus_AEGP_RQM_FinishedStatus_SUCCEEDED: AEGP_RQM_FinishedStatus = 1;
pub const AEGP_RQM_FinishedStatus_AEGP_RQM_FinishedStatus_ABORTED: AEGP_RQM_FinishedStatus = 2;
pub const AEGP_RQM_FinishedStatus_AEGP_RQM_FinishedStatus_ERRED: AEGP_RQM_FinishedStatus = 3;
pub type AEGP_RQM_FinishedStatus = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_RQM_BasicData {
    pub pica_basicP: *const SPBasicSuite,
    pub aegp_plug_id: A_long,
    pub aegp_refconPV: AEGP_RQM_Refcon,
}
pub type AEGP_RQM_BasicData = _AEGP_RQM_BasicData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AEGP_RQM_FunctionBlock1 {
    pub AEGP_RQM_RenderJobStarted: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEGP_RQM_BasicData,
            jobid: AEGP_RQM_SessionId,
        ) -> A_Err,
    >,
    pub AEGP_RQM_RenderJobEnded: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEGP_RQM_BasicData,
            jobid: AEGP_RQM_SessionId,
        ) -> A_Err,
    >,
    pub AEGP_RQM_RenderJobItemStarted: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEGP_RQM_BasicData,
            jobid: AEGP_RQM_SessionId,
            itemid: AEGP_RQM_ItemId,
        ) -> A_Err,
    >,
    pub AEGP_RQM_RenderJobItemUpdated: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEGP_RQM_BasicData,
            jobid: AEGP_RQM_SessionId,
            itemid: AEGP_RQM_ItemId,
            frameid: AEGP_RQM_FrameId,
        ) -> A_Err,
    >,
    pub AEGP_RQM_RenderJobItemEnded: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEGP_RQM_BasicData,
            jobid: AEGP_RQM_SessionId,
            itemid: AEGP_RQM_ItemId,
            fstatus: AEGP_RQM_FinishedStatus,
        ) -> A_Err,
    >,
    pub AEGP_RQM_RenderJobItemReportLog: ::std::option::Option<
        unsafe extern "C" fn(
            basic_dataP: *mut AEGP_RQM_BasicData,
            jobid: AEGP_RQM_SessionId,
            itemid: AEGP_RQM_ItemId,
            isError: A_Boolean,
            logbuf: AEGP_MemHandle,
        ) -> A_Err,
    >,
}
pub type AEGP_RQM_FunctionBlock1 = _AEGP_RQM_FunctionBlock1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_RenderQueueMonitorSuite1 {
    pub AEGP_RegisterListener: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            aegp_refconP: AEGP_RQM_Refcon,
            fcn_blockP: *const AEGP_RQM_FunctionBlock1,
        ) -> A_Err,
    >,
    pub AEGP_DeregisterListener: ::std::option::Option<
        unsafe extern "C" fn(aegp_plugin_id: AEGP_PluginID, aegp_refconP: AEGP_RQM_Refcon) -> A_Err,
    >,
    pub AEGP_GetProjectName: ::std::option::Option<
        unsafe extern "C" fn(
            sessid: AEGP_RQM_SessionId,
            utf_project_namePH0: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetAppVersion: ::std::option::Option<
        unsafe extern "C" fn(
            sessid: AEGP_RQM_SessionId,
            utf_app_versionPH0: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetNumJobItems: ::std::option::Option<
        unsafe extern "C" fn(sessid: AEGP_RQM_SessionId, num_jobitemsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetJobItemID: ::std::option::Option<
        unsafe extern "C" fn(
            sessid: AEGP_RQM_SessionId,
            jobItemIndex: A_long,
            jobItemID: *mut AEGP_RQM_ItemId,
        ) -> A_Err,
    >,
    pub AEGP_GetNumJobItemRenderSettings: ::std::option::Option<
        unsafe extern "C" fn(
            sessid: AEGP_RQM_SessionId,
            itemid: AEGP_RQM_ItemId,
            num_settingsPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetJobItemRenderSetting: ::std::option::Option<
        unsafe extern "C" fn(
            sessid: AEGP_RQM_SessionId,
            itemid: AEGP_RQM_ItemId,
            settingIndex: A_long,
            utf_setting_namePH0: *mut AEGP_MemHandle,
            utf_setting_valuePH0: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetNumJobItemOutputModules: ::std::option::Option<
        unsafe extern "C" fn(
            sessid: AEGP_RQM_SessionId,
            itemid: AEGP_RQM_ItemId,
            num_outputmodulesPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetNumJobItemOutputModuleSettings: ::std::option::Option<
        unsafe extern "C" fn(
            sessid: AEGP_RQM_SessionId,
            itemid: AEGP_RQM_ItemId,
            outputModuleIndex: A_long,
            num_settingsPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetJobItemOutputModuleSetting: ::std::option::Option<
        unsafe extern "C" fn(
            sessid: AEGP_RQM_SessionId,
            itemid: AEGP_RQM_ItemId,
            outputModuleIndex: A_long,
            settingIndex: A_long,
            utf_setting_namePH0: *mut AEGP_MemHandle,
            utf_setting_valuePH0: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetNumJobItemOutputModuleWarnings: ::std::option::Option<
        unsafe extern "C" fn(
            sessid: AEGP_RQM_SessionId,
            itemid: AEGP_RQM_ItemId,
            outputModuleIndex: A_long,
            num_warningsPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetJobItemOutputModuleWarning: ::std::option::Option<
        unsafe extern "C" fn(
            sessid: AEGP_RQM_SessionId,
            itemid: AEGP_RQM_ItemId,
            outputModuleIndex: A_long,
            warningIndex: A_long,
            utf_warning_valuePH0: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetNumJobItemFrameProperties: ::std::option::Option<
        unsafe extern "C" fn(
            sessid: AEGP_RQM_SessionId,
            itemid: AEGP_RQM_ItemId,
            frameid: AEGP_RQM_FrameId,
            num_propertiesPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetJobItemFrameProperty: ::std::option::Option<
        unsafe extern "C" fn(
            sessid: AEGP_RQM_SessionId,
            itemid: AEGP_RQM_ItemId,
            frameid: AEGP_RQM_FrameId,
            propertyIndex: A_long,
            utf_property_namePH0: *mut AEGP_MemHandle,
            utf_property_valuePH0: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetNumJobItemOutputModuleProperties: ::std::option::Option<
        unsafe extern "C" fn(
            sessid: AEGP_RQM_SessionId,
            itemid: AEGP_RQM_ItemId,
            outputModuleIndex: A_long,
            num_propertiesPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetJobItemOutputModuleProperty: ::std::option::Option<
        unsafe extern "C" fn(
            sessid: AEGP_RQM_SessionId,
            itemid: AEGP_RQM_ItemId,
            outputModuleIndex: A_long,
            propertyIndex: A_long,
            utf_property_namePH0: *mut AEGP_MemHandle,
            utf_property_valuePH0: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetJobItemFrameThumbnail: ::std::option::Option<
        unsafe extern "C" fn(
            sessid: AEGP_RQM_SessionId,
            itemid: AEGP_RQM_ItemId,
            frameid: AEGP_RQM_FrameId,
            widthPL: *mut A_long,
            heightPL: *mut A_long,
            thumbnailPH0: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
}
pub type PF_ConstPtr = *const ::std::os::raw::c_void;
pub type PF_ConstHandle = *const PF_ConstPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_EffectSequenceDataSuite1 {
    pub PF_GetConstSequenceData: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, sequence_data: *mut PF_ConstHandle) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_TimeDisplay {
    pub time_display_type: AEGP_TimeDisplayType,
    pub timebaseC: A_char,
    pub non_drop_30B: A_Boolean,
    pub frames_per_footC: A_char,
    pub starting_frameL: A_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CanvasSuite1 {
    pub AEGP_GetCompToRender: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetNumLayersToRender: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            num_to_renderPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetNthLayerContextToRender: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            n: A_long,
            layer_contextPH: *mut AEGP_RenderLayerContextH,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerFromLayerContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetCompRenderTime: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            time: *mut A_Time,
            time_step: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetCompDestinationBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            compH: AEGP_CompH,
            dst: *mut PF_EffectWorld,
        ) -> A_Err,
    >,
    pub AEGP_GetROI: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, roiPR: *mut A_LegacyRect) -> A_Err,
    >,
    #[doc = " for rendering track mattes"]
    pub AEGP_RenderLayer: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layerH: AEGP_LayerH,
            render_hints: AEGP_RenderHints,
            render_bufferP: *mut PF_EffectWorld,
        ) -> A_Err,
    >,
    pub AEGP_RenderTexture: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            suggested_scaleP0: *mut A_FloatPoint,
            suggested_src_rectP0: *mut A_FloatRect,
            src_matrixP0: *mut A_Matrix3,
            dst: *mut PF_EffectWorld,
        ) -> A_Err,
    >,
    pub AEGP_DisposeTexture: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            dst0: *mut PF_EffectWorld,
        ) -> A_Err,
    >,
    pub AEGP_GetFieldRender: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, field: *mut PF_Field) -> A_Err,
    >,
    pub AEGP_ReportArtisanProgress: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            countL: A_long,
            totalL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            dsfP: *mut AEGP_DownsampleFactor,
        ) -> A_Err,
    >,
    pub AEGP_IsBlankCanvas: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            is_blankPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderLayerToWorldXform: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timeP: *const A_Time,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderLayerBounds: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timeP: *const A_Time,
            boundsP: *mut A_LegacyRect,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderOpacity: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timePT: *const A_Time,
            opacityPF: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_IsRenderLayerActive: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timePT: *const A_Time,
            activePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_SetArtisanLayerProgress: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            countL: A_long,
            num_layersL: A_long,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_RQItemSuite3 {
    pub AEGP_GetNumRQItems:
        ::std::option::Option<unsafe extern "C" fn(num_itemsPL: *mut A_long) -> A_Err>,
    pub AEGP_GetRQItemByIndex: ::std::option::Option<
        unsafe extern "C" fn(rq_item_index: A_long, rq_item_refPH: *mut AEGP_RQItemRefH) -> A_Err,
    >,
    pub AEGP_GetNextRQItem: ::std::option::Option<
        unsafe extern "C" fn(
            current_rq_itemH: AEGP_RQItemRefH,
            next_rq_itemH: *mut AEGP_RQItemRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetNumOutputModulesForRQItem: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, num_outmodsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetRenderState: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            statusP: *mut AEGP_RenderItemStatusType,
        ) -> A_Err,
    >,
    pub AEGP_SetRenderState: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, status: AEGP_RenderItemStatusType) -> A_Err,
    >,
    pub AEGP_GetStartedTime: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, started_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetElapsedTime: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, render_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetLogType: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, logtypeP: *mut AEGP_LogType) -> A_Err,
    >,
    pub AEGP_SetLogType: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, logtype: AEGP_LogType) -> A_Err,
    >,
    pub AEGP_RemoveOutputModule: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, outmodH: AEGP_OutputModuleRefH) -> A_Err,
    >,
    pub AEGP_GetComment: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, commentZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_SetComment: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, commentZ: *const A_char) -> A_Err,
    >,
    pub AEGP_GetCompFromRQItem: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_DeleteRQItem:
        ::std::option::Option<unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH) -> A_Err>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_RQItemSuite2 {
    pub AEGP_GetNumRQItems:
        ::std::option::Option<unsafe extern "C" fn(num_itemsPL: *mut A_long) -> A_Err>,
    pub AEGP_GetRQItemByIndex: ::std::option::Option<
        unsafe extern "C" fn(rq_item_index: A_long, rq_item_refPH: *mut AEGP_RQItemRefH) -> A_Err,
    >,
    pub AEGP_GetNextRQItem: ::std::option::Option<
        unsafe extern "C" fn(
            current_rq_itemH: AEGP_RQItemRefH,
            next_rq_itemH: *mut AEGP_RQItemRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetNumOutputModulesForRQItem: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, num_outmodsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetRenderState: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            statusP: *mut AEGP_RenderItemStatusType,
        ) -> A_Err,
    >,
    pub AEGP_SetRenderState: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, status: AEGP_RenderItemStatusType) -> A_Err,
    >,
    pub AEGP_GetStartedTime: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, started_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetElapsedTime: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, render_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetLogType: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, logtypeP: *mut AEGP_LogType) -> A_Err,
    >,
    pub AEGP_SetLogType: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, logtype: AEGP_LogType) -> A_Err,
    >,
    pub AEGP_RemoveOutputModule: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, outmodH: AEGP_OutputModuleRefH) -> A_Err,
    >,
    pub AEGP_GetComment: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, commentZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_SetComment: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, commentZ: *const A_char) -> A_Err,
    >,
    pub AEGP_GetCompFromRQItem: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_RQItemSuite1 {
    pub AEGP_GetNumRQItems:
        ::std::option::Option<unsafe extern "C" fn(num_itemsPL: *mut A_long) -> A_Err>,
    pub AEGP_GetRQItemByIndex: ::std::option::Option<
        unsafe extern "C" fn(rq_item_index: A_long, rq_item_refPH: *mut AEGP_RQItemRefH) -> A_Err,
    >,
    pub AEGP_GetNextRQItem: ::std::option::Option<
        unsafe extern "C" fn(
            current_rq_itemH: AEGP_RQItemRefH,
            next_rq_itemH: *mut AEGP_RQItemRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetNumOutputModulesForRQItem: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, num_outmodsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetRenderState: ::std::option::Option<
        unsafe extern "C" fn(
            rq_itemH: AEGP_RQItemRefH,
            statusP: *mut AEGP_RenderItemStatusType,
        ) -> A_Err,
    >,
    pub AEGP_SetRenderState: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, status: AEGP_RenderItemStatusType) -> A_Err,
    >,
    pub AEGP_GetStartedTime: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, started_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetElapsedTime: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, render_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetLogType: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, logtypeP: *mut AEGP_LogType) -> A_Err,
    >,
    pub AEGP_SetLogType: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, logtype: AEGP_LogType) -> A_Err,
    >,
    pub AEGP_RemoveOutputModule: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, outmodH: AEGP_OutputModuleRefH) -> A_Err,
    >,
    pub AEGP_GetComment: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, commentZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_SetComment: ::std::option::Option<
        unsafe extern "C" fn(rq_itemH: AEGP_RQItemRefH, commentZ: *const A_char) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CanvasSuite2 {
    pub AEGP_GetCompToRender: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetNumLayersToRender: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            num_to_renderPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetNthLayerContextToRender: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            n: A_long,
            layer_contextPH: *mut AEGP_RenderLayerContextH,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerFromLayerContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    #[doc = " With collapsed geometrics \"on\" this gives the layer in the root comp\n contining the layer context. With collapsed geometrics off\n this is the same as AEGP_GetLayerFromLayerContext.\n"]
    pub AEGP_GetTopLayerFromLayerContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetCompRenderTime: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            time: *mut A_Time,
            time_step: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetCompDestinationBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            compH: AEGP_CompH,
            dst: *mut PF_EffectWorld,
        ) -> A_Err,
    >,
    pub AEGP_GetROI: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, roiPR: *mut A_LegacyRect) -> A_Err,
    >,
    #[doc = " for rendering track mattes"]
    pub AEGP_RenderLayer: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layerH: AEGP_LayerH,
            render_hints: AEGP_RenderHints,
            render_bufferP: *mut PF_EffectWorld,
        ) -> A_Err,
    >,
    pub AEGP_RenderTexture: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            suggested_scaleP0: *mut A_FloatPoint,
            suggested_src_rectP0: *mut A_FloatRect,
            src_matrixP0: *mut A_Matrix3,
            dst: *mut PF_EffectWorld,
        ) -> A_Err,
    >,
    pub AEGP_DisposeTexture: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            dst0: *mut PF_EffectWorld,
        ) -> A_Err,
    >,
    pub AEGP_GetFieldRender: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, field: *mut PF_Field) -> A_Err,
    >,
    pub AEGP_ReportArtisanProgress: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            countL: A_long,
            totalL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            dsfP: *mut AEGP_DownsampleFactor,
        ) -> A_Err,
    >,
    pub AEGP_IsBlankCanvas: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            is_blankPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderLayerToWorldXform: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timeP: *const A_Time,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderLayerBounds: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timeP: *const A_Time,
            boundsP: *mut A_LegacyRect,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderOpacity: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timePT: *const A_Time,
            opacityPF: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_IsRenderLayerActive: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timePT: *const A_Time,
            activePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_SetArtisanLayerProgress: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            countL: A_long,
            num_layersL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_RenderLayerPlus: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layerH: AEGP_LayerH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            render_bufferP: *mut PF_EffectWorld,
        ) -> A_Err,
    >,
    pub AEGP_GetTrackMatteContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            fill_contextH: AEGP_RenderLayerContextH,
            matte_contextPH: *mut AEGP_RenderLayerContextH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CanvasSuite4 {
    pub AEGP_GetCompToRender: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetNumLayersToRender: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            num_to_renderPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetNthLayerContextToRender: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            n: A_long,
            layer_contextPH: *mut AEGP_RenderLayerContextH,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerFromLayerContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    #[doc = " With collapsed geometrics \"on\" this gives the layer in the root comp\n contining the layer context. With collapsed geometrics off\n this is the same as AEGP_GetLayerFromLayerContext.\n"]
    pub AEGP_GetTopLayerFromLayerContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetCompRenderTime: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            time: *mut A_Time,
            time_step: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetCompDestinationBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            compH: AEGP_CompH,
            dst: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetROI: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, roiPR: *mut A_LegacyRect) -> A_Err,
    >,
    pub AEGP_RenderTexture: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            suggested_scaleP0: *mut A_FloatPoint,
            suggested_src_rectP0: *mut A_FloatRect,
            src_matrixP0: *mut A_Matrix3,
            dstPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeTexture: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            dstH0: AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetFieldRender: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, field: *mut PF_Field) -> A_Err,
    >,
    pub AEGP_ReportArtisanProgress: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            countL: A_long,
            totalL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            dsfP: *mut AEGP_DownsampleFactor,
        ) -> A_Err,
    >,
    pub AEGP_SetRenderDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            dsfP: *mut AEGP_DownsampleFactor,
        ) -> A_Err,
    >,
    pub AEGP_IsBlankCanvas: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            is_blankPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderLayerToWorldXform: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timeP: *const A_Time,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderLayerBounds: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timeP: *const A_Time,
            boundsP: *mut A_LegacyRect,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderOpacity: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timePT: *const A_Time,
            opacityPF: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_IsRenderLayerActive: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timePT: *const A_Time,
            activePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_SetArtisanLayerProgress: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            countL: A_long,
            num_layersL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_RenderLayerPlus: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layerH: AEGP_LayerH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            render_bufferPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetTrackMatteContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            fill_contextH: AEGP_RenderLayerContextH,
            matte_contextPH: *mut AEGP_RenderLayerContextH,
        ) -> A_Err,
    >,
    pub AEGP_RenderTextureWithReceipt: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            suggested_scaleP0: *mut A_FloatPoint,
            suggested_src_rectP0: *mut A_FloatRect,
            src_matrixP0: *mut A_Matrix3,
            render_receiptPH: *mut AEGP_RenderReceiptH,
            dstPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_RenderLayerPlusWithReceipt: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layerH: AEGP_LayerH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            render_receiptPH: *mut AEGP_RenderReceiptH,
            render_bufferPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeRenderReceipt:
        ::std::option::Option<unsafe extern "C" fn(render_receiptH: AEGP_RenderReceiptH) -> A_Err>,
    pub AEGP_CheckRenderReceipt: ::std::option::Option<
        unsafe extern "C" fn(
            current_render_contextH: PR_RenderContextH,
            current_layer_contextH: AEGP_RenderLayerContextH,
            old_render_receiptH: AEGP_RenderReceiptH,
            check_aceB: A_Boolean,
            receipt_statusP: *mut AEGP_RenderReceiptStatus,
        ) -> A_Err,
    >,
    pub AEGP_GetNumBinsToRender: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            num_bins_to_renderPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_SetNthBin: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, n: A_long) -> A_Err,
    >,
    pub AEGP_GetBinType: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            bin_typeP: *mut AEGP_BinType,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderLayerToWorldXform2D3D: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timeP: *const A_Time,
            only_2dB: A_Boolean,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_GetPlatformWindowRef: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            window_refP: *mut AEGP_PlatformWindowRef,
        ) -> A_Err,
    >,
    pub AEGP_GetViewportScale: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            scale_xPF: *mut A_FpLong,
            scale_yPF: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_GetViewportOrigin: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            origin_xPL: *mut A_long,
            origin_yPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetViewportRect: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            viewport_rectPR: *mut A_LegacyRect,
        ) -> A_Err,
    >,
    pub AEGP_GetFallowColor: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            fallow_colorP: *mut PF_Pixel8,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveBuffer: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, buffer: *mut AEGP_WorldH) -> A_Err,
    >,
    pub AEGP_GetInteractiveCheckerboard: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            checkerboard_onPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveCheckerboardColors: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            checkerboard_color1P: *mut PF_Pixel,
            checkerboard_color2P: *mut PF_Pixel,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveCheckerboardSize: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            checkerboard_widthPLu: *mut A_u_long,
            checkerboard_heightPLu: *mut A_u_long,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveCachedBuffer: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, buffer: *mut AEGP_WorldH) -> A_Err,
    >,
    pub AEGP_ArtisanMustRenderAsLayer: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            use_render_texturePB: *mut A_Boolean,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CanvasSuite5 {
    pub AEGP_GetCompToRender: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetNumLayersToRender: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            num_to_renderPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetNthLayerContextToRender: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            n: A_long,
            layer_contextPH: *mut AEGP_RenderLayerContextH,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerFromLayerContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    #[doc = " With collapsed geometrics \"on\" this gives the layer in the root comp\n contining the layer context. With collapsed geometrics off\n this is the same as AEGP_GetLayerFromLayerContext.\n"]
    pub AEGP_GetTopLayerFromLayerContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetCompRenderTime: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            time: *mut A_Time,
            time_step: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetCompDestinationBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            compH: AEGP_CompH,
            dst: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetROI: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, roiPR: *mut A_LegacyRect) -> A_Err,
    >,
    pub AEGP_RenderTexture: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            suggested_scaleP0: *mut A_FloatPoint,
            suggested_src_rectP0: *mut A_FloatRect,
            src_matrixP0: *mut A_Matrix3,
            dstPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeTexture: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            dstH0: AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetFieldRender: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, field: *mut PF_Field) -> A_Err,
    >,
    pub AEGP_ReportArtisanProgress: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            countL: A_long,
            totalL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            dsfP: *mut AEGP_DownsampleFactor,
        ) -> A_Err,
    >,
    pub AEGP_SetRenderDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            dsfP: *mut AEGP_DownsampleFactor,
        ) -> A_Err,
    >,
    pub AEGP_IsBlankCanvas: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            is_blankPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderLayerToWorldXform: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timeP: *const A_Time,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderLayerBounds: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timeP: *const A_Time,
            boundsP: *mut A_LegacyRect,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderOpacity: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timePT: *const A_Time,
            opacityPF: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_IsRenderLayerActive: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timePT: *const A_Time,
            activePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_SetArtisanLayerProgress: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            countL: A_long,
            num_layersL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_RenderLayerPlus: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layerH: AEGP_LayerH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            render_bufferPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetTrackMatteContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            fill_contextH: AEGP_RenderLayerContextH,
            matte_contextPH: *mut AEGP_RenderLayerContextH,
        ) -> A_Err,
    >,
    pub AEGP_RenderTextureWithReceipt: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            suggested_scaleP0: *mut A_FloatPoint,
            suggested_src_rectP0: *mut A_FloatRect,
            src_matrixP0: *mut A_Matrix3,
            render_receiptPH: *mut AEGP_RenderReceiptH,
            dstPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_RenderLayerPlusWithReceipt: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layerH: AEGP_LayerH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            render_receiptPH: *mut AEGP_RenderReceiptH,
            render_bufferPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeRenderReceipt:
        ::std::option::Option<unsafe extern "C" fn(render_receiptH: AEGP_RenderReceiptH) -> A_Err>,
    pub AEGP_CheckRenderReceipt: ::std::option::Option<
        unsafe extern "C" fn(
            current_render_contextH: PR_RenderContextH,
            current_layer_contextH: AEGP_RenderLayerContextH,
            old_render_receiptH: AEGP_RenderReceiptH,
            check_geometricsB: A_Boolean,
            receipt_statusP: *mut AEGP_RenderReceiptStatus,
        ) -> A_Err,
    >,
    pub AEGP_GetNumBinsToRender: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            num_bins_to_renderPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_SetNthBin: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, n: A_long) -> A_Err,
    >,
    pub AEGP_GetBinType: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            bin_typeP: *mut AEGP_BinType,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderLayerToWorldXform2D3D: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timeP: *const A_Time,
            only_2dB: A_Boolean,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_GetPlatformWindowRef: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            window_refP: *mut AEGP_PlatformWindowRef,
        ) -> A_Err,
    >,
    pub AEGP_GetViewportScale: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            scale_xPF: *mut A_FpLong,
            scale_yPF: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_GetViewportOrigin: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            origin_xPL: *mut A_long,
            origin_yPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetViewportRect: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            viewport_rectPR: *mut A_LegacyRect,
        ) -> A_Err,
    >,
    pub AEGP_GetFallowColor: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            fallow_colorP: *mut PF_Pixel8,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveBuffer: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, buffer: *mut AEGP_WorldH) -> A_Err,
    >,
    pub AEGP_GetInteractiveCheckerboard: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            checkerboard_onPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveCheckerboardColors: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            checkerboard_color1P: *mut PF_Pixel,
            checkerboard_color2P: *mut PF_Pixel,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveCheckerboardSize: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            checkerboard_widthPLu: *mut A_u_long,
            checkerboard_heightPLu: *mut A_u_long,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveCachedBuffer: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, buffer: *mut AEGP_WorldH) -> A_Err,
    >,
    pub AEGP_ArtisanMustRenderAsLayer: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            use_render_texturePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveDisplayChannel: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            display_channelP: *mut AEGP_DisplayChannelType,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CanvasSuite6 {
    pub AEGP_GetCompToRender: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetNumLayersToRender: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            num_to_renderPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetNthLayerContextToRender: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            n: A_long,
            layer_contextPH: *mut AEGP_RenderLayerContextH,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerFromLayerContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    #[doc = " With collapsed geometrics \"on\" this gives the layer in the root comp\n contining the layer context. With collapsed geometrics off\n this is the same as AEGP_GetLayerFromLayerContext.\n"]
    pub AEGP_GetTopLayerFromLayerContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetCompRenderTime: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            time: *mut A_Time,
            time_step: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetCompDestinationBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            compH: AEGP_CompH,
            dst: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetROI: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, roiPR: *mut A_LegacyRect) -> A_Err,
    >,
    pub AEGP_RenderTexture: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            suggested_scaleP0: *mut A_FloatPoint,
            suggested_src_rectP0: *mut A_FloatRect,
            src_matrixP0: *mut A_Matrix3,
            dstPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeTexture: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            dstH0: AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetFieldRender: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, field: *mut PF_Field) -> A_Err,
    >,
    pub AEGP_ReportArtisanProgress: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            countL: A_long,
            totalL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            dsfP: *mut AEGP_DownsampleFactor,
        ) -> A_Err,
    >,
    pub AEGP_SetRenderDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            dsfP: *mut AEGP_DownsampleFactor,
        ) -> A_Err,
    >,
    pub AEGP_IsBlankCanvas: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            is_blankPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderLayerToWorldXform: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timeP: *const A_Time,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderLayerBounds: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timeP: *const A_Time,
            boundsP: *mut A_LegacyRect,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderOpacity: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timePT: *const A_Time,
            opacityPF: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_IsRenderLayerActive: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timePT: *const A_Time,
            activePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_SetArtisanLayerProgress: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            countL: A_long,
            num_layersL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_RenderLayerPlus: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layerH: AEGP_LayerH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            render_bufferPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetTrackMatteContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            fill_contextH: AEGP_RenderLayerContextH,
            matte_contextPH: *mut AEGP_RenderLayerContextH,
        ) -> A_Err,
    >,
    pub AEGP_RenderTextureWithReceipt: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            num_effectsS: AEGP_NumEffectsToRenderType,
            suggested_scaleP0: *mut A_FloatPoint,
            suggested_src_rectP0: *mut A_FloatRect,
            src_matrixP0: *mut A_Matrix3,
            render_receiptPH: *mut AEGP_RenderReceiptH,
            dstPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetNumberOfSoftwareEffects: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            num_software_effectsPS: *mut A_short,
        ) -> A_Err,
    >,
    pub AEGP_RenderLayerPlusWithReceipt: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layerH: AEGP_LayerH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            render_receiptPH: *mut AEGP_RenderReceiptH,
            render_bufferPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeRenderReceipt:
        ::std::option::Option<unsafe extern "C" fn(render_receiptH: AEGP_RenderReceiptH) -> A_Err>,
    pub AEGP_CheckRenderReceipt: ::std::option::Option<
        unsafe extern "C" fn(
            current_render_contextH: PR_RenderContextH,
            current_layer_contextH: AEGP_RenderLayerContextH,
            old_render_receiptH: AEGP_RenderReceiptH,
            check_geometricsB: A_Boolean,
            num_effectsS: AEGP_NumEffectsToRenderType,
            receipt_statusP: *mut AEGP_RenderReceiptStatus,
        ) -> A_Err,
    >,
    pub AEGP_GenerateRenderReceipt: ::std::option::Option<
        unsafe extern "C" fn(
            current_render_contextH: PR_RenderContextH,
            current_layer_contextH: AEGP_RenderLayerContextH,
            num_effectsS: AEGP_NumEffectsToRenderType,
            render_receiptPH: *mut AEGP_RenderReceiptH,
        ) -> A_Err,
    >,
    pub AEGP_GetNumBinsToRender: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            num_bins_to_renderPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_SetNthBin: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, n: A_long) -> A_Err,
    >,
    pub AEGP_GetBinType: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            bin_typeP: *mut AEGP_BinType,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderLayerToWorldXform2D3D: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timeP: *const A_Time,
            only_2dB: A_Boolean,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_GetPlatformWindowRef: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            window_refP: *mut AEGP_PlatformWindowRef,
        ) -> A_Err,
    >,
    pub AEGP_GetViewportScale: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            scale_xPF: *mut A_FpLong,
            scale_yPF: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_GetViewportOrigin: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            origin_xPL: *mut A_long,
            origin_yPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetViewportRect: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            viewport_rectPR: *mut A_LegacyRect,
        ) -> A_Err,
    >,
    pub AEGP_GetFallowColor: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            fallow_colorP: *mut PF_Pixel8,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveBuffer: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, buffer: *mut AEGP_WorldH) -> A_Err,
    >,
    pub AEGP_GetInteractiveCheckerboard: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            checkerboard_onPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveCheckerboardColors: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            checkerboard_color1P: *mut PF_Pixel,
            checkerboard_color2P: *mut PF_Pixel,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveCheckerboardSize: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            checkerboard_widthPLu: *mut A_u_long,
            checkerboard_heightPLu: *mut A_u_long,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveCachedBuffer: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, buffer: *mut AEGP_WorldH) -> A_Err,
    >,
    pub AEGP_ArtisanMustRenderAsLayer: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            use_render_texturePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveDisplayChannel: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            display_channelP: *mut AEGP_DisplayChannelType,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CanvasSuite7 {
    pub AEGP_GetCompToRender: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetNumLayersToRender: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            num_to_renderPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetNthLayerContextToRender: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            n: A_long,
            layer_contextPH: *mut AEGP_RenderLayerContextH,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerFromLayerContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerAndSubLayerFromLayerContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            layerPH: *mut AEGP_LayerH,
            sublayerP: *mut AEGP_SubLayerIndex,
        ) -> A_Err,
    >,
    #[doc = " With collapsed geometrics \"on\" this gives the layer in the root comp\n contining the layer context. With collapsed geometrics off\n this is the same as AEGP_GetLayerFromLayerContext.\n"]
    pub AEGP_GetTopLayerFromLayerContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetCompRenderTime: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            time: *mut A_Time,
            time_step: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetCompDestinationBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            compH: AEGP_CompH,
            dst: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetROI: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, roiPR: *mut A_LegacyRect) -> A_Err,
    >,
    pub AEGP_RenderTexture: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            suggested_scaleP0: *mut A_FloatPoint,
            suggested_src_rectP0: *mut A_FloatRect,
            src_matrixP0: *mut A_Matrix3,
            dstPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeTexture: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            dstH0: AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetFieldRender: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, field: *mut PF_Field) -> A_Err,
    >,
    pub AEGP_ReportArtisanProgress: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            countL: A_long,
            totalL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            dsfP: *mut AEGP_DownsampleFactor,
        ) -> A_Err,
    >,
    pub AEGP_SetRenderDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            dsfP: *mut AEGP_DownsampleFactor,
        ) -> A_Err,
    >,
    pub AEGP_IsBlankCanvas: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            is_blankPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderLayerToWorldXform: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timeP: *const A_Time,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderLayerBounds: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timeP: *const A_Time,
            boundsP: *mut A_LegacyRect,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderOpacity: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timePT: *const A_Time,
            opacityPF: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_IsRenderLayerActive: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timePT: *const A_Time,
            activePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_SetArtisanLayerProgress: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            countL: A_long,
            num_layersL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_RenderLayerPlus: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layerH: AEGP_LayerH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            render_bufferPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetTrackMatteContext: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            fill_contextH: AEGP_RenderLayerContextH,
            matte_contextPH: *mut AEGP_RenderLayerContextH,
        ) -> A_Err,
    >,
    pub AEGP_RenderTextureWithReceipt: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            num_effectsS: AEGP_NumEffectsToRenderType,
            suggested_scaleP0: *mut A_FloatPoint,
            suggested_src_rectP0: *mut A_FloatRect,
            src_matrixP0: *mut A_Matrix3,
            render_receiptPH: *mut AEGP_RenderReceiptH,
            dstPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetNumberOfSoftwareEffects: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            num_software_effectsPS: *mut A_short,
        ) -> A_Err,
    >,
    pub AEGP_RenderLayerPlusWithReceipt: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layerH: AEGP_LayerH,
            layer_contextH: AEGP_RenderLayerContextH,
            render_hints: AEGP_RenderHints,
            render_receiptPH: *mut AEGP_RenderReceiptH,
            render_bufferPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeRenderReceipt:
        ::std::option::Option<unsafe extern "C" fn(render_receiptH: AEGP_RenderReceiptH) -> A_Err>,
    pub AEGP_CheckRenderReceipt: ::std::option::Option<
        unsafe extern "C" fn(
            current_render_contextH: PR_RenderContextH,
            current_layer_contextH: AEGP_RenderLayerContextH,
            old_render_receiptH: AEGP_RenderReceiptH,
            check_geometricsB: A_Boolean,
            num_effectsS: AEGP_NumEffectsToRenderType,
            receipt_statusP: *mut AEGP_RenderReceiptStatus,
        ) -> A_Err,
    >,
    pub AEGP_GenerateRenderReceipt: ::std::option::Option<
        unsafe extern "C" fn(
            current_render_contextH: PR_RenderContextH,
            current_layer_contextH: AEGP_RenderLayerContextH,
            num_effectsS: AEGP_NumEffectsToRenderType,
            render_receiptPH: *mut AEGP_RenderReceiptH,
        ) -> A_Err,
    >,
    pub AEGP_GetNumBinsToRender: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            num_bins_to_renderPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_SetNthBin: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, n: A_long) -> A_Err,
    >,
    pub AEGP_GetBinType: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            bin_typeP: *mut AEGP_BinType,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderLayerToWorldXform2D3D: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            comp_timeP: *const A_Time,
            only_2dB: A_Boolean,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_GetPlatformWindowRef: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            window_refP: *mut AEGP_PlatformWindowRef,
        ) -> A_Err,
    >,
    pub AEGP_GetViewportScale: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            scale_xPF: *mut A_FpLong,
            scale_yPF: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_GetViewportOrigin: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            origin_xPL: *mut A_long,
            origin_yPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetViewportRect: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            viewport_rectPR: *mut A_LegacyRect,
        ) -> A_Err,
    >,
    pub AEGP_GetFallowColor: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            fallow_colorP: *mut PF_Pixel8,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveBuffer: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, buffer: *mut AEGP_WorldH) -> A_Err,
    >,
    pub AEGP_GetInteractiveCheckerboard: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            checkerboard_onPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveCheckerboardColors: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            checkerboard_color1P: *mut PF_Pixel,
            checkerboard_color2P: *mut PF_Pixel,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveCheckerboardSize: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            checkerboard_widthPLu: *mut A_u_long,
            checkerboard_heightPLu: *mut A_u_long,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveCachedBuffer: ::std::option::Option<
        unsafe extern "C" fn(render_contextH: PR_RenderContextH, buffer: *mut AEGP_WorldH) -> A_Err,
    >,
    pub AEGP_ArtisanMustRenderAsLayer: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            layer_contextH: AEGP_RenderLayerContextH,
            use_render_texturePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveDisplayChannel: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            display_channelP: *mut AEGP_DisplayChannelType,
        ) -> A_Err,
    >,
    pub AEGP_GetInteractiveExposure: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            exposurePF: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_GetColorTransform: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            cms_onB: *mut A_Boolean,
            xform_keyLu: *mut A_u_long,
            xformP: *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_GetCompShutterTime: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            shutter_time: *mut A_Time,
            shutter_dur: *mut A_Time,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_MaskOutlineSuite2 {
    pub AEGP_IsMaskOutlineOpen: ::std::option::Option<
        unsafe extern "C" fn(mask_outlineH: AEGP_MaskOutlineValH, openPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetMaskOutlineOpen: ::std::option::Option<
        unsafe extern "C" fn(mask_outlineH: AEGP_MaskOutlineValH, openB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetMaskOutlineNumSegments: ::std::option::Option<
        unsafe extern "C" fn(
            mask_outlineH: AEGP_MaskOutlineValH,
            num_segmentsPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetMaskOutlineVertexInfo: ::std::option::Option<
        unsafe extern "C" fn(
            mask_outlineH: AEGP_MaskOutlineValH,
            which_pointL: AEGP_VertexIndex,
            vertexP: *mut AEGP_MaskVertex,
        ) -> A_Err,
    >,
    pub AEGP_SetMaskOutlineVertexInfo: ::std::option::Option<
        unsafe extern "C" fn(
            mask_outlineH: AEGP_MaskOutlineValH,
            which_pointL: AEGP_VertexIndex,
            vertexP: *const AEGP_MaskVertex,
        ) -> A_Err,
    >,
    pub AEGP_CreateVertex: ::std::option::Option<
        unsafe extern "C" fn(
            mask_outlineH: AEGP_MaskOutlineValH,
            insert_position: AEGP_VertexIndex,
        ) -> A_Err,
    >,
    pub AEGP_DeleteVertex: ::std::option::Option<
        unsafe extern "C" fn(mask_outlineH: AEGP_MaskOutlineValH, index: AEGP_VertexIndex) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_MaskOutlineSuite1 {
    pub AEGP_IsMaskOutlineOpen: ::std::option::Option<
        unsafe extern "C" fn(mask_outlineH: AEGP_MaskOutlineValH, openPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetMaskOutlineNumSegments: ::std::option::Option<
        unsafe extern "C" fn(
            mask_outlineH: AEGP_MaskOutlineValH,
            num_segmentsPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetMaskOutlineVertexInfo: ::std::option::Option<
        unsafe extern "C" fn(
            mask_outlineH: AEGP_MaskOutlineValH,
            which_pointL: AEGP_VertexIndex,
            vertexP: *mut AEGP_MaskVertex,
        ) -> A_Err,
    >,
    pub AEGP_SetMaskOutlineVertexInfo: ::std::option::Option<
        unsafe extern "C" fn(
            mask_outlineH: AEGP_MaskOutlineValH,
            which_pointL: AEGP_VertexIndex,
            vertexP: *const AEGP_MaskVertex,
        ) -> A_Err,
    >,
    pub AEGP_CreateVertex: ::std::option::Option<
        unsafe extern "C" fn(
            mask_outlineH: AEGP_MaskOutlineValH,
            insert_position: AEGP_VertexIndex,
        ) -> A_Err,
    >,
    pub AEGP_DeleteVertex: ::std::option::Option<
        unsafe extern "C" fn(mask_outlineH: AEGP_MaskOutlineValH, index: AEGP_VertexIndex) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CompSuite11 {
    pub AEGP_GetCompFromItem: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetItemFromComp: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *mut AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_SetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *const AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_GetCompBGColor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, bg_colorP: *mut AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_SetCompBGColor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, bg_colorP: *const AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_GetCompFlags: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, comp_flagsP: *mut AEGP_CompFlags) -> A_Err,
    >,
    pub AEGP_GetShowLayerNameOrSourceName: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, layer_names_shownPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetShowLayerNameOrSourceName: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, show_layer_namesB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetShowBlendModes: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, blend_modes_shownPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetShowBlendModes: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, show_blend_modesB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetCompFramerate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_SetCompFrameRate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *const A_FpLong) -> A_Err,
    >,
    pub AEGP_GetCompShutterAnglePhase: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, angle: *mut A_Ratio, phase: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_GetCompShutterFrameRange: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            comp_timeP: *const A_Time,
            start: *mut A_Time,
            duration: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetCompSuggestedMotionBlurSamples: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, samplesPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_SetCompSuggestedMotionBlurSamples:
        ::std::option::Option<unsafe extern "C" fn(compH: AEGP_CompH, samplesL: A_long) -> A_Err>,
    pub AEGP_GetCompMotionBlurAdaptiveSampleLimit: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, samplesPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_SetCompMotionBlurAdaptiveSampleLimit:
        ::std::option::Option<unsafe extern "C" fn(compH: AEGP_CompH, samplesL: A_long) -> A_Err>,
    pub AEGP_GetCompWorkAreaStart: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_startPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetCompWorkAreaDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompWorkAreaStartAndDuration: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            work_area_startPT: *const A_Time,
            work_area_durationPT: *const A_Time,
        ) -> A_Err,
    >,
    pub AEGP_CreateSolidInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            width: A_long,
            height: A_long,
            color: *const AEGP_ColorVal,
            parent_compH: AEGP_CompH,
            durationPT0: *const A_Time,
            new_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateCameraInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_CompH,
            new_cameraPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateLightInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_CompH,
            new_lightPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_folderH0: AEGP_ItemH,
            utf_nameZ: *const A_UTF16Char,
            widthL: A_long,
            heightL: A_long,
            pixel_aspect_ratioPRt: *const A_Ratio,
            durationPT: *const A_Time,
            frameratePRt: *const A_Ratio,
            new_compPH: *mut AEGP_CompH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewCollectionFromCompSelection: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            compH: AEGP_CompH,
            collectionPH: *mut AEGP_Collection2H,
        ) -> A_Err,
    >,
    pub AEGP_SetSelection: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, collectionH: AEGP_Collection2H) -> A_Err,
    >,
    pub AEGP_GetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *const A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, durationPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_CreateNullInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            parent_compH: AEGP_CompH,
            durationPT0: *const A_Time,
            new_null_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_SetCompPixelAspectRatio: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, pix_aspectratioPRt: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_CreateTextLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_compH: AEGP_CompH,
            select_new_layerB: A_Boolean,
            new_text_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateBoxTextLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_compH: AEGP_CompH,
            select_new_layerB: A_Boolean,
            box_dimensions: A_FloatPoint,
            new_text_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_SetCompDimensions: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, widthL: A_long, heightL: A_long) -> A_Err,
    >,
    pub AEGP_DuplicateComp: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, new_compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetCompFrameDuration:
        ::std::option::Option<unsafe extern "C" fn(compH: AEGP_CompH, timeP: *mut A_Time) -> A_Err>,
    pub AEGP_GetMostRecentlyUsedComp:
        ::std::option::Option<unsafe extern "C" fn(compPH: *mut AEGP_CompH) -> A_Err>,
    pub AEGP_CreateVectorLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_compH: AEGP_CompH,
            new_vector_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewCompMarkerStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            parent_compH: AEGP_CompH,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetCompDisplayDropFrame: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dropFramePB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetCompDisplayDropFrame: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dropFrameB: A_Boolean) -> A_Err,
    >,
    pub AEGP_ReorderCompSelection:
        ::std::option::Option<unsafe extern "C" fn(compH: AEGP_CompH, index: A_long) -> A_Err>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CompSuite10 {
    pub AEGP_GetCompFromItem: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetItemFromComp: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *mut AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_SetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *const AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_GetCompBGColor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, bg_colorP: *mut AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_SetCompBGColor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, bg_colorP: *const AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_GetCompFlags: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, comp_flagsP: *mut AEGP_CompFlags) -> A_Err,
    >,
    pub AEGP_GetShowLayerNameOrSourceName: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, layer_names_shownPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetShowLayerNameOrSourceName: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, show_layer_namesB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetShowBlendModes: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, blend_modes_shownPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetShowBlendModes: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, show_blend_modesB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetCompFramerate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_SetCompFrameRate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *const A_FpLong) -> A_Err,
    >,
    pub AEGP_GetCompShutterAnglePhase: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, angle: *mut A_Ratio, phase: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_GetCompShutterFrameRange: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            comp_timeP: *const A_Time,
            start: *mut A_Time,
            duration: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetCompSuggestedMotionBlurSamples: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, samplesPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_SetCompSuggestedMotionBlurSamples:
        ::std::option::Option<unsafe extern "C" fn(compH: AEGP_CompH, samplesL: A_long) -> A_Err>,
    pub AEGP_GetCompMotionBlurAdaptiveSampleLimit: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, samplesPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_SetCompMotionBlurAdaptiveSampleLimit:
        ::std::option::Option<unsafe extern "C" fn(compH: AEGP_CompH, samplesL: A_long) -> A_Err>,
    pub AEGP_GetCompWorkAreaStart: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_startPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetCompWorkAreaDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompWorkAreaStartAndDuration: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            work_area_startPT: *const A_Time,
            work_area_durationPT: *const A_Time,
        ) -> A_Err,
    >,
    pub AEGP_CreateSolidInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            width: A_long,
            height: A_long,
            color: *const AEGP_ColorVal,
            parent_compH: AEGP_CompH,
            durationPT0: *const A_Time,
            new_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateCameraInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_CompH,
            new_cameraPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateLightInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_CompH,
            new_lightPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_folderH0: AEGP_ItemH,
            utf_nameZ: *const A_UTF16Char,
            widthL: A_long,
            heightL: A_long,
            pixel_aspect_ratioPRt: *const A_Ratio,
            durationPT: *const A_Time,
            frameratePRt: *const A_Ratio,
            new_compPH: *mut AEGP_CompH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewCollectionFromCompSelection: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            compH: AEGP_CompH,
            collectionPH: *mut AEGP_Collection2H,
        ) -> A_Err,
    >,
    pub AEGP_SetSelection: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, collectionH: AEGP_Collection2H) -> A_Err,
    >,
    pub AEGP_GetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *const A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, durationPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_CreateNullInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            parent_compH: AEGP_CompH,
            durationPT0: *const A_Time,
            new_null_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_SetCompPixelAspectRatio: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, pix_aspectratioPRt: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_CreateTextLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_compH: AEGP_CompH,
            select_new_layerB: A_Boolean,
            new_text_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateBoxTextLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_compH: AEGP_CompH,
            select_new_layerB: A_Boolean,
            box_dimensions: A_FloatPoint,
            new_text_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_SetCompDimensions: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, widthL: A_long, heightL: A_long) -> A_Err,
    >,
    pub AEGP_DuplicateComp: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, new_compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetCompFrameDuration:
        ::std::option::Option<unsafe extern "C" fn(compH: AEGP_CompH, timeP: *mut A_Time) -> A_Err>,
    pub AEGP_GetMostRecentlyUsedComp:
        ::std::option::Option<unsafe extern "C" fn(compPH: *mut AEGP_CompH) -> A_Err>,
    pub AEGP_CreateVectorLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_compH: AEGP_CompH,
            new_vector_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewCompMarkerStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            parent_compH: AEGP_CompH,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetCompDisplayDropFrame: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dropFramePB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetCompDisplayDropFrame: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dropFrameB: A_Boolean) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CompSuite9 {
    pub AEGP_GetCompFromItem: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetItemFromComp: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *mut AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_SetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *const AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_GetCompBGColor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, bg_colorP: *mut AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_SetCompBGColor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, bg_colorP: *const AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_GetCompFlags: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, comp_flagsP: *mut AEGP_CompFlags) -> A_Err,
    >,
    pub AEGP_GetCompFramerate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_SetCompFrameRate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *const A_FpLong) -> A_Err,
    >,
    pub AEGP_GetCompShutterAnglePhase: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, angle: *mut A_Ratio, phase: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_GetCompShutterFrameRange: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            comp_timeP: *const A_Time,
            start: *mut A_Time,
            duration: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetCompSuggestedMotionBlurSamples: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, samplesPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_SetCompSuggestedMotionBlurSamples:
        ::std::option::Option<unsafe extern "C" fn(compH: AEGP_CompH, samplesL: A_long) -> A_Err>,
    pub AEGP_GetCompWorkAreaStart: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_startPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetCompWorkAreaDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompWorkAreaStartAndDuration: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            work_area_startPT: *const A_Time,
            work_area_durationPT: *const A_Time,
        ) -> A_Err,
    >,
    pub AEGP_CreateSolidInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            width: A_long,
            height: A_long,
            color: *const AEGP_ColorVal,
            parent_compH: AEGP_CompH,
            durationPT0: *const A_Time,
            new_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateCameraInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_CompH,
            new_cameraPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateLightInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_CompH,
            new_lightPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_folderH0: AEGP_ItemH,
            utf_nameZ: *const A_UTF16Char,
            widthL: A_long,
            heightL: A_long,
            pixel_aspect_ratioPRt: *const A_Ratio,
            durationPT: *const A_Time,
            frameratePRt: *const A_Ratio,
            new_compPH: *mut AEGP_CompH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewCollectionFromCompSelection: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            compH: AEGP_CompH,
            collectionPH: *mut AEGP_Collection2H,
        ) -> A_Err,
    >,
    pub AEGP_SetSelection: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, collectionH: AEGP_Collection2H) -> A_Err,
    >,
    pub AEGP_GetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *const A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, durationPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_CreateNullInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            parent_compH: AEGP_CompH,
            durationPT0: *const A_Time,
            new_null_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_SetCompPixelAspectRatio: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, pix_aspectratioPRt: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_CreateTextLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_compH: AEGP_CompH,
            select_new_layerB: A_Boolean,
            new_text_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateBoxTextLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_compH: AEGP_CompH,
            select_new_layerB: A_Boolean,
            box_dimensions: A_FloatPoint,
            new_text_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_SetCompDimensions: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, widthL: A_long, heightL: A_long) -> A_Err,
    >,
    pub AEGP_DuplicateComp: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, new_compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetCompFrameDuration:
        ::std::option::Option<unsafe extern "C" fn(compH: AEGP_CompH, timeP: *mut A_Time) -> A_Err>,
    pub AEGP_GetMostRecentlyUsedComp:
        ::std::option::Option<unsafe extern "C" fn(compPH: *mut AEGP_CompH) -> A_Err>,
    pub AEGP_CreateVectorLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_compH: AEGP_CompH,
            new_vector_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewCompMarkerStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            parent_compH: AEGP_CompH,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetCompDisplayDropFrame: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dropFramePB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetCompDisplayDropFrame: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dropFrameB: A_Boolean) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CompSuite8 {
    pub AEGP_GetCompFromItem: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetItemFromComp: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *mut AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_SetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *const AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_GetCompBGColor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, bg_colorP: *mut AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_SetCompBGColor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, bg_colorP: *const AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_GetCompFlags: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, comp_flagsP: *mut AEGP_CompFlags) -> A_Err,
    >,
    pub AEGP_GetCompFramerate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_SetCompFrameRate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *const A_FpLong) -> A_Err,
    >,
    pub AEGP_GetCompShutterAnglePhase: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, angle: *mut A_Ratio, phase: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_GetCompShutterFrameRange: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            comp_timeP: *const A_Time,
            start: *mut A_Time,
            duration: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetCompSuggestedMotionBlurSamples: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, samplesPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_SetCompSuggestedMotionBlurSamples:
        ::std::option::Option<unsafe extern "C" fn(compH: AEGP_CompH, samplesL: A_long) -> A_Err>,
    pub AEGP_GetCompWorkAreaStart: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_startPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetCompWorkAreaDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompWorkAreaStartAndDuration: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            work_area_startPT: *const A_Time,
            work_area_durationPT: *const A_Time,
        ) -> A_Err,
    >,
    pub AEGP_CreateSolidInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            width: A_long,
            height: A_long,
            color: *const AEGP_ColorVal,
            parent_compH: AEGP_CompH,
            durationPT0: *const A_Time,
            new_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateCameraInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_CompH,
            new_cameraPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateLightInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_CompH,
            new_lightPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_folderH0: AEGP_ItemH,
            utf_nameZ: *const A_UTF16Char,
            widthL: A_long,
            heightL: A_long,
            pixel_aspect_ratioPRt: *const A_Ratio,
            durationPT: *const A_Time,
            frameratePRt: *const A_Ratio,
            new_compPH: *mut AEGP_CompH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewCollectionFromCompSelection: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            compH: AEGP_CompH,
            collectionPH: *mut AEGP_Collection2H,
        ) -> A_Err,
    >,
    pub AEGP_SetSelection: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, collectionH: AEGP_Collection2H) -> A_Err,
    >,
    pub AEGP_GetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *const A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, durationPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_CreateNullInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            parent_compH: AEGP_CompH,
            durationPT0: *const A_Time,
            new_null_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_SetCompPixelAspectRatio: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, pix_aspectratioPRt: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_CreateTextLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(parent_compH: AEGP_CompH, new_text_layerPH: *mut AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_CreateBoxTextLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_compH: AEGP_CompH,
            box_dimensions: A_FloatPoint,
            new_text_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_SetCompDimensions: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, widthL: A_long, heightL: A_long) -> A_Err,
    >,
    pub AEGP_DuplicateComp: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, new_compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetCompFrameDuration:
        ::std::option::Option<unsafe extern "C" fn(compH: AEGP_CompH, timeP: *mut A_Time) -> A_Err>,
    pub AEGP_GetMostRecentlyUsedComp:
        ::std::option::Option<unsafe extern "C" fn(compPH: *mut AEGP_CompH) -> A_Err>,
    pub AEGP_CreateVectorLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_compH: AEGP_CompH,
            new_vector_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewCompMarkerStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            parent_compH: AEGP_CompH,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetCompDisplayDropFrame: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dropFramePB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetCompDisplayDropFrame: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dropFrameB: A_Boolean) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CompSuite7 {
    pub AEGP_GetCompFromItem: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetItemFromComp: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *mut AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_SetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *const AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_GetCompBGColor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, bg_colorP: *mut AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_SetCompBGColor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, bg_colorP: *const AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_GetCompFlags: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, comp_flagsP: *mut AEGP_CompFlags) -> A_Err,
    >,
    pub AEGP_GetCompFramerate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_SetCompFrameRate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *const A_FpLong) -> A_Err,
    >,
    pub AEGP_GetCompShutterAnglePhase: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, angle: *mut A_Ratio, phase: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_GetCompShutterFrameRange: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            comp_timeP: *const A_Time,
            start: *mut A_Time,
            duration: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetCompSuggestedMotionBlurSamples: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, samplesPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_SetCompSuggestedMotionBlurSamples:
        ::std::option::Option<unsafe extern "C" fn(compH: AEGP_CompH, samplesL: A_long) -> A_Err>,
    pub AEGP_GetCompWorkAreaStart: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_startPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetCompWorkAreaDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompWorkAreaStartAndDuration: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            work_area_startPT: *const A_Time,
            work_area_durationPT: *const A_Time,
        ) -> A_Err,
    >,
    pub AEGP_CreateSolidInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            width: A_long,
            height: A_long,
            color: *const AEGP_ColorVal,
            parent_compH: AEGP_CompH,
            durationPT0: *const A_Time,
            new_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateCameraInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_CompH,
            new_cameraPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateLightInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_CompH,
            new_lightPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_folderH0: AEGP_ItemH,
            utf_nameZ: *const A_UTF16Char,
            widthL: A_long,
            heightL: A_long,
            pixel_aspect_ratioPRt: *const A_Ratio,
            durationPT: *const A_Time,
            frameratePRt: *const A_Ratio,
            new_compPH: *mut AEGP_CompH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewCollectionFromCompSelection: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            compH: AEGP_CompH,
            collectionPH: *mut AEGP_Collection2H,
        ) -> A_Err,
    >,
    pub AEGP_SetSelection: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, collectionH: AEGP_Collection2H) -> A_Err,
    >,
    pub AEGP_GetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *const A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, durationPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_CreateNullInComp: ::std::option::Option<
        unsafe extern "C" fn(
            utf_nameZ: *const A_UTF16Char,
            parent_compH: AEGP_CompH,
            durationPT0: *const A_Time,
            new_null_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_SetCompPixelAspectRatio: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, pix_aspectratioPRt: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_CreateTextLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(parent_compH: AEGP_CompH, new_text_layerPH: *mut AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_SetCompDimensions: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, widthL: A_long, heightL: A_long) -> A_Err,
    >,
    pub AEGP_DuplicateComp: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, new_compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetCompFrameDuration:
        ::std::option::Option<unsafe extern "C" fn(compH: AEGP_CompH, timeP: *mut A_Time) -> A_Err>,
    pub AEGP_GetMostRecentlyUsedComp:
        ::std::option::Option<unsafe extern "C" fn(compPH: *mut AEGP_CompH) -> A_Err>,
    pub AEGP_CreateVectorLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_compH: AEGP_CompH,
            new_vector_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewCompMarkerStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            parent_compH: AEGP_CompH,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CompSuite6 {
    pub AEGP_GetCompFromItem: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetItemFromComp: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *mut AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_SetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *const AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_GetCompBGColor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, bg_colorP: *mut AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_SetCompBGColor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, bg_colorP: *const AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_GetCompFlags: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, comp_flagsP: *mut AEGP_CompFlags) -> A_Err,
    >,
    pub AEGP_GetCompFramerate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_SetCompFrameRate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *const A_FpLong) -> A_Err,
    >,
    pub AEGP_GetCompShutterAnglePhase: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, angle: *mut A_Ratio, phase: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_GetCompShutterFrameRange: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            comp_timeP: *const A_Time,
            start: *mut A_Time,
            duration: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetCompSuggestedMotionBlurSamples: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, samplesPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_SetCompSuggestedMotionBlurSamples:
        ::std::option::Option<unsafe extern "C" fn(compH: AEGP_CompH, samplesL: A_long) -> A_Err>,
    pub AEGP_GetCompWorkAreaStart: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_startPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetCompWorkAreaDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompWorkAreaStartAndDuration: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            work_area_startPT: *const A_Time,
            work_area_durationPT: *const A_Time,
        ) -> A_Err,
    >,
    pub AEGP_CreateSolidInComp: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            width: A_long,
            height: A_long,
            color: *const AEGP_ColorVal,
            parent_compH: AEGP_CompH,
            durationPT0: *const A_Time,
            new_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateCameraInComp: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_CompH,
            new_cameraPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateLightInComp: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_CompH,
            new_lightPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_folderH0: AEGP_ItemH,
            nameZ: *const A_char,
            widthL: A_long,
            heightL: A_long,
            pixel_aspect_ratioPRt: *const A_Ratio,
            durationPT: *const A_Time,
            frameratePRt: *const A_Ratio,
            new_compPH: *mut AEGP_CompH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewCollectionFromCompSelection: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            compH: AEGP_CompH,
            collectionPH: *mut AEGP_Collection2H,
        ) -> A_Err,
    >,
    pub AEGP_SetSelection: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, collectionH: AEGP_Collection2H) -> A_Err,
    >,
    pub AEGP_GetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *const A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, durationPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_CreateNullInComp: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            parent_compH: AEGP_CompH,
            durationPT0: *const A_Time,
            new_null_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_SetCompPixelAspectRatio: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, pix_aspectratioPRt: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_CreateTextLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(parent_compH: AEGP_CompH, new_text_layerPH: *mut AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_SetCompDimensions: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, widthL: A_long, heightL: A_long) -> A_Err,
    >,
    pub AEGP_DuplicateComp: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, new_compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetCompFrameDuration:
        ::std::option::Option<unsafe extern "C" fn(compH: AEGP_CompH, timeP: *mut A_Time) -> A_Err>,
    pub AEGP_GetMostRecentlyUsedComp:
        ::std::option::Option<unsafe extern "C" fn(compPH: *mut AEGP_CompH) -> A_Err>,
    pub AEGP_CreateVectorLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_compH: AEGP_CompH,
            new_vector_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewCompMarkerStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            parent_compH: AEGP_CompH,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CompSuite5 {
    pub AEGP_GetCompFromItem: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetItemFromComp: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *mut AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_SetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *const AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_GetCompBGColor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, bg_colorP: *mut AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_SetCompBGColor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, bg_colorP: *const AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_GetCompFlags: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, comp_flagsP: *mut AEGP_CompFlags) -> A_Err,
    >,
    pub AEGP_GetCompFramerate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_SetCompFrameRate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *const A_FpLong) -> A_Err,
    >,
    pub AEGP_GetCompShutterAnglePhase: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, angle: *mut A_Ratio, phase: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_GetCompShutterFrameRange: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            comp_timeP: *const A_Time,
            start: *mut A_Time,
            duration: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetCompWorkAreaStart: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_startPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetCompWorkAreaDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompWorkAreaStartAndDuration: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            work_area_startPT: *mut A_Time,
            work_area_durationPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_CreateSolidInComp: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            width: A_long,
            height: A_long,
            color: *const AEGP_ColorVal,
            parent_compH: AEGP_CompH,
            durationPT0: *const A_Time,
            new_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateCameraInComp: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_CompH,
            new_cameraPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateLightInComp: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_CompH,
            new_lightPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_folderH0: AEGP_ItemH,
            nameZ: *const A_char,
            widthL: A_long,
            heightL: A_long,
            pixel_aspect_ratioPRt: *const A_Ratio,
            durationPT: *const A_Time,
            frameratePRt: *const A_Ratio,
            new_compPH: *mut AEGP_CompH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewCollectionFromCompSelection: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            compH: AEGP_CompH,
            collectionPH: *mut AEGP_Collection2H,
        ) -> A_Err,
    >,
    pub AEGP_SetSelection: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, collectionH: AEGP_Collection2H) -> A_Err,
    >,
    pub AEGP_GetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *const A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, durationPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_CreateNullInComp: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            parent_compH: AEGP_CompH,
            durationPT0: *const A_Time,
            new_null_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_SetCompPixelAspectRatio: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, pix_aspectratioPRt: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_CreateTextLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(parent_compH: AEGP_CompH, new_text_layerPH: *mut AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_SetCompDimensions: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, widthL: A_long, heightL: A_long) -> A_Err,
    >,
    pub AEGP_DuplicateComp: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, new_compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetCompFrameDuration:
        ::std::option::Option<unsafe extern "C" fn(compH: AEGP_CompH, timeP: *mut A_Time) -> A_Err>,
    pub AEGP_GetMostRecentlyUsedComp:
        ::std::option::Option<unsafe extern "C" fn(compPH: *mut AEGP_CompH) -> A_Err>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CompSuite4 {
    pub AEGP_GetCompFromItem: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetItemFromComp: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *mut AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_SetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *const AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_GetCompBGColor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, bg_colorP: *mut AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_GetCompFlags: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, comp_flagsP: *mut AEGP_CompFlags) -> A_Err,
    >,
    pub AEGP_GetCompFramerate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_SetCompFrameRate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *const A_FpLong) -> A_Err,
    >,
    pub AEGP_GetCompShutterAnglePhase: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, angle: *mut A_Ratio, phase: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_GetCompShutterFrameRange: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            comp_timeP: *const A_Time,
            start: *mut A_Time,
            duration: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetCompWorkAreaStart: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_startPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetCompWorkAreaDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompWorkAreaStartAndDuration: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            work_area_startPT: *mut A_Time,
            work_area_durationPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_CreateSolidInComp: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            width: A_long,
            height: A_long,
            color: *const AEGP_ColorVal,
            parent_compH: AEGP_CompH,
            durationPT0: *const A_Time,
            new_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateCameraInComp: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_CompH,
            new_cameraPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateLightInComp: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_CompH,
            new_lightPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_folderH0: AEGP_ItemH,
            nameZ: *const A_char,
            widthL: A_long,
            heightL: A_long,
            pixel_aspect_ratioPRt: *const A_Ratio,
            durationPT: *const A_Time,
            frameratePRt: *const A_Ratio,
            new_compPH: *mut AEGP_CompH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewCollectionFromCompSelection: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            compH: AEGP_CompH,
            collectionPH: *mut AEGP_Collection2H,
        ) -> A_Err,
    >,
    pub AEGP_SetSelection: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, collectionH: AEGP_Collection2H) -> A_Err,
    >,
    pub AEGP_GetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *const A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, durationPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_CreateNullInComp: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            parent_compH: AEGP_CompH,
            durationPT0: *const A_Time,
            new_null_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_SetCompPixelAspectRatio: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, pix_aspectratioPRt: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_CreateTextLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(parent_compH: AEGP_CompH, new_text_layerPH: *mut AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_SetCompDimensions: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, widthL: A_long, heightL: A_long) -> A_Err,
    >,
    pub AEGP_DuplicateComp: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, new_compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetCompFrameDuration:
        ::std::option::Option<unsafe extern "C" fn(compH: AEGP_CompH, timeP: *mut A_Time) -> A_Err>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CompSuite3 {
    pub AEGP_GetCompFromItem: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetItemFromComp: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *mut AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_SetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *const AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_GetCompBGColor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, bg_colorP: *mut AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_GetCompFlags: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, comp_flagsP: *mut AEGP_CompFlags) -> A_Err,
    >,
    pub AEGP_GetCompFramerate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_SetCompFrameRate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *const A_FpLong) -> A_Err,
    >,
    pub AEGP_GetCompShutterAnglePhase: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, angle: *mut A_Ratio, phase: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_GetCompShutterFrameRange: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            comp_timeP: *const A_Time,
            start: *mut A_Time,
            duration: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetCompWorkAreaStart: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_startPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetCompWorkAreaDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompWorkAreaStartAndDuration: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            work_area_startPT: *mut A_Time,
            work_area_durationPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_CreateSolidInComp: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            width: A_long,
            height: A_long,
            color: *const AEGP_ColorVal,
            parent_compH: AEGP_CompH,
            durationPT0: *const A_Time,
            new_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateCameraInComp: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_CompH,
            new_cameraPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateLightInComp: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_CompH,
            new_lightPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_folderH0: AEGP_ItemH,
            nameZ: *const A_char,
            widthL: A_long,
            heightL: A_long,
            pixel_aspect_ratioPRt: *const A_Ratio,
            durationPT: *const A_Time,
            frameratePRt: *const A_Ratio,
            new_compPH: *mut AEGP_CompH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewCollectionFromCompSelection: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            compH: AEGP_CompH,
            collectionPH: *mut AEGP_CollectionH,
        ) -> A_Err,
    >,
    pub AEGP_SetSelection: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, collectionH: AEGP_CollectionH) -> A_Err,
    >,
    pub AEGP_GetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *const A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, durationPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_CreateNullInComp: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            parent_compH: AEGP_CompH,
            durationPT0: *const A_Time,
            new_null_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_SetCompPixelAspectRatio: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, pix_aspectratioPRt: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_CreateTextLayerInComp: ::std::option::Option<
        unsafe extern "C" fn(parent_compH: AEGP_CompH, new_text_layerPH: *mut AEGP_LayerH) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CompSuite2 {
    pub AEGP_GetCompFromItem: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetItemFromComp: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *mut AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_SetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *const AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_GetCompBGColor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, bg_colorP: *mut AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_GetCompFlags: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, comp_flagsP: *mut AEGP_CompFlags) -> A_Err,
    >,
    pub AEGP_GetCompFramerate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_GetCompShutterAnglePhase: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, angle: *mut A_Ratio, phase: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_GetCompShutterFrameRange: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            comp_timeP: *const A_Time,
            start: *mut A_Time,
            duration: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetCompWorkAreaStart: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_startPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetCompWorkAreaDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompWorkAreaStartAndDuration: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            work_area_startPT: *mut A_Time,
            work_area_durationPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_CreateSolidInComp: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            width: A_long,
            height: A_long,
            color: *const AEGP_ColorVal,
            parent_compH: AEGP_ItemH,
            durationPT0: *const A_Time,
            new_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateCameraInComp: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_ItemH,
            new_cameraPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateLightInComp: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            center_point: A_FloatPoint,
            parent_compH: AEGP_ItemH,
            new_lightPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_folderH0: AEGP_ItemH,
            nameZ: *const A_char,
            widthL: A_long,
            heightL: A_long,
            pixel_aspect_ratioPRt: *const A_Ratio,
            durationPT: *const A_Time,
            frameratePRt: *const A_Ratio,
            new_compPH: *mut AEGP_CompH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewCollectionFromCompSelection: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            compH: AEGP_CompH,
            collectionPH: *mut AEGP_CollectionH,
        ) -> A_Err,
    >,
    pub AEGP_SetSelection: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, collectionH: AEGP_CollectionH) -> A_Err,
    >,
    pub AEGP_SetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *const A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, durationPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_CreateNullInComp: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            parent_compH: AEGP_CompH,
            durationPT0: *const A_Time,
            new_null_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CompSuite1 {
    pub AEGP_GetCompFromItem: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetItemFromComp: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetCompDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dsfP: *mut AEGP_DownsampleFactor) -> A_Err,
    >,
    pub AEGP_GetCompBGColor: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, bg_colorP: *mut AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_GetCompFlags: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, comp_flagsP: *mut AEGP_CompFlags) -> A_Err,
    >,
    pub AEGP_GetCompFramerate: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, fpsPF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_GetCompShutterAnglePhase: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, angle: *mut A_Ratio, phase: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_GetCompShutterFrameRange: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            comp_timeP: *const A_Time,
            start: *mut A_Time,
            duration: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetCompWorkAreaStart: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_startPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetCompWorkAreaDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, work_area_durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetCompWorkAreaStartAndDuration: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            work_area_startPT: *mut A_Time,
            work_area_durationPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_CreateSolidInComp: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            width: A_long,
            height: A_long,
            color: *const AEGP_ColorVal,
            parent_compH: AEGP_ItemH,
            new_solidPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_CreateComp: ::std::option::Option<
        unsafe extern "C" fn(
            parent_folderH0: AEGP_ItemH,
            nameZ: *const A_char,
            widthL: A_long,
            heightL: A_long,
            pixel_aspect_ratioPRt: *const A_Ratio,
            durationPT: *const A_Time,
            frameratePRt: *const A_Ratio,
            new_compPH: *mut AEGP_ItemH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewCollectionFromCompSelection: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            compH: AEGP_CompH,
            collectionPH: *mut AEGP_CollectionH,
        ) -> A_Err,
    >,
    pub AEGP_SetSelection: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, collectionH: AEGP_CollectionH) -> A_Err,
    >,
    pub AEGP_SetCompDisplayStartTime: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, start_timePT: *const A_Time) -> A_Err,
    >,
    pub AEGP_SetCompDuration: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, durationPT: *const A_Time) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_LayerSuite8 {
    pub AEGP_GetCompNumLayers: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, num_layersPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetCompLayerByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            layer_indexL: A_long,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetActiveLayer:
        ::std::option::Option<unsafe extern "C" fn(layerPH: *mut AEGP_LayerH) -> A_Err>,
    pub AEGP_GetLayerIndex: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_indexPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerSourceItem: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, source_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetLayerSourceItemID: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, source_item_idPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerParentComp: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetLayerName: ::std::option::Option<
        unsafe extern "C" fn(
            pluginID: AEGP_PluginID,
            layerH: AEGP_LayerH,
            utf_layer_namePH0: *mut AEGP_MemHandle,
            utf_source_namePH0: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerQuality: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, qualityP: *mut AEGP_LayerQuality) -> A_Err,
    >,
    pub AEGP_SetLayerQuality: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, quality: AEGP_LayerQuality) -> A_Err,
    >,
    pub AEGP_GetLayerFlags: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_flagsP: *mut AEGP_LayerFlags) -> A_Err,
    >,
    pub AEGP_SetLayerFlag: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            single_flag: AEGP_LayerFlags,
            valueB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsLayerVideoReallyOn: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, onPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsLayerAudioReallyOn: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, onPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetLayerCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            curr_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerInPoint: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            in_pointPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerDuration: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            durationPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerInPointAndDuration: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            in_pointPT: *const A_Time,
            durationPT: *const A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerOffset: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, offsetPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetLayerOffset: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, offsetPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetLayerStretch: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, stretchPRt: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_SetLayerStretch: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, stretchPRt: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_GetLayerTransferMode: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            transfer_modeP: *mut AEGP_LayerTransferMode,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerTransferMode: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            transfer_modeP: *const AEGP_LayerTransferMode,
        ) -> A_Err,
    >,
    pub AEGP_IsAddLayerValid: ::std::option::Option<
        unsafe extern "C" fn(
            item_to_addH: AEGP_ItemH,
            into_compH: AEGP_CompH,
            validPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_AddLayer: ::std::option::Option<
        unsafe extern "C" fn(
            item_to_addH: AEGP_ItemH,
            into_compH: AEGP_CompH,
            added_layerPH0: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_ReorderLayer: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_indexL: A_long) -> A_Err,
    >,
    pub AEGP_GetLayerMaskedBounds: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            boundsPR: *mut A_FloatRect,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerObjectType: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, object_type: *mut AEGP_ObjectType) -> A_Err,
    >,
    pub AEGP_IsLayer3D: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, is_3DPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsLayer2D: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, is_2DPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsVideoActive: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            is_activePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsLayerUsedAsTrackMatte: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            fill_must_be_activeB: A_Boolean,
            is_track_mattePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_DoesLayerHaveTrackMatte: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, has_track_mattePB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_ConvertCompToLayerTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            comp_timePT: *const A_Time,
            layer_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_ConvertLayerToCompTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            layer_timePT: *const A_Time,
            comp_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerDancingRandValue: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            comp_timePT: *const A_Time,
            rand_valuePL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerID: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, id_valP: *mut AEGP_LayerIDVal) -> A_Err,
    >,
    pub AEGP_GetLayerToWorldXform: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            comp_timeP: *const A_Time,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerToWorldXformFromView: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            view_timeP: *const A_Time,
            comp_timeP: *const A_Time,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerName: ::std::option::Option<
        unsafe extern "C" fn(aegp_layerH: AEGP_LayerH, new_nameZ: *const A_UTF16Char) -> A_Err,
    >,
    pub AEGP_GetLayerParent: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, parent_layerPH: *mut AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_SetLayerParent: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, parent_layerH0: AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_DeleteLayer: ::std::option::Option<unsafe extern "C" fn(layerH: AEGP_LayerH) -> A_Err>,
    pub AEGP_DuplicateLayer: ::std::option::Option<
        unsafe extern "C" fn(
            orig_layerH: AEGP_LayerH,
            duplicate_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerFromLayerID: ::std::option::Option<
        unsafe extern "C" fn(
            parent_compH: AEGP_CompH,
            id: AEGP_LayerIDVal,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerLabel: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, labelP: *mut AEGP_LabelID) -> A_Err,
    >,
    pub AEGP_SetLayerLabel: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, label: AEGP_LabelID) -> A_Err,
    >,
    pub AEGP_GetLayerSamplingQuality: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            qualityP: *mut AEGP_LayerSamplingQuality,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerSamplingQuality: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, quality: AEGP_LayerSamplingQuality) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_LayerSuite7 {
    pub AEGP_GetCompNumLayers: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, num_layersPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetCompLayerByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            layer_indexL: A_long,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetActiveLayer:
        ::std::option::Option<unsafe extern "C" fn(layerPH: *mut AEGP_LayerH) -> A_Err>,
    pub AEGP_GetLayerIndex: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_indexPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerSourceItem: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, source_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetLayerSourceItemID: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, source_item_idPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerParentComp: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetLayerName: ::std::option::Option<
        unsafe extern "C" fn(
            pluginID: AEGP_PluginID,
            layerH: AEGP_LayerH,
            utf_layer_namePH0: *mut AEGP_MemHandle,
            utf_source_namePH0: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerQuality: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, qualityP: *mut AEGP_LayerQuality) -> A_Err,
    >,
    pub AEGP_SetLayerQuality: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, quality: AEGP_LayerQuality) -> A_Err,
    >,
    pub AEGP_GetLayerFlags: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_flagsP: *mut AEGP_LayerFlags) -> A_Err,
    >,
    pub AEGP_SetLayerFlag: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            single_flag: AEGP_LayerFlags,
            valueB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsLayerVideoReallyOn: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, onPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsLayerAudioReallyOn: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, onPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetLayerCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            curr_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerInPoint: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            in_pointPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerDuration: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            durationPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerInPointAndDuration: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            in_pointPT: *const A_Time,
            durationPT: *const A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerOffset: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, offsetPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetLayerOffset: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, offsetPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetLayerStretch: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, stretchPRt: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_SetLayerStretch: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, stretchPRt: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_GetLayerTransferMode: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            transfer_modeP: *mut AEGP_LayerTransferMode,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerTransferMode: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            transfer_modeP: *const AEGP_LayerTransferMode,
        ) -> A_Err,
    >,
    pub AEGP_IsAddLayerValid: ::std::option::Option<
        unsafe extern "C" fn(
            item_to_addH: AEGP_ItemH,
            into_compH: AEGP_CompH,
            validPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_AddLayer: ::std::option::Option<
        unsafe extern "C" fn(
            item_to_addH: AEGP_ItemH,
            into_compH: AEGP_CompH,
            added_layerPH0: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_ReorderLayer: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_indexL: A_long) -> A_Err,
    >,
    pub AEGP_GetLayerMaskedBounds: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            boundsPR: *mut A_FloatRect,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerObjectType: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, object_type: *mut AEGP_ObjectType) -> A_Err,
    >,
    pub AEGP_IsLayer3D: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, is_3DPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsLayer2D: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, is_2DPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsVideoActive: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            is_activePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsLayerUsedAsTrackMatte: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            fill_must_be_activeB: A_Boolean,
            is_track_mattePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_DoesLayerHaveTrackMatte: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, has_track_mattePB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_ConvertCompToLayerTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            comp_timePT: *const A_Time,
            layer_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_ConvertLayerToCompTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            layer_timePT: *const A_Time,
            comp_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerDancingRandValue: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            comp_timePT: *const A_Time,
            rand_valuePL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerID: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, id_valP: *mut AEGP_LayerIDVal) -> A_Err,
    >,
    pub AEGP_GetLayerToWorldXform: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            comp_timeP: *const A_Time,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerToWorldXformFromView: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            view_timeP: *const A_Time,
            comp_timeP: *const A_Time,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerName: ::std::option::Option<
        unsafe extern "C" fn(aegp_layerH: AEGP_LayerH, new_nameZ: *const A_UTF16Char) -> A_Err,
    >,
    pub AEGP_GetLayerParent: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, parent_layerPH: *mut AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_SetLayerParent: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, parent_layerH0: AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_DeleteLayer: ::std::option::Option<unsafe extern "C" fn(layerH: AEGP_LayerH) -> A_Err>,
    pub AEGP_DuplicateLayer: ::std::option::Option<
        unsafe extern "C" fn(
            orig_layerH: AEGP_LayerH,
            duplicate_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerFromLayerID: ::std::option::Option<
        unsafe extern "C" fn(
            parent_compH: AEGP_CompH,
            id: AEGP_LayerIDVal,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerLabel: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, labelP: *mut AEGP_LabelID) -> A_Err,
    >,
    pub AEGP_SetLayerLabel: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, label: AEGP_LabelID) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_LayerSuite6 {
    pub AEGP_GetCompNumLayers: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, num_layersPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetCompLayerByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            layer_indexL: A_long,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetActiveLayer:
        ::std::option::Option<unsafe extern "C" fn(layerPH: *mut AEGP_LayerH) -> A_Err>,
    pub AEGP_GetLayerIndex: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_indexPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerSourceItem: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, source_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetLayerSourceItemID: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, source_item_idPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerParentComp: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetLayerName: ::std::option::Option<
        unsafe extern "C" fn(
            pluginID: AEGP_PluginID,
            layerH: AEGP_LayerH,
            utf_layer_namePH0: *mut AEGP_MemHandle,
            utf_source_namePH0: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerQuality: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, qualityP: *mut AEGP_LayerQuality) -> A_Err,
    >,
    pub AEGP_SetLayerQuality: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, quality: AEGP_LayerQuality) -> A_Err,
    >,
    pub AEGP_GetLayerFlags: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_flagsP: *mut AEGP_LayerFlags) -> A_Err,
    >,
    pub AEGP_SetLayerFlag: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            single_flag: AEGP_LayerFlags,
            valueB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsLayerVideoReallyOn: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, onPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsLayerAudioReallyOn: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, onPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetLayerCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            curr_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerInPoint: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            in_pointPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerDuration: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            durationPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerInPointAndDuration: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            in_pointPT: *const A_Time,
            durationPT: *const A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerOffset: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, offsetPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetLayerOffset: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, offsetPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetLayerStretch: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, stretchPRt: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_SetLayerStretch: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, stretchPRt: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_GetLayerTransferMode: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            transfer_modeP: *mut AEGP_LayerTransferMode,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerTransferMode: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            transfer_modeP: *const AEGP_LayerTransferMode,
        ) -> A_Err,
    >,
    pub AEGP_IsAddLayerValid: ::std::option::Option<
        unsafe extern "C" fn(
            item_to_addH: AEGP_ItemH,
            into_compH: AEGP_CompH,
            validPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_AddLayer: ::std::option::Option<
        unsafe extern "C" fn(
            item_to_addH: AEGP_ItemH,
            into_compH: AEGP_CompH,
            added_layerPH0: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_ReorderLayer: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_indexL: A_long) -> A_Err,
    >,
    pub AEGP_GetLayerMaskedBounds: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            boundsPR: *mut A_FloatRect,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerObjectType: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, object_type: *mut AEGP_ObjectType) -> A_Err,
    >,
    pub AEGP_IsLayer3D: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, is_3DPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsLayer2D: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, is_2DPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsVideoActive: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            is_activePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsLayerUsedAsTrackMatte: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            fill_must_be_activeB: A_Boolean,
            is_track_mattePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_DoesLayerHaveTrackMatte: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, has_track_mattePB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_ConvertCompToLayerTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            comp_timePT: *const A_Time,
            layer_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_ConvertLayerToCompTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            layer_timePT: *const A_Time,
            comp_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerDancingRandValue: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            comp_timePT: *const A_Time,
            rand_valuePL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerID: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, id_valP: *mut AEGP_LayerIDVal) -> A_Err,
    >,
    pub AEGP_GetLayerToWorldXform: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            comp_timeP: *const A_Time,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerToWorldXformFromView: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            view_timeP: *const A_Time,
            comp_timeP: *const A_Time,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerName: ::std::option::Option<
        unsafe extern "C" fn(aegp_layerH: AEGP_LayerH, new_nameZ: *const A_UTF16Char) -> A_Err,
    >,
    pub AEGP_GetLayerParent: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, parent_layerPH: *mut AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_SetLayerParent: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, parent_layerH0: AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_DeleteLayer: ::std::option::Option<unsafe extern "C" fn(layerH: AEGP_LayerH) -> A_Err>,
    pub AEGP_DuplicateLayer: ::std::option::Option<
        unsafe extern "C" fn(
            orig_layerH: AEGP_LayerH,
            duplicate_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerFromLayerID: ::std::option::Option<
        unsafe extern "C" fn(
            parent_compH: AEGP_CompH,
            id: AEGP_LayerIDVal,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_LayerSuite5 {
    pub AEGP_GetCompNumLayers: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, num_layersPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetCompLayerByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            layer_indexL: A_long,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetActiveLayer:
        ::std::option::Option<unsafe extern "C" fn(layerPH: *mut AEGP_LayerH) -> A_Err>,
    pub AEGP_GetLayerIndex: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_indexPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerSourceItem: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, source_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetLayerSourceItemID: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, source_item_idPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerParentComp: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetLayerName: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            layer_nameZ0: *mut A_char,
            source_nameZ0: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerQuality: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, qualityP: *mut AEGP_LayerQuality) -> A_Err,
    >,
    pub AEGP_SetLayerQuality: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, quality: AEGP_LayerQuality) -> A_Err,
    >,
    pub AEGP_GetLayerFlags: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_flagsP: *mut AEGP_LayerFlags) -> A_Err,
    >,
    pub AEGP_SetLayerFlag: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            single_flag: AEGP_LayerFlags,
            valueB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsLayerVideoReallyOn: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, onPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsLayerAudioReallyOn: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, onPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetLayerCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            curr_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerInPoint: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            in_pointPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerDuration: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            durationPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerInPointAndDuration: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            in_pointPT: *const A_Time,
            durationPT: *const A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerOffset: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, offsetPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetLayerOffset: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, offsetPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetLayerStretch: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, stretchPRt: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_SetLayerStretch: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, stretchPRt: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_GetLayerTransferMode: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            transfer_modeP: *mut AEGP_LayerTransferMode,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerTransferMode: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            transfer_modeP: *const AEGP_LayerTransferMode,
        ) -> A_Err,
    >,
    pub AEGP_IsAddLayerValid: ::std::option::Option<
        unsafe extern "C" fn(
            item_to_addH: AEGP_ItemH,
            into_compH: AEGP_CompH,
            validPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_AddLayer: ::std::option::Option<
        unsafe extern "C" fn(
            item_to_addH: AEGP_ItemH,
            into_compH: AEGP_CompH,
            added_layerPH0: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_ReorderLayer: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_indexL: A_long) -> A_Err,
    >,
    pub AEGP_GetLayerMaskedBounds: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            boundsPR: *mut A_FloatRect,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerObjectType: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, object_type: *mut AEGP_ObjectType) -> A_Err,
    >,
    pub AEGP_IsLayer3D: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, is_3DPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsLayer2D: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, is_2DPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsVideoActive: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            is_activePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsLayerUsedAsTrackMatte: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            fill_must_be_activeB: A_Boolean,
            is_track_mattePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_DoesLayerHaveTrackMatte: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, has_track_mattePB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_ConvertCompToLayerTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            comp_timePT: *const A_Time,
            layer_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_ConvertLayerToCompTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            layer_timePT: *const A_Time,
            comp_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerDancingRandValue: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            comp_timePT: *const A_Time,
            rand_valuePL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerID: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, id_valP: *mut AEGP_LayerIDVal) -> A_Err,
    >,
    pub AEGP_GetLayerToWorldXform: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            comp_timeP: *const A_Time,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerToWorldXformFromView: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            view_timeP: *const A_Time,
            comp_timeP: *const A_Time,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerName: ::std::option::Option<
        unsafe extern "C" fn(aegp_layerH: AEGP_LayerH, new_nameZ: *const A_char) -> A_Err,
    >,
    pub AEGP_GetLayerParent: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, parent_layerPH: *mut AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_SetLayerParent: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, parent_layerH0: AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_DeleteLayer: ::std::option::Option<unsafe extern "C" fn(layerH: AEGP_LayerH) -> A_Err>,
    pub AEGP_DuplicateLayer: ::std::option::Option<
        unsafe extern "C" fn(
            orig_layerH: AEGP_LayerH,
            duplicate_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerFromLayerID: ::std::option::Option<
        unsafe extern "C" fn(
            parent_compH: AEGP_CompH,
            id: AEGP_LayerIDVal,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_LayerSuite4 {
    pub AEGP_GetCompNumLayers: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, num_layersPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetCompLayerByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            layer_indexL: A_long,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetActiveLayer:
        ::std::option::Option<unsafe extern "C" fn(layerPH: *mut AEGP_LayerH) -> A_Err>,
    pub AEGP_GetLayerIndex: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_indexPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerSourceItem: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, source_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetLayerSourceItemID: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, source_item_idPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerParentComp: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetLayerName: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            layer_nameZ0: *mut A_char,
            source_nameZ0: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerQuality: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, qualityP: *mut AEGP_LayerQuality) -> A_Err,
    >,
    pub AEGP_SetLayerQuality: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, quality: AEGP_LayerQuality) -> A_Err,
    >,
    pub AEGP_GetLayerFlags: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_flagsP: *mut AEGP_LayerFlags) -> A_Err,
    >,
    pub AEGP_SetLayerFlag: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            single_flag: AEGP_LayerFlags,
            valueB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsLayerVideoReallyOn: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, onPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsLayerAudioReallyOn: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, onPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetLayerCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            curr_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerInPoint: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            in_pointPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerDuration: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            durationPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerInPointAndDuration: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            in_pointPT: *const A_Time,
            durationPT: *const A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerOffset: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, offsetPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetLayerOffset: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, offsetPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetLayerStretch: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, stretchPRt: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_SetLayerStretch: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, stretchPRt: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_GetLayerTransferMode: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            transfer_modeP: *mut AEGP_LayerTransferMode,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerTransferMode: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            transfer_modeP: *const AEGP_LayerTransferMode,
        ) -> A_Err,
    >,
    pub AEGP_IsAddLayerValid: ::std::option::Option<
        unsafe extern "C" fn(
            item_to_addH: AEGP_ItemH,
            into_compH: AEGP_CompH,
            validPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_AddLayer: ::std::option::Option<
        unsafe extern "C" fn(
            item_to_addH: AEGP_ItemH,
            into_compH: AEGP_CompH,
            added_layerPH0: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_ReorderLayer: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_indexL: A_long) -> A_Err,
    >,
    pub AEGP_GetLayerMaskedBounds: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            boundsPR: *mut A_FloatRect,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerObjectType: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, object_type: *mut AEGP_ObjectType) -> A_Err,
    >,
    pub AEGP_IsLayer3D: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, is_3DPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsLayer2D: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, is_2DPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsVideoActive: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            is_activePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsLayerUsedAsTrackMatte: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            fill_must_be_activeB: A_Boolean,
            is_track_mattePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_DoesLayerHaveTrackMatte: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, has_track_mattePB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_ConvertCompToLayerTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            comp_timePT: *const A_Time,
            layer_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_ConvertLayerToCompTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            layer_timePT: *const A_Time,
            comp_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerDancingRandValue: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            comp_timePT: *const A_Time,
            rand_valuePL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerID: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, id_valP: *mut AEGP_LayerIDVal) -> A_Err,
    >,
    pub AEGP_GetLayerToWorldXform: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            comp_timeP: *const A_Time,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerToWorldXformFromView: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            view_timeP: *const A_Time,
            comp_timeP: *const A_Time,
            transform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerName: ::std::option::Option<
        unsafe extern "C" fn(aegp_layerH: AEGP_LayerH, new_nameZ: *const A_char) -> A_Err,
    >,
    pub AEGP_GetLayerParent: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, parent_layerPH: *mut AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_SetLayerParent: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, parent_layerH0: AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_DeleteLayer: ::std::option::Option<unsafe extern "C" fn(layerH: AEGP_LayerH) -> A_Err>,
    pub AEGP_DuplicateLayer: ::std::option::Option<
        unsafe extern "C" fn(
            orig_layerH: AEGP_LayerH,
            duplicate_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_LayerSuite3 {
    pub AEGP_GetCompNumLayers: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, num_layersPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetCompLayerByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            layer_indexL: A_long,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetActiveLayer:
        ::std::option::Option<unsafe extern "C" fn(layerPH: *mut AEGP_LayerH) -> A_Err>,
    pub AEGP_GetLayerIndex: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_indexPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerSourceItem: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, source_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetLayerParentComp: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetLayerName: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            layer_nameZ0: *mut A_char,
            source_nameZ0: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerQuality: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, qualityP: *mut AEGP_LayerQuality) -> A_Err,
    >,
    pub AEGP_SetLayerQuality: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, quality: AEGP_LayerQuality) -> A_Err,
    >,
    pub AEGP_GetLayerFlags: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_flagsP: *mut AEGP_LayerFlags) -> A_Err,
    >,
    pub AEGP_SetLayerFlag: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            single_flag: AEGP_LayerFlags,
            valueB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsLayerVideoReallyOn: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, onPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsLayerAudioReallyOn: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, onPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetLayerCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            curr_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerInPoint: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            in_pointPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerDuration: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            durationPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerInPointAndDuration: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            in_pointPT: *const A_Time,
            durationPT: *const A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerOffset: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, offsetPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetLayerOffset: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, offsetPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetLayerStretch: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, stretchPRt: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_SetLayerStretch: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, stretchPRt: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_GetLayerTransferMode: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            transfer_modeP: *mut AEGP_LayerTransferMode,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerTransferMode: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            transfer_modeP: *const AEGP_LayerTransferMode,
        ) -> A_Err,
    >,
    pub AEGP_IsAddLayerValid: ::std::option::Option<
        unsafe extern "C" fn(
            item_to_addH: AEGP_ItemH,
            into_compH: AEGP_CompH,
            validPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_AddLayer: ::std::option::Option<
        unsafe extern "C" fn(
            item_to_addH: AEGP_ItemH,
            into_compH: AEGP_CompH,
            added_layerPH0: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_ReorderLayer: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_indexL: A_long) -> A_Err,
    >,
    pub AEGP_GetLayerMaskedBounds: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            boundsPR: *mut A_FloatRect,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerObjectType: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, object_type: *mut AEGP_ObjectType) -> A_Err,
    >,
    pub AEGP_IsLayer3D: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, is_3DPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsLayer2D: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, is_2DPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsVideoActive: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            is_activePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsLayerUsedAsTrackMatte: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            fill_must_be_activeB: A_Boolean,
            is_track_mattePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_DoesLayerHaveTrackMatte: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, has_track_mattePB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_ConvertCompToLayerTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            comp_timePT: *const A_Time,
            layer_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_ConvertLayerToCompTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            layer_timePT: *const A_Time,
            comp_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerDancingRandValue: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            comp_timePT: *const A_Time,
            rand_valuePL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerID: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, id_valP: *mut AEGP_LayerIDVal) -> A_Err,
    >,
    pub AEGP_GetLayerToWorldXform: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            comp_timeP: *const A_Time,
            tranform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerToWorldXformFromView: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            view_timeP: *const A_Time,
            comp_timeP: *const A_Time,
            tranform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerName: ::std::option::Option<
        unsafe extern "C" fn(aegp_layerH: AEGP_LayerH, new_nameZ: *const A_char) -> A_Err,
    >,
    pub AEGP_GetLayerParent: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, parent_layerPH: *mut AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_SetLayerParent: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, parent_layerH0: AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_DeleteLayer: ::std::option::Option<unsafe extern "C" fn(layerH: AEGP_LayerH) -> A_Err>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_MarkerVal {
    pub nameAC: [A_char; 64usize],
    pub urlAC: [A_char; 1024usize],
    pub targetAC: [A_char; 128usize],
    pub chapterAC: [A_char; 128usize],
}
pub type AEGP_MarkerValH = *mut *mut AEGP_MarkerVal;
#[repr(C)]
#[derive(Copy, Clone)]
pub union AEGP_StreamVal {
    pub four_d: AEGP_FourDVal,
    pub three_d: AEGP_ThreeDVal,
    pub two_d: AEGP_TwoDVal,
    pub one_d: AEGP_OneDVal,
    pub color: AEGP_ColorVal,
    pub arbH: AEGP_ArbBlockVal,
    pub markerH: AEGP_MarkerValH,
    pub layer_id: AEGP_LayerIDVal,
    pub mask_id: AEGP_MaskIDVal,
    pub mask: AEGP_MaskOutlineValH,
    pub text_documentH: AEGP_TextDocumentH,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AEGP_StreamValue {
    pub streamH: AEGP_StreamRefH,
    pub val: AEGP_StreamVal,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_StreamSuite5 {
    pub AEGP_IsStreamLegal: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            which_stream: AEGP_LayerStream,
            is_legalP: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_CanVaryOverTime: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, can_varyPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetValidInterpolations: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            valid_interpolationsP: *mut AEGP_KeyInterpolationMask,
        ) -> A_Err,
    >,
    pub AEGP_GetNewLayerStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            which_stream: AEGP_LayerStream,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectNumParamStreams: ::std::option::Option<
        unsafe extern "C" fn(effect_refH: AEGP_EffectRefH, num_paramsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetNewEffectStreamByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            effect_refH: AEGP_EffectRefH,
            param_index: PF_ParamIndex,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewMaskStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            mask_refH: AEGP_MaskRefH,
            which_stream: AEGP_MaskStream,
            mask_streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeStream:
        ::std::option::Option<unsafe extern "C" fn(streamH: AEGP_StreamRefH) -> A_Err>,
    pub AEGP_GetStreamName: ::std::option::Option<
        unsafe extern "C" fn(
            pluginID: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            force_englishB: A_Boolean,
            utf_stream_namePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamUnitsText: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            force_englishB: A_Boolean,
            unitsZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamProperties: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            flagsP: *mut AEGP_StreamFlags,
            minP0: *mut A_FpLong,
            maxP0: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_IsStreamTimevarying: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, is_timevaryingPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetStreamType: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, stream_typeP: *mut AEGP_StreamType) -> A_Err,
    >,
    pub AEGP_GetNewStreamValue: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            pre_expressionB: A_Boolean,
            valueP: *mut AEGP_StreamValue2,
        ) -> A_Err,
    >,
    pub AEGP_DisposeStreamValue:
        ::std::option::Option<unsafe extern "C" fn(valueP: *mut AEGP_StreamValue2) -> A_Err>,
    pub AEGP_SetStreamValue: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            valueP: *mut AEGP_StreamValue2,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerStreamValue: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            which_stream: AEGP_LayerStream,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            pre_expressionB: A_Boolean,
            stream_valP: *mut AEGP_StreamVal2,
            stream_typeP0: *mut AEGP_StreamType,
        ) -> A_Err,
    >,
    pub AEGP_GetExpressionState: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            enabledPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_SetExpressionState: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            enabledB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetExpression: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            unicodeHZ: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_SetExpression: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            expressionP: *const A_UTF16Char,
        ) -> A_Err,
    >,
    pub AEGP_DuplicateStreamRef: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            dup_streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_StreamSuite4 {
    pub AEGP_IsStreamLegal: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            which_stream: AEGP_LayerStream,
            is_legalP: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_CanVaryOverTime: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, can_varyPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetValidInterpolations: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            valid_interpolationsP: *mut AEGP_KeyInterpolationMask,
        ) -> A_Err,
    >,
    pub AEGP_GetNewLayerStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            which_stream: AEGP_LayerStream,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectNumParamStreams: ::std::option::Option<
        unsafe extern "C" fn(effect_refH: AEGP_EffectRefH, num_paramsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetNewEffectStreamByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            effect_refH: AEGP_EffectRefH,
            param_index: PF_ParamIndex,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewMaskStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            mask_refH: AEGP_MaskRefH,
            which_stream: AEGP_MaskStream,
            mask_streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeStream:
        ::std::option::Option<unsafe extern "C" fn(streamH: AEGP_StreamRefH) -> A_Err>,
    pub AEGP_GetStreamName: ::std::option::Option<
        unsafe extern "C" fn(
            pluginID: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            force_englishB: A_Boolean,
            utf_stream_namePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamUnitsText: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            force_englishB: A_Boolean,
            unitsZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamProperties: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            flagsP: *mut AEGP_StreamFlags,
            minP0: *mut A_FpLong,
            maxP0: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_IsStreamTimevarying: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, is_timevaryingPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetStreamType: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, stream_typeP: *mut AEGP_StreamType) -> A_Err,
    >,
    pub AEGP_GetNewStreamValue: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            pre_expressionB: A_Boolean,
            valueP: *mut AEGP_StreamValue2,
        ) -> A_Err,
    >,
    pub AEGP_DisposeStreamValue:
        ::std::option::Option<unsafe extern "C" fn(valueP: *mut AEGP_StreamValue2) -> A_Err>,
    pub AEGP_SetStreamValue: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            valueP: *mut AEGP_StreamValue2,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerStreamValue: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            which_stream: AEGP_LayerStream,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            pre_expressionB: A_Boolean,
            stream_valP: *mut AEGP_StreamVal2,
            stream_typeP0: *mut AEGP_StreamType,
        ) -> A_Err,
    >,
    pub AEGP_GetExpressionState: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            enabledPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_SetExpressionState: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            enabledB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetExpression: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            expressionHZ: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_SetExpression: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            expressionP: *const A_char,
        ) -> A_Err,
    >,
    pub AEGP_DuplicateStreamRef: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            dup_streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_StreamSuite3 {
    pub AEGP_IsStreamLegal: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            which_stream: AEGP_LayerStream,
            is_legalP: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_CanVaryOverTime: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, can_varyPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetValidInterpolations: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            valid_interpolationsP: *mut AEGP_KeyInterpolationMask,
        ) -> A_Err,
    >,
    pub AEGP_GetNewLayerStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            which_stream: AEGP_LayerStream,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectNumParamStreams: ::std::option::Option<
        unsafe extern "C" fn(effect_refH: AEGP_EffectRefH, num_paramsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetNewEffectStreamByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            effect_refH: AEGP_EffectRefH,
            param_index: PF_ParamIndex,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewMaskStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            mask_refH: AEGP_MaskRefH,
            which_stream: AEGP_MaskStream,
            mask_streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeStream:
        ::std::option::Option<unsafe extern "C" fn(streamH: AEGP_StreamRefH) -> A_Err>,
    pub AEGP_GetStreamName: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            force_englishB: A_Boolean,
            nameZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamUnitsText: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            force_englishB: A_Boolean,
            unitsZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamProperties: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            flagsP: *mut AEGP_StreamFlags,
            minP0: *mut A_FpLong,
            maxP0: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_IsStreamTimevarying: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, is_timevaryingPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetStreamType: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, stream_typeP: *mut AEGP_StreamType) -> A_Err,
    >,
    pub AEGP_GetNewStreamValue: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            pre_expressionB: A_Boolean,
            valueP: *mut AEGP_StreamValue2,
        ) -> A_Err,
    >,
    pub AEGP_DisposeStreamValue:
        ::std::option::Option<unsafe extern "C" fn(valueP: *mut AEGP_StreamValue2) -> A_Err>,
    pub AEGP_SetStreamValue: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            valueP: *mut AEGP_StreamValue2,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerStreamValue: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            which_stream: AEGP_LayerStream,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            pre_expressionB: A_Boolean,
            stream_valP: *mut AEGP_StreamVal2,
            stream_typeP0: *mut AEGP_StreamType,
        ) -> A_Err,
    >,
    pub AEGP_GetExpressionState: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            enabledPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_SetExpressionState: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            enabledB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetExpression: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            expressionHZ: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_SetExpression: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            expressionP: *const A_char,
        ) -> A_Err,
    >,
    pub AEGP_DuplicateStreamRef: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            dup_streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_StreamSuite2 {
    pub AEGP_IsStreamLegal: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            which_stream: AEGP_LayerStream,
            is_legalP: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_CanVaryOverTime: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, can_varyPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetValidInterpolations: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            valid_interpolationsP: *mut AEGP_KeyInterpolationMask,
        ) -> A_Err,
    >,
    pub AEGP_GetNewLayerStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            which_stream: AEGP_LayerStream,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectNumParamStreams: ::std::option::Option<
        unsafe extern "C" fn(effect_refH: AEGP_EffectRefH, num_paramsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetNewEffectStreamByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            effect_refH: AEGP_EffectRefH,
            param_index: PF_ParamIndex,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewMaskStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            mask_refH: AEGP_MaskRefH,
            which_stream: AEGP_MaskStream,
            mask_streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeStream:
        ::std::option::Option<unsafe extern "C" fn(streamH: AEGP_StreamRefH) -> A_Err>,
    pub AEGP_GetStreamName: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            force_englishB: A_Boolean,
            nameZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamUnitsText: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            force_englishB: A_Boolean,
            unitsZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamProperties: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            flagsP: *mut AEGP_StreamFlags,
            minP0: *mut A_FpLong,
            maxP0: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_IsStreamTimevarying: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, is_timevaryingPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetStreamType: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, stream_typeP: *mut AEGP_StreamType) -> A_Err,
    >,
    pub AEGP_GetNewStreamValue: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            pre_expressionB: A_Boolean,
            valueP: *mut AEGP_StreamValue,
        ) -> A_Err,
    >,
    pub AEGP_DisposeStreamValue:
        ::std::option::Option<unsafe extern "C" fn(valueP: *mut AEGP_StreamValue) -> A_Err>,
    pub AEGP_SetStreamValue: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            valueP: *mut AEGP_StreamValue,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerStreamValue: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            which_stream: AEGP_LayerStream,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            pre_expressionB: A_Boolean,
            stream_valP: *mut AEGP_StreamVal,
            stream_typeP0: *mut AEGP_StreamType,
        ) -> A_Err,
    >,
    pub AEGP_GetExpressionState: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            enabledPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_SetExpressionState: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            enabledB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetExpression: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            expressionHZ: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_SetExpression: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            expressionP: *const A_char,
        ) -> A_Err,
    >,
    pub AEGP_DuplicateStreamRef: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            dup_streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_StreamSuite1 {
    pub AEGP_IsStreamLegal: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            which_stream: AEGP_LayerStream,
            is_legalP: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_CanVaryOverTime: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, can_varyPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetNewLayerStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            which_stream: AEGP_LayerStream,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectNumParamStreams: ::std::option::Option<
        unsafe extern "C" fn(effect_refH: AEGP_EffectRefH, num_paramsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetNewEffectStreamByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            effect_refH: AEGP_EffectRefH,
            param_index: PF_ParamIndex,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewMaskStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            mask_refH: AEGP_MaskRefH,
            which_stream: AEGP_MaskStream,
            mask_streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeStream:
        ::std::option::Option<unsafe extern "C" fn(streamH: AEGP_StreamRefH) -> A_Err>,
    pub AEGP_GetStreamName: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            force_englishB: A_Boolean,
            nameZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamUnitsText: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            force_englishB: A_Boolean,
            unitsZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamProperties: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            flagsP: *mut AEGP_StreamFlags,
            minP0: *mut A_FpLong,
            maxP0: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_IsStreamTimevarying: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, is_timevaryingPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetStreamType: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, stream_typeP: *mut AEGP_StreamType) -> A_Err,
    >,
    pub AEGP_GetNewStreamValue: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            pre_expressionB: A_Boolean,
            valueP: *mut AEGP_StreamValue,
        ) -> A_Err,
    >,
    pub AEGP_DisposeStreamValue:
        ::std::option::Option<unsafe extern "C" fn(valueP: *mut AEGP_StreamValue) -> A_Err>,
    pub AEGP_SetStreamValue: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            valueP: *mut AEGP_StreamValue,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerStreamValue: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            which_stream: AEGP_LayerStream,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            pre_expressionB: A_Boolean,
            stream_valP: *mut AEGP_StreamVal,
            stream_typeP0: *mut AEGP_StreamType,
        ) -> A_Err,
    >,
    pub AEGP_GetExpressionState: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            enabledPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_SetExpressionState: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            enabledB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetExpression: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            expressionHZ: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_SetExpression: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            expressionP: *const A_char,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_LayerSuite1 {
    pub AEGP_GetCompNumLayers: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, num_layersPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetCompLayerByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            layer_indexL: A_long,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetActiveLayer:
        ::std::option::Option<unsafe extern "C" fn(layerPH: *mut AEGP_LayerH) -> A_Err>,
    pub AEGP_GetLayerIndex: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_indexPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerSourceItem: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, source_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetLayerParentComp: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetLayerName: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            layer_nameZ0: *mut A_char,
            source_nameZ0: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerQuality: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, qualityP: *mut AEGP_LayerQuality) -> A_Err,
    >,
    pub AEGP_SetLayerQuality: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, quality: AEGP_LayerQuality) -> A_Err,
    >,
    pub AEGP_GetLayerFlags: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_flagsP: *mut AEGP_LayerFlags) -> A_Err,
    >,
    pub AEGP_SetLayerFlag: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            single_flag: AEGP_LayerFlags,
            valueB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsLayerVideoReallyOn: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, onPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsLayerAudioReallyOn: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, onPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetLayerCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            curr_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerInPoint: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            in_pointPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerDuration: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            durationPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerInPointAndDuration: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            in_pointPT: *const A_Time,
            durationPT: *const A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerOffset: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, offsetPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetLayerOffset: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, offsetPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetLayerStretch: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, stretchPRt: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_SetLayerStretch: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, stretchPRt: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_GetLayerTransferMode: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            transfer_modeP: *mut AEGP_LayerTransferMode,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerTransferMode: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            transfer_modeP: *const AEGP_LayerTransferMode,
        ) -> A_Err,
    >,
    pub AEGP_IsAddLayerValid: ::std::option::Option<
        unsafe extern "C" fn(
            item_to_addH: AEGP_ItemH,
            into_compH: AEGP_CompH,
            validPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_AddLayer: ::std::option::Option<
        unsafe extern "C" fn(
            item_to_addH: AEGP_ItemH,
            into_compH: AEGP_CompH,
            added_layerPH0: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_ReorderLayer: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_indexL: A_long) -> A_Err,
    >,
    pub AEGP_GetLayerMaskedBounds: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            boundsPR: *mut A_FloatRect,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerObjectType: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, object_type: *mut AEGP_ObjectType) -> A_Err,
    >,
    pub AEGP_IsLayer3D: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, is_3DPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsLayer2D: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, is_2DPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsVideoActive: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            is_activePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsLayerUsedAsTrackMatte: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            fill_must_be_activeB: A_Boolean,
            is_track_mattePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_DoesLayerHaveTrackMatte: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, has_track_mattePB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_ConvertCompToLayerTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            comp_timeP: *const A_Time,
            layer_timeP: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerDancingRandValue: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            comp_timePT: *const A_Time,
            rand_valuePL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerID: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, id_valP: *mut AEGP_LayerIDVal) -> A_Err,
    >,
    pub AEGP_GetLayerToWorldXform: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            comp_timeP: *const A_Time,
            tranform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerToWorldXformFromView: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            view_timeP: *const A_Time,
            comp_timeP: *const A_Time,
            tranform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerName: ::std::option::Option<
        unsafe extern "C" fn(aegp_layerH: AEGP_LayerH, new_nameZ: *const A_char) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_LayerSuite2 {
    pub AEGP_GetCompNumLayers: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, num_layersPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetCompLayerByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            compH: AEGP_CompH,
            layer_indexL: A_long,
            layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetActiveLayer:
        ::std::option::Option<unsafe extern "C" fn(layerPH: *mut AEGP_LayerH) -> A_Err>,
    pub AEGP_GetLayerIndex: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_indexPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerSourceItem: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, source_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetLayerParentComp: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_GetLayerName: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            layer_nameZ0: *mut A_char,
            source_nameZ0: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerQuality: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, qualityP: *mut AEGP_LayerQuality) -> A_Err,
    >,
    pub AEGP_SetLayerQuality: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, quality: AEGP_LayerQuality) -> A_Err,
    >,
    pub AEGP_GetLayerFlags: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_flagsP: *mut AEGP_LayerFlags) -> A_Err,
    >,
    pub AEGP_SetLayerFlag: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            single_flag: AEGP_LayerFlags,
            valueB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsLayerVideoReallyOn: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, onPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsLayerAudioReallyOn: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, onPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetLayerCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            curr_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerInPoint: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            in_pointPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerDuration: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            durationPT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerInPointAndDuration: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            in_pointPT: *const A_Time,
            durationPT: *const A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerOffset: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, offsetPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetLayerOffset: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, offsetPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetLayerStretch: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, stretchPRt: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_SetLayerStretch: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, stretchPRt: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_GetLayerTransferMode: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            transfer_modeP: *mut AEGP_LayerTransferMode,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerTransferMode: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            transfer_modeP: *const AEGP_LayerTransferMode,
        ) -> A_Err,
    >,
    pub AEGP_IsAddLayerValid: ::std::option::Option<
        unsafe extern "C" fn(
            item_to_addH: AEGP_ItemH,
            into_compH: AEGP_CompH,
            validPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_AddLayer: ::std::option::Option<
        unsafe extern "C" fn(
            item_to_addH: AEGP_ItemH,
            into_compH: AEGP_CompH,
            added_layerPH0: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_ReorderLayer: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, layer_indexL: A_long) -> A_Err,
    >,
    pub AEGP_GetLayerMaskedBounds: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            boundsPR: *mut A_FloatRect,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerObjectType: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, object_type: *mut AEGP_ObjectType) -> A_Err,
    >,
    pub AEGP_IsLayer3D: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, is_3DPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsLayer2D: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, is_2DPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_IsVideoActive: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            is_activePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsLayerUsedAsTrackMatte: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            fill_must_be_activeB: A_Boolean,
            is_track_mattePB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_DoesLayerHaveTrackMatte: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, has_track_mattePB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_ConvertCompToLayerTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            comp_timePT: *const A_Time,
            layer_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_ConvertLayerToCompTime: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            layer_timePT: *const A_Time,
            comp_timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerDancingRandValue: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            comp_timePT: *const A_Time,
            rand_valuePL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerID: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, id_valP: *mut AEGP_LayerIDVal) -> A_Err,
    >,
    pub AEGP_GetLayerToWorldXform: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            comp_timeP: *const A_Time,
            tranform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_GetLayerToWorldXformFromView: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            view_timeP: *const A_Time,
            comp_timeP: *const A_Time,
            tranform: *mut A_Matrix4,
        ) -> A_Err,
    >,
    pub AEGP_SetLayerName: ::std::option::Option<
        unsafe extern "C" fn(aegp_layerH: AEGP_LayerH, new_nameZ: *const A_char) -> A_Err,
    >,
    pub AEGP_GetLayerParent: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, parent_layerPH: *mut AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_SetLayerParent: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, parent_layerH: AEGP_LayerH) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_EffectSuite1 {
    pub AEGP_GetLayerNumEffects: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, num_effectsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerEffectByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            layer_effect_indexL: AEGP_EffectIndex,
            effectPH: *mut AEGP_EffectRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetInstalledKeyFromLayerEffect: ::std::option::Option<
        unsafe extern "C" fn(
            effect_refH: AEGP_EffectRefH,
            installed_effect_keyP: *mut AEGP_InstalledEffectKey,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectParamUnionByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            effect_refH: AEGP_EffectRefH,
            param_index: PF_ParamIndex,
            param_typeP: *mut PF_ParamType,
            uP0: *mut PF_ParamDefUnion,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectFlags: ::std::option::Option<
        unsafe extern "C" fn(
            effect_refH: AEGP_EffectRefH,
            effect_flagsP: *mut AEGP_EffectFlags,
        ) -> A_Err,
    >,
    pub AEGP_SetEffectFlags: ::std::option::Option<
        unsafe extern "C" fn(
            effect_refH: AEGP_EffectRefH,
            effect_flags_set_mask: AEGP_EffectFlags,
            effect_flags: AEGP_EffectFlags,
        ) -> A_Err,
    >,
    pub AEGP_ReorderEffect: ::std::option::Option<
        unsafe extern "C" fn(effect_refH: AEGP_EffectRefH, effect_indexL: A_long) -> A_Err,
    >,
    pub AEGP_EffectCallGeneric: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            effect_refH: AEGP_EffectRefH,
            timePT: *const A_Time,
            effect_extraPV: *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_DisposeEffect:
        ::std::option::Option<unsafe extern "C" fn(effect_refH: AEGP_EffectRefH) -> A_Err>,
    pub AEGP_ApplyEffect: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            installed_effect_key: AEGP_InstalledEffectKey,
            effect_refPH: *mut AEGP_EffectRefH,
        ) -> A_Err,
    >,
    pub AEGP_DeleteLayerEffect:
        ::std::option::Option<unsafe extern "C" fn(effect_refH: AEGP_EffectRefH) -> A_Err>,
    pub AEGP_GetNumInstalledEffects:
        ::std::option::Option<unsafe extern "C" fn(num_installed_effectsPL: *mut A_long) -> A_Err>,
    pub AEGP_GetNextInstalledEffect: ::std::option::Option<
        unsafe extern "C" fn(
            installed_effect_key: AEGP_InstalledEffectKey,
            next_effectPH: *mut AEGP_InstalledEffectKey,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectName: ::std::option::Option<
        unsafe extern "C" fn(
            installed_effect_key: AEGP_InstalledEffectKey,
            nameZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectMatchName: ::std::option::Option<
        unsafe extern "C" fn(
            installed_effect_key: AEGP_InstalledEffectKey,
            match_nameZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectCategory: ::std::option::Option<
        unsafe extern "C" fn(
            installed_effect_key: AEGP_InstalledEffectKey,
            categoryZ: *mut A_char,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_EffectSuite2 {
    pub AEGP_GetLayerNumEffects: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, num_effectsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerEffectByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            layer_effect_indexL: AEGP_EffectIndex,
            effectPH: *mut AEGP_EffectRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetInstalledKeyFromLayerEffect: ::std::option::Option<
        unsafe extern "C" fn(
            effect_refH: AEGP_EffectRefH,
            installed_effect_keyP: *mut AEGP_InstalledEffectKey,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectParamUnionByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            effect_refH: AEGP_EffectRefH,
            param_index: PF_ParamIndex,
            param_typeP: *mut PF_ParamType,
            uP0: *mut PF_ParamDefUnion,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectFlags: ::std::option::Option<
        unsafe extern "C" fn(
            effect_refH: AEGP_EffectRefH,
            effect_flagsP: *mut AEGP_EffectFlags,
        ) -> A_Err,
    >,
    pub AEGP_SetEffectFlags: ::std::option::Option<
        unsafe extern "C" fn(
            effect_refH: AEGP_EffectRefH,
            effect_flags_set_mask: AEGP_EffectFlags,
            effect_flags: AEGP_EffectFlags,
        ) -> A_Err,
    >,
    pub AEGP_ReorderEffect: ::std::option::Option<
        unsafe extern "C" fn(effect_refH: AEGP_EffectRefH, effect_indexL: A_long) -> A_Err,
    >,
    pub AEGP_EffectCallGeneric: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            effect_refH: AEGP_EffectRefH,
            timePT: *const A_Time,
            effect_extraPV: *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_DisposeEffect:
        ::std::option::Option<unsafe extern "C" fn(effect_refH: AEGP_EffectRefH) -> A_Err>,
    pub AEGP_ApplyEffect: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            installed_effect_key: AEGP_InstalledEffectKey,
            effect_refPH: *mut AEGP_EffectRefH,
        ) -> A_Err,
    >,
    pub AEGP_DeleteLayerEffect:
        ::std::option::Option<unsafe extern "C" fn(effect_refH: AEGP_EffectRefH) -> A_Err>,
    pub AEGP_GetNumInstalledEffects:
        ::std::option::Option<unsafe extern "C" fn(num_installed_effectsPL: *mut A_long) -> A_Err>,
    pub AEGP_GetNextInstalledEffect: ::std::option::Option<
        unsafe extern "C" fn(
            installed_effect_key: AEGP_InstalledEffectKey,
            next_effectPH: *mut AEGP_InstalledEffectKey,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectName: ::std::option::Option<
        unsafe extern "C" fn(
            installed_effect_key: AEGP_InstalledEffectKey,
            nameZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectMatchName: ::std::option::Option<
        unsafe extern "C" fn(
            installed_effect_key: AEGP_InstalledEffectKey,
            match_nameZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectCategory: ::std::option::Option<
        unsafe extern "C" fn(
            installed_effect_key: AEGP_InstalledEffectKey,
            categoryZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_DuplicateEffect: ::std::option::Option<
        unsafe extern "C" fn(
            original_effect_refH: AEGP_EffectRefH,
            duplicate_effect_refPH: *mut AEGP_EffectRefH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_EffectSuite3 {
    pub AEGP_GetLayerNumEffects: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, num_effectsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerEffectByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            layer_effect_indexL: AEGP_EffectIndex,
            effectPH: *mut AEGP_EffectRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetInstalledKeyFromLayerEffect: ::std::option::Option<
        unsafe extern "C" fn(
            effect_refH: AEGP_EffectRefH,
            installed_effect_keyP: *mut AEGP_InstalledEffectKey,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectParamUnionByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            effect_refH: AEGP_EffectRefH,
            param_index: PF_ParamIndex,
            param_typeP: *mut PF_ParamType,
            uP0: *mut PF_ParamDefUnion,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectFlags: ::std::option::Option<
        unsafe extern "C" fn(
            effect_refH: AEGP_EffectRefH,
            effect_flagsP: *mut AEGP_EffectFlags,
        ) -> A_Err,
    >,
    pub AEGP_SetEffectFlags: ::std::option::Option<
        unsafe extern "C" fn(
            effect_refH: AEGP_EffectRefH,
            effect_flags_set_mask: AEGP_EffectFlags,
            effect_flags: AEGP_EffectFlags,
        ) -> A_Err,
    >,
    pub AEGP_ReorderEffect: ::std::option::Option<
        unsafe extern "C" fn(effect_refH: AEGP_EffectRefH, effect_indexL: A_long) -> A_Err,
    >,
    #[doc = " new command parameter addded. To get old behaviour pass in PF_Cmd_COMPLETELY_GENERAL for effect_command"]
    pub AEGP_EffectCallGeneric: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            effect_refH: AEGP_EffectRefH,
            timePT: *const A_Time,
            effect_cmd: PF_Cmd,
            effect_extraPV: *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_DisposeEffect:
        ::std::option::Option<unsafe extern "C" fn(effect_refH: AEGP_EffectRefH) -> A_Err>,
    pub AEGP_ApplyEffect: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            installed_effect_key: AEGP_InstalledEffectKey,
            effect_refPH: *mut AEGP_EffectRefH,
        ) -> A_Err,
    >,
    pub AEGP_DeleteLayerEffect:
        ::std::option::Option<unsafe extern "C" fn(effect_refH: AEGP_EffectRefH) -> A_Err>,
    pub AEGP_GetNumInstalledEffects:
        ::std::option::Option<unsafe extern "C" fn(num_installed_effectsPL: *mut A_long) -> A_Err>,
    pub AEGP_GetNextInstalledEffect: ::std::option::Option<
        unsafe extern "C" fn(
            installed_effect_key: AEGP_InstalledEffectKey,
            next_effectPH: *mut AEGP_InstalledEffectKey,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectName: ::std::option::Option<
        unsafe extern "C" fn(
            installed_effect_key: AEGP_InstalledEffectKey,
            nameZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectMatchName: ::std::option::Option<
        unsafe extern "C" fn(
            installed_effect_key: AEGP_InstalledEffectKey,
            match_nameZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectCategory: ::std::option::Option<
        unsafe extern "C" fn(
            installed_effect_key: AEGP_InstalledEffectKey,
            categoryZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_DuplicateEffect: ::std::option::Option<
        unsafe extern "C" fn(
            original_effect_refH: AEGP_EffectRefH,
            duplicate_effect_refPH: *mut AEGP_EffectRefH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_EffectSuite4 {
    pub AEGP_GetLayerNumEffects: ::std::option::Option<
        unsafe extern "C" fn(layerH: AEGP_LayerH, num_effectsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerEffectByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            layer_effect_indexL: AEGP_EffectIndex,
            effectPH: *mut AEGP_EffectRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetInstalledKeyFromLayerEffect: ::std::option::Option<
        unsafe extern "C" fn(
            effect_refH: AEGP_EffectRefH,
            installed_effect_keyP: *mut AEGP_InstalledEffectKey,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectParamUnionByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            effect_refH: AEGP_EffectRefH,
            param_index: PF_ParamIndex,
            param_typeP: *mut PF_ParamType,
            uP0: *mut PF_ParamDefUnion,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectFlags: ::std::option::Option<
        unsafe extern "C" fn(
            effect_refH: AEGP_EffectRefH,
            effect_flagsP: *mut AEGP_EffectFlags,
        ) -> A_Err,
    >,
    pub AEGP_SetEffectFlags: ::std::option::Option<
        unsafe extern "C" fn(
            effect_refH: AEGP_EffectRefH,
            effect_flags_set_mask: AEGP_EffectFlags,
            effect_flags: AEGP_EffectFlags,
        ) -> A_Err,
    >,
    pub AEGP_ReorderEffect: ::std::option::Option<
        unsafe extern "C" fn(effect_refH: AEGP_EffectRefH, effect_indexL: A_long) -> A_Err,
    >,
    #[doc = " new command parameter addded. To get old behaviour pass in PF_Cmd_COMPLETELY_GENERAL for effect_command"]
    pub AEGP_EffectCallGeneric: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            effect_refH: AEGP_EffectRefH,
            timePT: *const A_Time,
            effect_cmd: PF_Cmd,
            effect_extraPV: *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_DisposeEffect:
        ::std::option::Option<unsafe extern "C" fn(effect_refH: AEGP_EffectRefH) -> A_Err>,
    pub AEGP_ApplyEffect: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            installed_effect_key: AEGP_InstalledEffectKey,
            effect_refPH: *mut AEGP_EffectRefH,
        ) -> A_Err,
    >,
    pub AEGP_DeleteLayerEffect:
        ::std::option::Option<unsafe extern "C" fn(effect_refH: AEGP_EffectRefH) -> A_Err>,
    pub AEGP_GetNumInstalledEffects:
        ::std::option::Option<unsafe extern "C" fn(num_installed_effectsPL: *mut A_long) -> A_Err>,
    pub AEGP_GetNextInstalledEffect: ::std::option::Option<
        unsafe extern "C" fn(
            installed_effect_key: AEGP_InstalledEffectKey,
            next_effectPH: *mut AEGP_InstalledEffectKey,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectName: ::std::option::Option<
        unsafe extern "C" fn(
            installed_effect_key: AEGP_InstalledEffectKey,
            nameZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectMatchName: ::std::option::Option<
        unsafe extern "C" fn(
            installed_effect_key: AEGP_InstalledEffectKey,
            utf8_match_nameZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetEffectCategory: ::std::option::Option<
        unsafe extern "C" fn(
            installed_effect_key: AEGP_InstalledEffectKey,
            categoryZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_DuplicateEffect: ::std::option::Option<
        unsafe extern "C" fn(
            original_effect_refH: AEGP_EffectRefH,
            duplicate_effect_refPH: *mut AEGP_EffectRefH,
        ) -> A_Err,
    >,
    #[doc = " new in AE 13.0: effect masks"]
    pub AEGP_NumEffectMask: ::std::option::Option<
        unsafe extern "C" fn(effect_refH: AEGP_EffectRefH, num_masksPL: *mut A_u_long) -> A_Err,
    >,
    pub AEGP_GetEffectMaskID: ::std::option::Option<
        unsafe extern "C" fn(
            effect_refH: AEGP_EffectRefH,
            mask_indexL: A_u_long,
            id_valP: *mut AEGP_MaskIDVal,
        ) -> A_Err,
    >,
    pub AEGP_AddEffectMask: ::std::option::Option<
        unsafe extern "C" fn(
            effect_refH: AEGP_EffectRefH,
            id_val: AEGP_MaskIDVal,
            streamPH0: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_RemoveEffectMask: ::std::option::Option<
        unsafe extern "C" fn(effect_refH: AEGP_EffectRefH, id_val: AEGP_MaskIDVal) -> A_Err,
    >,
    pub AEGP_SetEffectMask: ::std::option::Option<
        unsafe extern "C" fn(
            effect_refH: AEGP_EffectRefH,
            mask_indexL: A_u_long,
            id_val: AEGP_MaskIDVal,
            streamPH0: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_LightSuite1 {
    pub AEGP_GetLightType: ::std::option::Option<
        unsafe extern "C" fn(light_layerH: AEGP_LayerH, light_typeP: *mut AEGP_LightType) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_MaskSuite5 {
    pub AEGP_GetLayerNumMasks: ::std::option::Option<
        unsafe extern "C" fn(aegp_layerH: AEGP_LayerH, num_masksPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerMaskByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            mask_indexL: AEGP_MaskIndex,
            maskPH: *mut AEGP_MaskRefH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeMask:
        ::std::option::Option<unsafe extern "C" fn(mask_refH: AEGP_MaskRefH) -> A_Err>,
    pub AEGP_GetMaskInvert: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, invertPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetMaskInvert: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, invertB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetMaskMode: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, modeP: *mut PF_MaskMode) -> A_Err,
    >,
    pub AEGP_SetMaskMode: ::std::option::Option<
        unsafe extern "C" fn(maskH: AEGP_MaskRefH, mode: PF_MaskMode) -> A_Err,
    >,
    pub AEGP_GetMaskMotionBlurState: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, blur_stateP: *mut AEGP_MaskMBlur) -> A_Err,
    >,
    pub AEGP_SetMaskMotionBlurState: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, blur_state: AEGP_MaskMBlur) -> A_Err,
    >,
    pub AEGP_GetMaskID: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, id_valP: *mut AEGP_MaskIDVal) -> A_Err,
    >,
    pub AEGP_CreateNewMask: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            mask_refPH: *mut AEGP_MaskRefH,
            mask_indexPL0: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_DeleteMaskFromLayer:
        ::std::option::Option<unsafe extern "C" fn(mask_refH: AEGP_MaskRefH) -> A_Err>,
    pub AEGP_GetMaskColor: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, colorP: *mut AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_SetMaskColor: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, colorP: *const AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_GetMaskLockState: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, is_lockedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetMaskLockState: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, lockB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetMaskIsRotoBezier: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, is_roto_bezierPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetMaskIsRotoBezier: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, is_roto_bezierB: A_Boolean) -> A_Err,
    >,
    pub AEGP_DuplicateMask: ::std::option::Option<
        unsafe extern "C" fn(
            orig_mask_refH: AEGP_MaskRefH,
            duplicate_mask_refPH: *mut AEGP_MaskRefH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_MaskSuite4 {
    pub AEGP_GetLayerNumMasks: ::std::option::Option<
        unsafe extern "C" fn(aegp_layerH: AEGP_LayerH, num_masksPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerMaskByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            mask_indexL: AEGP_MaskIndex,
            maskPH: *mut AEGP_MaskRefH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeMask:
        ::std::option::Option<unsafe extern "C" fn(mask_refH: AEGP_MaskRefH) -> A_Err>,
    pub AEGP_GetMaskInvert: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, invertPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetMaskInvert: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, invertB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetMaskMode: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, modeP: *mut PF_MaskMode) -> A_Err,
    >,
    pub AEGP_SetMaskMode: ::std::option::Option<
        unsafe extern "C" fn(maskH: AEGP_MaskRefH, mode: PF_MaskMode) -> A_Err,
    >,
    pub AEGP_GetMaskMotionBlurState: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, blur_stateP: *mut AEGP_MaskMBlur) -> A_Err,
    >,
    pub AEGP_SetMaskMotionBlurState: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, blur_state: AEGP_MaskMBlur) -> A_Err,
    >,
    pub AEGP_GetMaskName: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, nameZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_SetMaskName: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, nameZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_GetMaskID: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, id_valP: *mut AEGP_MaskIDVal) -> A_Err,
    >,
    pub AEGP_CreateNewMask: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            mask_refPH: *mut AEGP_MaskRefH,
            mask_indexPL0: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_DeleteMaskFromLayer:
        ::std::option::Option<unsafe extern "C" fn(mask_refH: AEGP_MaskRefH) -> A_Err>,
    pub AEGP_GetMaskColor: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, colorP: *mut AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_SetMaskColor: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, colorP: *const AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_GetMaskLockState: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, is_lockedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetMaskLockState: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, lockB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetMaskIsRotoBezier: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, is_roto_bezierPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetMaskIsRotoBezier: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, is_roto_bezierB: A_Boolean) -> A_Err,
    >,
    pub AEGP_DuplicateMask: ::std::option::Option<
        unsafe extern "C" fn(
            orig_mask_refH: AEGP_MaskRefH,
            duplicate_mask_refPH: *mut AEGP_MaskRefH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_MaskSuite3 {
    pub AEGP_GetLayerNumMasks: ::std::option::Option<
        unsafe extern "C" fn(aegp_layerH: AEGP_LayerH, num_masksPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerMaskByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            mask_indexL: AEGP_MaskIndex,
            maskPH: *mut AEGP_MaskRefH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeMask:
        ::std::option::Option<unsafe extern "C" fn(mask_refH: AEGP_MaskRefH) -> A_Err>,
    pub AEGP_GetMaskInvert: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, invertPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetMaskInvert: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, invertB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetMaskMode: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, modeP: *mut PF_MaskMode) -> A_Err,
    >,
    pub AEGP_SetMaskMode: ::std::option::Option<
        unsafe extern "C" fn(maskH: AEGP_MaskRefH, mode: PF_MaskMode) -> A_Err,
    >,
    pub AEGP_GetMaskMotionBlurState: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, blur_stateP: *mut AEGP_MaskMBlur) -> A_Err,
    >,
    pub AEGP_SetMaskMotionBlurState: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, blur_state: AEGP_MaskMBlur) -> A_Err,
    >,
    pub AEGP_GetMaskName: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, nameZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_SetMaskName: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, nameZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_GetMaskID: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, id_valP: *mut AEGP_MaskIDVal) -> A_Err,
    >,
    pub AEGP_CreateNewMask: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            mask_refPH: *mut AEGP_MaskRefH,
            mask_indexPL0: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_DeleteMaskFromLayer:
        ::std::option::Option<unsafe extern "C" fn(mask_refH: AEGP_MaskRefH) -> A_Err>,
    pub AEGP_GetMaskColor: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, colorP: *mut AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_SetMaskColor: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, colorP: *const AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_GetMaskLockState: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, is_lockedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetMaskLockState: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, lockB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetMaskIsRotoBezier: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, is_roto_bezierPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetMaskIsRotoBezier: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, is_roto_bezierB: A_Boolean) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_MaskSuite1 {
    pub AEGP_GetLayerNumMasks: ::std::option::Option<
        unsafe extern "C" fn(aegp_layerH: AEGP_LayerH, num_masksPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerMaskByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            mask_indexL: AEGP_MaskIndex,
            maskPH: *mut AEGP_MaskRefH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeMask:
        ::std::option::Option<unsafe extern "C" fn(mask_refH: AEGP_MaskRefH) -> A_Err>,
    pub AEGP_GetMaskInvert: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, invertPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetMaskMode: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, modeP: *mut PF_MaskMode) -> A_Err,
    >,
    pub AEGP_GetMaskName: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, nameZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_GetMaskID: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, id_valP: *mut AEGP_MaskIDVal) -> A_Err,
    >,
    pub AEGP_CreateNewMask: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            mask_refPH: *mut AEGP_MaskRefH,
            mask_indexPL0: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_DeleteMaskFromLayer:
        ::std::option::Option<unsafe extern "C" fn(mask_refH: AEGP_MaskRefH) -> A_Err>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_MaskSuite2 {
    pub AEGP_GetLayerNumMasks: ::std::option::Option<
        unsafe extern "C" fn(aegp_layerH: AEGP_LayerH, num_masksPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetLayerMaskByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_layerH: AEGP_LayerH,
            mask_indexL: AEGP_MaskIndex,
            maskPH: *mut AEGP_MaskRefH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeMask:
        ::std::option::Option<unsafe extern "C" fn(mask_refH: AEGP_MaskRefH) -> A_Err>,
    pub AEGP_GetMaskInvert: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, invertPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetMaskInvert: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, invertB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetMaskMode: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, modeP: *mut PF_MaskMode) -> A_Err,
    >,
    pub AEGP_SetMaskMode: ::std::option::Option<
        unsafe extern "C" fn(maskH: AEGP_MaskRefH, mode: PF_MaskMode) -> A_Err,
    >,
    pub AEGP_GetMaskMotionBlurState: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, blur_stateP: *mut AEGP_MaskMBlur) -> A_Err,
    >,
    pub AEGP_SetMaskMotionBlurState: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, blur_state: AEGP_MaskMBlur) -> A_Err,
    >,
    pub AEGP_GetMaskName: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, nameZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_GetMaskID: ::std::option::Option<
        unsafe extern "C" fn(mask_refH: AEGP_MaskRefH, id_valP: *mut AEGP_MaskIDVal) -> A_Err,
    >,
    pub AEGP_CreateNewMask: ::std::option::Option<
        unsafe extern "C" fn(
            layerH: AEGP_LayerH,
            mask_refPH: *mut AEGP_MaskRefH,
            mask_indexPL0: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_DeleteMaskFromLayer:
        ::std::option::Option<unsafe extern "C" fn(mask_refH: AEGP_MaskRefH) -> A_Err>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CameraSuite1 {
    pub AEGP_GetCamera: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            comp_timeP: *const A_Time,
            camera_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_GetCameraType: ::std::option::Option<
        unsafe extern "C" fn(
            camera_layerH: AEGP_LayerH,
            camera_typeP: *mut AEGP_CameraType,
        ) -> A_Err,
    >,
    pub AEGP_GetDefaultCameraDistanceToImagePlane: ::std::option::Option<
        unsafe extern "C" fn(compH: AEGP_CompH, dist_to_planePF: *mut A_FpLong) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ItemSuite8 {
    pub AEGP_GetFirstProjItem: ::std::option::Option<
        unsafe extern "C" fn(projectH: AEGP_ProjectH, itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetNextProjItem: ::std::option::Option<
        unsafe extern "C" fn(
            projectH: AEGP_ProjectH,
            itemH: AEGP_ItemH,
            next_itemPH: *mut AEGP_ItemH,
        ) -> A_Err,
    >,
    pub AEGP_GetActiveItem:
        ::std::option::Option<unsafe extern "C" fn(itemPH: *mut AEGP_ItemH) -> A_Err>,
    pub AEGP_IsItemSelected: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, selectedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SelectItem: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            selectB: A_Boolean,
            deselect_othersB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetItemType: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_typeP: *mut AEGP_ItemType) -> A_Err,
    >,
    pub AEGP_GetTypeName: ::std::option::Option<
        unsafe extern "C" fn(item_type: AEGP_ItemType, nameZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_GetItemName: ::std::option::Option<
        unsafe extern "C" fn(
            pluginID: AEGP_PluginID,
            itemH: AEGP_ItemH,
            unicode_namePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_SetItemName: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, nameZ: *const A_UTF16Char) -> A_Err,
    >,
    pub AEGP_GetItemID: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_idPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetItemFlags: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_flagsP: *mut AEGP_ItemFlags) -> A_Err,
    >,
    pub AEGP_SetItemUseProxy: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, use_proxyB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetItemParentFolder: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, parent_folder_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_SetItemParentFolder: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, parent_folder_itemH: AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetItemDuration: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetItemCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, curr_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetItemDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            widthPL: *mut A_long,
            heightPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetItemPixelAspectRatio: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, pix_aspect_ratioPRt: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_DeleteItem: ::std::option::Option<unsafe extern "C" fn(itemH: AEGP_ItemH) -> A_Err>,
    pub AEGP_CreateNewFolder: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_UTF16Char,
            parent_folderH0: AEGP_ItemH,
            new_folderPH: *mut AEGP_ItemH,
        ) -> A_Err,
    >,
    pub AEGP_SetItemCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, new_timePT: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetItemCommentLength: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, buf_sizePLu: *mut A_u_long) -> A_Err,
    >,
    pub AEGP_GetItemComment: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            buf_sizeLu: A_u_long,
            commentZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_SetItemComment: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, commentZ: *const A_char) -> A_Err,
    >,
    pub AEGP_GetItemLabel: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, labelP: *mut AEGP_LabelID) -> A_Err,
    >,
    pub AEGP_SetItemLabel: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, label: AEGP_LabelID) -> A_Err,
    >,
    pub AEGP_GetItemMRUView: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, mru_viewP: *mut AEGP_ItemViewP) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ItemSuite7 {
    pub AEGP_GetFirstProjItem: ::std::option::Option<
        unsafe extern "C" fn(projectH: AEGP_ProjectH, itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetNextProjItem: ::std::option::Option<
        unsafe extern "C" fn(
            projectH: AEGP_ProjectH,
            itemH: AEGP_ItemH,
            next_itemPH: *mut AEGP_ItemH,
        ) -> A_Err,
    >,
    pub AEGP_GetActiveItem:
        ::std::option::Option<unsafe extern "C" fn(itemPH: *mut AEGP_ItemH) -> A_Err>,
    pub AEGP_IsItemSelected: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, selectedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SelectItem: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            selectB: A_Boolean,
            deselect_othersB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetItemType: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_typeP: *mut AEGP_ItemType) -> A_Err,
    >,
    pub AEGP_GetTypeName: ::std::option::Option<
        unsafe extern "C" fn(item_type: AEGP_ItemType, nameZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_GetItemName:
        ::std::option::Option<unsafe extern "C" fn(itemH: AEGP_ItemH, nameZ: *mut A_char) -> A_Err>,
    pub AEGP_SetItemName: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, nameZ: *const A_char) -> A_Err,
    >,
    pub AEGP_GetItemID: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_idPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetItemFlags: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_flagsP: *mut AEGP_ItemFlags) -> A_Err,
    >,
    pub AEGP_SetItemUseProxy: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, use_proxyB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetItemParentFolder: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, parent_folder_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_SetItemParentFolder: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, parent_folder_itemH: AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetItemDuration: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetItemCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, curr_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetItemDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            widthPL: *mut A_long,
            heightPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetItemPixelAspectRatio: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, pix_aspect_ratioPRt: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_DeleteItem: ::std::option::Option<unsafe extern "C" fn(itemH: AEGP_ItemH) -> A_Err>,
    pub AEGP_CreateNewFolder: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            parent_folderH0: AEGP_ItemH,
            new_folderPH: *mut AEGP_ItemH,
        ) -> A_Err,
    >,
    pub AEGP_SetItemCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, new_timePT: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetItemCommentLength: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, buf_sizePLu: *mut A_u_long) -> A_Err,
    >,
    pub AEGP_GetItemComment: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            buf_sizeLu: A_u_long,
            commentZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_SetItemComment: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, commentZ: *const A_char) -> A_Err,
    >,
    pub AEGP_GetItemLabel: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, labelP: *mut AEGP_LabelID) -> A_Err,
    >,
    pub AEGP_SetItemLabel: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, label: AEGP_LabelID) -> A_Err,
    >,
    pub AEGP_GetItemMRUView: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, mru_viewP: *mut AEGP_ItemViewP) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ItemSuite6 {
    pub AEGP_GetFirstProjItem: ::std::option::Option<
        unsafe extern "C" fn(projectH: AEGP_ProjectH, itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetNextProjItem: ::std::option::Option<
        unsafe extern "C" fn(
            projectH: AEGP_ProjectH,
            itemH: AEGP_ItemH,
            next_itemPH: *mut AEGP_ItemH,
        ) -> A_Err,
    >,
    pub AEGP_GetActiveItem:
        ::std::option::Option<unsafe extern "C" fn(itemPH: *mut AEGP_ItemH) -> A_Err>,
    pub AEGP_IsItemSelected: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, selectedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SelectItem: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            selectB: A_Boolean,
            deselect_othersB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetItemType: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_typeP: *mut AEGP_ItemType) -> A_Err,
    >,
    pub AEGP_GetTypeName: ::std::option::Option<
        unsafe extern "C" fn(item_type: AEGP_ItemType, nameZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_GetItemName:
        ::std::option::Option<unsafe extern "C" fn(itemH: AEGP_ItemH, nameZ: *mut A_char) -> A_Err>,
    pub AEGP_SetItemName: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, nameZ: *const A_char) -> A_Err,
    >,
    pub AEGP_GetItemID: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_idPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetItemFlags: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_flagsP: *mut AEGP_ItemFlags) -> A_Err,
    >,
    pub AEGP_SetItemUseProxy: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, use_proxyB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetItemParentFolder: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, parent_folder_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_SetItemParentFolder: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, parent_folder_itemH: AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetItemDuration: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetItemCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, curr_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetItemDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            widthPL: *mut A_long,
            heightPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetItemPixelAspectRatio: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, pix_aspect_ratioPRt: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_DeleteItem: ::std::option::Option<unsafe extern "C" fn(itemH: AEGP_ItemH) -> A_Err>,
    pub AEGP_CreateNewFolder: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            parent_folderH0: AEGP_ItemH,
            new_folderPH: *mut AEGP_ItemH,
        ) -> A_Err,
    >,
    pub AEGP_SetItemCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, new_timePT: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetItemCommentLength: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, buf_sizePLu: *mut A_u_long) -> A_Err,
    >,
    pub AEGP_GetItemComment: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            buf_sizeLu: A_u_long,
            commentZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_SetItemComment: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, commentZ: *const A_char) -> A_Err,
    >,
    pub AEGP_GetItemLabel: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, labelP: *mut AEGP_LabelID) -> A_Err,
    >,
    pub AEGP_SetItemLabel: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, label: AEGP_LabelID) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ItemSuite5 {
    pub AEGP_GetNextItem: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, next_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetActiveItem:
        ::std::option::Option<unsafe extern "C" fn(itemPH: *mut AEGP_ItemH) -> A_Err>,
    pub AEGP_IsItemSelected: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, selectedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SelectItem: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            selectB: A_Boolean,
            deselect_othersB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetItemType: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_typeP: *mut AEGP_ItemType) -> A_Err,
    >,
    pub AEGP_GetTypeName: ::std::option::Option<
        unsafe extern "C" fn(item_type: AEGP_ItemType, nameZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_GetItemName:
        ::std::option::Option<unsafe extern "C" fn(itemH: AEGP_ItemH, nameZ: *mut A_char) -> A_Err>,
    pub AEGP_GetItemID: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_idPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetItemFlags: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_flagsP: *mut AEGP_ItemFlags) -> A_Err,
    >,
    pub AEGP_SetItemUseProxy: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, use_proxyB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetItemParentFolder: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, parent_folder_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_SetItemParentFolder: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, parent_folder_itemH: AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetItemDuration: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetItemCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, curr_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetItemDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            widthPL: *mut A_long,
            heightPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetItemPixelAspectRatio: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, pix_aspect_ratioPRt: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_DeleteItem: ::std::option::Option<unsafe extern "C" fn(itemH: AEGP_ItemH) -> A_Err>,
    pub AEGP_CreateNewFolder: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            parent_folderH0: AEGP_ItemH,
            new_folderPH: *mut AEGP_ItemH,
        ) -> A_Err,
    >,
    pub AEGP_SetItemCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, new_timePT: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetItemCommentLength: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, buf_sizePLu: *mut A_u_long) -> A_Err,
    >,
    pub AEGP_GetItemComment: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            buf_sizeLu: A_u_long,
            commentZ: *mut ::std::os::raw::c_char,
        ) -> A_Err,
    >,
    pub AEGP_SetItemComment: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, commentZ: *const ::std::os::raw::c_char) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ItemSuite4 {
    pub AEGP_GetNextItem: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, next_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetActiveItem:
        ::std::option::Option<unsafe extern "C" fn(itemPH: *mut AEGP_ItemH) -> A_Err>,
    pub AEGP_IsItemSelected: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, selectedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SelectItem: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            selectB: A_Boolean,
            deselect_othersB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetItemType: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_typeP: *mut AEGP_ItemType) -> A_Err,
    >,
    pub AEGP_GetTypeName: ::std::option::Option<
        unsafe extern "C" fn(item_type: AEGP_ItemType, nameZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_GetItemName:
        ::std::option::Option<unsafe extern "C" fn(itemH: AEGP_ItemH, nameZ: *mut A_char) -> A_Err>,
    pub AEGP_GetItemID: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_idPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetItemFlags: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_flagsP: *mut AEGP_ItemFlags) -> A_Err,
    >,
    pub AEGP_SetItemUseProxy: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, use_proxyB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetItemParentFolder: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, parent_folder_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetItemDuration: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetItemCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, curr_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetItemDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            widthPL: *mut A_long,
            heightPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetItemPixelAspectRatio: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, pix_aspect_ratioPRt: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_DeleteItem: ::std::option::Option<unsafe extern "C" fn(itemH: AEGP_ItemH) -> A_Err>,
    pub AEGP_CreateNewFolder: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            parent_folderH0: AEGP_ItemH,
            new_folderPH: *mut AEGP_ItemH,
        ) -> A_Err,
    >,
    pub AEGP_SetItemCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, new_timePT: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetItemCommentLength: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, buf_sizePLu: *mut A_u_long) -> A_Err,
    >,
    pub AEGP_GetItemComment: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            buf_sizeLu: A_u_long,
            commentZ: *mut ::std::os::raw::c_char,
        ) -> A_Err,
    >,
    pub AEGP_SetItemComment: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, commentZ: *const ::std::os::raw::c_char) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ItemSuite3 {
    pub AEGP_GetNextItem: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, next_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetActiveItem:
        ::std::option::Option<unsafe extern "C" fn(itemPH: *mut AEGP_ItemH) -> A_Err>,
    pub AEGP_IsItemSelected: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, selectedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SelectItem: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            selectB: A_Boolean,
            deselect_othersB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetItemType: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_typeP: *mut AEGP_ItemType) -> A_Err,
    >,
    pub AEGP_GetTypeName: ::std::option::Option<
        unsafe extern "C" fn(item_type: AEGP_ItemType, nameZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_GetItemName:
        ::std::option::Option<unsafe extern "C" fn(itemH: AEGP_ItemH, nameZ: *mut A_char) -> A_Err>,
    pub AEGP_GetItemID: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_idPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetItemFlags: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_flagsP: *mut AEGP_ItemFlags) -> A_Err,
    >,
    pub AEGP_SetItemUseProxy: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, use_proxyB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetItemParentFolder: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, parent_folder_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetItemDuration: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetItemCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, curr_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetItemDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            widthPL: *mut A_long,
            heightPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetItemPixelAspectRatio: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, pix_aspect_ratioPRt: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_DeleteItem: ::std::option::Option<unsafe extern "C" fn(itemH: AEGP_ItemH) -> A_Err>,
    pub AEGP_GetItemSolidColor: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, colorP: *mut AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_SetSolidColor: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, color: AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_SetSolidDimensions: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, widthS: A_short, heightS: A_short) -> A_Err,
    >,
    pub AEGP_CreateNewFolder: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            parent_folderH0: AEGP_ItemH,
            new_folderPH: *mut AEGP_ItemH,
        ) -> A_Err,
    >,
    pub AEGP_SetItemCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, new_timePT: *const A_Time) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_KeyframeSuite4 {
    pub AEGP_GetStreamNumKFs: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, num_kfsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetKeyframeTime: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            time_mode: AEGP_LTimeMode,
            timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_InsertKeyframe: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            key_indexP: *mut AEGP_KeyframeIndex,
        ) -> A_Err,
    >,
    pub AEGP_DeleteKeyframe: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, key_index: AEGP_KeyframeIndex) -> A_Err,
    >,
    pub AEGP_GetNewKeyframeValue: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            valueP: *mut AEGP_StreamValue2,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeValue: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            valueP: *const AEGP_StreamValue2,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamValueDimensionality: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, value_dimPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_GetStreamTemporalDimensionality: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, temporal_dimPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_GetNewKeyframeSpatialTangents: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            in_tanP0: *mut AEGP_StreamValue2,
            out_tanP0: *mut AEGP_StreamValue2,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeSpatialTangents: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            in_tanP0: *const AEGP_StreamValue2,
            out_tanP0: *const AEGP_StreamValue2,
        ) -> A_Err,
    >,
    pub AEGP_GetKeyframeTemporalEase: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            dimensionL: A_long,
            in_easeP0: *mut AEGP_KeyframeEase,
            out_easeP0: *mut AEGP_KeyframeEase,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeTemporalEase: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            dimensionL: A_long,
            in_easeP0: *const AEGP_KeyframeEase,
            out_easeP0: *const AEGP_KeyframeEase,
        ) -> A_Err,
    >,
    pub AEGP_GetKeyframeFlags: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            flagsP: *mut AEGP_KeyframeFlags,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeFlag: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            flag: AEGP_KeyframeFlags,
            true_falseB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetKeyframeInterpolation: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            in_interpP0: *mut AEGP_KeyframeInterpolationType,
            out_interpP0: *mut AEGP_KeyframeInterpolationType,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeInterpolation: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            in_interp: AEGP_KeyframeInterpolationType,
            out_interp: AEGP_KeyframeInterpolationType,
        ) -> A_Err,
    >,
    pub AEGP_StartAddKeyframes: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, akPH: *mut AEGP_AddKeyframesInfoH) -> A_Err,
    >,
    pub AEGP_AddKeyframes: ::std::option::Option<
        unsafe extern "C" fn(
            akH: AEGP_AddKeyframesInfoH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            key_indexPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_SetAddKeyframe: ::std::option::Option<
        unsafe extern "C" fn(
            akH: AEGP_AddKeyframesInfoH,
            key_indexL: A_long,
            valueP: *const AEGP_StreamValue2,
        ) -> A_Err,
    >,
    pub AEGP_EndAddKeyframes: ::std::option::Option<
        unsafe extern "C" fn(addB: A_Boolean, akH: AEGP_AddKeyframesInfoH) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_KeyframeSuite3 {
    pub AEGP_GetStreamNumKFs: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, num_kfsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetKeyframeTime: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            time_mode: AEGP_LTimeMode,
            timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_InsertKeyframe: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            key_indexP: *mut AEGP_KeyframeIndex,
        ) -> A_Err,
    >,
    pub AEGP_DeleteKeyframe: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, key_index: AEGP_KeyframeIndex) -> A_Err,
    >,
    pub AEGP_GetNewKeyframeValue: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            valueP: *mut AEGP_StreamValue,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeValue: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            valueP: *const AEGP_StreamValue,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamValueDimensionality: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, value_dimPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_GetStreamTemporalDimensionality: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, temporal_dimPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_GetNewKeyframeSpatialTangents: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            in_tanP0: *mut AEGP_StreamValue,
            out_tanP0: *mut AEGP_StreamValue,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeSpatialTangents: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            in_tanP0: *const AEGP_StreamValue,
            out_tanP0: *const AEGP_StreamValue,
        ) -> A_Err,
    >,
    pub AEGP_GetKeyframeTemporalEase: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            dimensionL: A_long,
            in_easeP0: *mut AEGP_KeyframeEase,
            out_easeP0: *mut AEGP_KeyframeEase,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeTemporalEase: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            dimensionL: A_long,
            in_easeP0: *const AEGP_KeyframeEase,
            out_easeP0: *const AEGP_KeyframeEase,
        ) -> A_Err,
    >,
    pub AEGP_GetKeyframeFlags: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            flagsP: *mut AEGP_KeyframeFlags,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeFlag: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            flag: AEGP_KeyframeFlags,
            true_falseB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetKeyframeInterpolation: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            in_interpP0: *mut AEGP_KeyframeInterpolationType,
            out_interpP0: *mut AEGP_KeyframeInterpolationType,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeInterpolation: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            in_interp: AEGP_KeyframeInterpolationType,
            out_interp: AEGP_KeyframeInterpolationType,
        ) -> A_Err,
    >,
    pub AEGP_StartAddKeyframes: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, akPH: *mut AEGP_AddKeyframesInfoH) -> A_Err,
    >,
    pub AEGP_AddKeyframes: ::std::option::Option<
        unsafe extern "C" fn(
            akH: AEGP_AddKeyframesInfoH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            key_indexPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_SetAddKeyframe: ::std::option::Option<
        unsafe extern "C" fn(
            akH: AEGP_AddKeyframesInfoH,
            key_indexL: A_long,
            valueP: *const AEGP_StreamValue,
        ) -> A_Err,
    >,
    pub AEGP_EndAddKeyframes: ::std::option::Option<
        unsafe extern "C" fn(addB: A_Boolean, akH: AEGP_AddKeyframesInfoH) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_KeyframeSuite2 {
    pub AEGP_GetStreamNumKFs: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, num_kfsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetKeyframeTime: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            time_mode: AEGP_LTimeMode,
            timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_InsertKeyframe: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            key_indexP: *mut AEGP_KeyframeIndex,
        ) -> A_Err,
    >,
    pub AEGP_DeleteKeyframe: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, key_index: AEGP_KeyframeIndex) -> A_Err,
    >,
    pub AEGP_GetNewKeyframeValue: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            valueP: *mut AEGP_StreamValue,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeValue: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            valueP: *const AEGP_StreamValue,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamValueDimensionality: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, value_dimPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_GetStreamTemporalDimensionality: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, temporal_dimPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_GetNewKeyframeSpatialTangents: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            in_tanP0: *mut AEGP_StreamValue,
            out_tanP0: *mut AEGP_StreamValue,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeSpatialTangents: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            in_tanP0: *const AEGP_StreamValue,
            out_tanP0: *const AEGP_StreamValue,
        ) -> A_Err,
    >,
    pub AEGP_GetKeyframeTemporalEase: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            dimensionL: A_long,
            in_easeP0: *mut AEGP_KeyframeEase,
            out_easeP0: *mut AEGP_KeyframeEase,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeTemporalEase: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            dimensionL: A_long,
            in_easeP0: *const AEGP_KeyframeEase,
            out_easeP0: *const AEGP_KeyframeEase,
        ) -> A_Err,
    >,
    pub AEGP_GetKeyframeFlags: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            flagsP: *mut AEGP_KeyframeFlags,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeFlag: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            flag: AEGP_KeyframeFlags,
            true_falseB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetKeyframeInterpolation: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            in_interpP0: *mut AEGP_KeyframeInterpolationType,
            out_interpP0: *mut AEGP_KeyframeInterpolationType,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeInterpolation: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            in_interp: AEGP_KeyframeInterpolationType,
            out_interp: AEGP_KeyframeInterpolationType,
        ) -> A_Err,
    >,
    pub AEGP_StartAddKeyframes: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, akPH: *mut AEGP_AddKeyframesInfoH) -> A_Err,
    >,
    pub AEGP_AddKeyframes: ::std::option::Option<
        unsafe extern "C" fn(
            akH: AEGP_AddKeyframesInfoH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            key_indexPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_SetAddKeyframe: ::std::option::Option<
        unsafe extern "C" fn(
            akH: AEGP_AddKeyframesInfoH,
            key_indexL: A_long,
            valueP: *const AEGP_StreamValue,
        ) -> A_Err,
    >,
    pub AEGP_EndAddKeyframes: ::std::option::Option<
        unsafe extern "C" fn(addB: A_Boolean, akH: AEGP_AddKeyframesInfoH) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_KeyframeSuite1 {
    pub AEGP_GetStreamNumKFs: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, num_kfsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetKeyframeTime: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            time_mode: AEGP_LTimeMode,
            timePT: *mut A_Time,
        ) -> A_Err,
    >,
    pub AEGP_InsertKeyframe: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            time_mode: AEGP_LTimeMode,
            timePT: *const A_Time,
            key_indexP: *mut AEGP_KeyframeIndex,
        ) -> A_Err,
    >,
    pub AEGP_DeleteKeyframe: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, key_index: AEGP_KeyframeIndex) -> A_Err,
    >,
    pub AEGP_GetNewKeyframeValue: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            valueP: *mut AEGP_StreamValue,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeValue: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            valueP: *const AEGP_StreamValue,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamValueDimensionality: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            value_dimPS: *mut ::std::os::raw::c_short,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamTemporalDimensionality: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            temporal_dimPS: *mut ::std::os::raw::c_short,
        ) -> A_Err,
    >,
    pub AEGP_GetNewKeyframeSpatialTangents: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            in_tanP0: *mut AEGP_StreamValue,
            out_tanP0: *mut AEGP_StreamValue,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeSpatialTangents: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            in_tanP0: *const AEGP_StreamValue,
            out_tanP0: *const AEGP_StreamValue,
        ) -> A_Err,
    >,
    pub AEGP_GetKeyframeTemporalEase: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            dimensionL: A_long,
            in_easeP0: *mut AEGP_KeyframeEase,
            out_easeP0: *mut AEGP_KeyframeEase,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeTemporalEase: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            dimensionL: A_long,
            in_easeP0: *const AEGP_KeyframeEase,
            out_easeP0: *const AEGP_KeyframeEase,
        ) -> A_Err,
    >,
    pub AEGP_GetKeyframeFlags: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            flagsP: *mut AEGP_KeyframeFlags,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeFlag: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            flag: AEGP_KeyframeFlags,
            true_falseB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetKeyframeInterpolation: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            in_interpP0: *mut AEGP_KeyframeInterpolationType,
            out_interpP0: *mut AEGP_KeyframeInterpolationType,
        ) -> A_Err,
    >,
    pub AEGP_SetKeyframeInterpolation: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            key_index: AEGP_KeyframeIndex,
            in_interp: AEGP_KeyframeInterpolationType,
            out_interp: AEGP_KeyframeInterpolationType,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ItemSuite2 {
    pub AEGP_GetNextItem: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, next_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetActiveItem:
        ::std::option::Option<unsafe extern "C" fn(itemPH: *mut AEGP_ItemH) -> A_Err>,
    pub AEGP_IsItemSelected: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, selectedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SelectItem: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            selectB: A_Boolean,
            deselect_othersB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetItemType: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_typeP: *mut AEGP_ItemType) -> A_Err,
    >,
    pub AEGP_GetTypeName: ::std::option::Option<
        unsafe extern "C" fn(item_type: AEGP_ItemType, nameZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_GetItemName:
        ::std::option::Option<unsafe extern "C" fn(itemH: AEGP_ItemH, nameZ: *mut A_char) -> A_Err>,
    pub AEGP_GetItemID: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_idPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetItemFlags: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_flagsP: *mut AEGP_ItemFlags) -> A_Err,
    >,
    pub AEGP_SetItemUseProxy: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, use_proxyB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetItemParentFolder: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, parent_folder_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetItemDuration: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetItemCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, curr_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetItemDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            widthPL: *mut A_long,
            heightPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetItemPixelAspectRatio: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, pix_aspect_ratioPRt: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_DeleteItem: ::std::option::Option<unsafe extern "C" fn(itemH: AEGP_ItemH) -> A_Err>,
    pub AEGP_GetItemSolidColor: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, colorP: *mut AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_SetSolidColor: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, color: AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_SetSolidDimensions: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, widthS: A_short, heightS: A_short) -> A_Err,
    >,
    pub AEGP_CreateNewFolder: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            parent_folderH0: AEGP_ItemH,
            new_folderPH: *mut AEGP_ItemH,
        ) -> A_Err,
    >,
    pub AEGP_SetItemCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, new_timePT: *const A_Time) -> A_Err,
    >,
    pub AEGP_RenderNewItemSoundData: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            start_timePT: *const A_Time,
            durationPT: *const A_Time,
            sound_formatP: *const AEGP_SoundDataFormat,
            new_sound_dataPH: *mut AEGP_SoundDataH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ItemSuite1 {
    pub AEGP_GetNextItem: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, next_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetActiveItem:
        ::std::option::Option<unsafe extern "C" fn(itemPH: *mut AEGP_ItemH) -> A_Err>,
    pub AEGP_IsItemSelected: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, selectedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SelectItem: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            selectB: A_Boolean,
            deselect_othersB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetItemType: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_typeP: *mut AEGP_ItemType) -> A_Err,
    >,
    pub AEGP_GetTypeName: ::std::option::Option<
        unsafe extern "C" fn(item_type: AEGP_ItemType, nameZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_GetItemName:
        ::std::option::Option<unsafe extern "C" fn(itemH: AEGP_ItemH, nameZ: *mut A_char) -> A_Err>,
    pub AEGP_GetItemID: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_idPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetItemFlags: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, item_flagsP: *mut AEGP_ItemFlags) -> A_Err,
    >,
    pub AEGP_SetItemUseProxy: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, use_proxyB: A_Boolean) -> A_Err,
    >,
    pub AEGP_GetItemParentFolder: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, parent_folder_itemPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_GetItemDuration: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, durationPT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetItemCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, curr_timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetItemDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            widthPL: *mut A_long,
            heightPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetItemPixelAspectRatio: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, pix_aspect_ratioPRt: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_DeleteItem: ::std::option::Option<unsafe extern "C" fn(itemH: AEGP_ItemH) -> A_Err>,
    pub AEGP_GetItemSolidColor: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, colorP: *mut AEGP_ColorVal) -> A_Err,
    >,
    pub AEGP_CreateNewFolder: ::std::option::Option<
        unsafe extern "C" fn(
            nameZ: *const A_char,
            parent_folderH0: AEGP_ItemH,
            new_folderPH: *mut AEGP_ItemH,
        ) -> A_Err,
    >,
    pub AEGP_SetItemCurrentTime: ::std::option::Option<
        unsafe extern "C" fn(itemH: AEGP_ItemH, new_timePT: *const A_Time) -> A_Err,
    >,
    pub AEGP_RenderNewItemSoundData: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            start_timePT: *const A_Time,
            durationPT: *const A_Time,
            sound_formatP: *const AEGP_SoundDataFormat,
            new_sound_dataPH: *mut AEGP_SoundDataH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_UtilitySuite5 {
    pub AEGP_ReportInfo: ::std::option::Option<
        unsafe extern "C" fn(aegp_plugin_id: AEGP_PluginID, info_stringZ: *const A_char) -> A_Err,
    >,
    pub AEGP_GetDriverPluginInitFuncVersion: ::std::option::Option<
        unsafe extern "C" fn(major_versionPS: *mut A_short, minor_versionPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_GetDriverImplementationVersion: ::std::option::Option<
        unsafe extern "C" fn(major_versionPS: *mut A_short, minor_versionPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_StartQuietErrors:
        ::std::option::Option<unsafe extern "C" fn(err_stateP: *mut AEGP_ErrReportState) -> A_Err>,
    pub AEGP_EndQuietErrors: ::std::option::Option<
        unsafe extern "C" fn(
            report_quieted_errorsB: A_Boolean,
            err_stateP: *mut AEGP_ErrReportState,
        ) -> A_Err,
    >,
    pub AEGP_GetLastErrorMessage: ::std::option::Option<
        unsafe extern "C" fn(
            buffer_size: A_long,
            error_string: *mut A_char,
            error_num: *mut A_Err,
        ) -> A_Err,
    >,
    pub AEGP_StartUndoGroup:
        ::std::option::Option<unsafe extern "C" fn(undo_nameZ: *const A_char) -> A_Err>,
    pub AEGP_EndUndoGroup: ::std::option::Option<unsafe extern "C" fn() -> A_Err>,
    pub AEGP_RegisterWithAEGP: ::std::option::Option<
        unsafe extern "C" fn(
            global_refcon: AEGP_GlobalRefcon,
            plugin_nameZ: *const A_char,
            plugin_id: *mut AEGP_PluginID,
        ) -> A_Err,
    >,
    pub AEGP_GetMainHWND: ::std::option::Option<
        unsafe extern "C" fn(main_hwnd: *mut ::std::os::raw::c_void) -> A_Err,
    >,
    pub AEGP_ShowHideAllFloaters:
        ::std::option::Option<unsafe extern "C" fn(include_tool_palB: A_Boolean) -> A_Err>,
    pub AEGP_PaintPalGetForeColor:
        ::std::option::Option<unsafe extern "C" fn(fore_colorP: *mut AEGP_ColorVal) -> A_Err>,
    pub AEGP_PaintPalGetBackColor:
        ::std::option::Option<unsafe extern "C" fn(back_colorP: *mut AEGP_ColorVal) -> A_Err>,
    pub AEGP_PaintPalSetForeColor:
        ::std::option::Option<unsafe extern "C" fn(fore_colorP: *const AEGP_ColorVal) -> A_Err>,
    pub AEGP_PaintPalSetBackColor:
        ::std::option::Option<unsafe extern "C" fn(back_colorP: *const AEGP_ColorVal) -> A_Err>,
    pub AEGP_CharPalGetFillColor: ::std::option::Option<
        unsafe extern "C" fn(
            is_fill_color_definedPB: *mut A_Boolean,
            fill_colorP: *mut AEGP_ColorVal,
        ) -> A_Err,
    >,
    pub AEGP_CharPalGetStrokeColor: ::std::option::Option<
        unsafe extern "C" fn(
            is_stroke_color_definedPB: *mut A_Boolean,
            stroke_colorP: *mut AEGP_ColorVal,
        ) -> A_Err,
    >,
    pub AEGP_CharPalSetFillColor:
        ::std::option::Option<unsafe extern "C" fn(fill_colorP: *const AEGP_ColorVal) -> A_Err>,
    pub AEGP_CharPalSetStrokeColor:
        ::std::option::Option<unsafe extern "C" fn(stroke_colorP: *const AEGP_ColorVal) -> A_Err>,
    pub AEGP_CharPalIsFillColorUIFrontmost: ::std::option::Option<
        unsafe extern "C" fn(is_fill_color_selectedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_ConvertFpLongToHSFRatio: ::std::option::Option<
        unsafe extern "C" fn(numberF: A_FpLong, ratioPR: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_ConvertHSFRatioToFpLong: ::std::option::Option<
        unsafe extern "C" fn(ratioR: A_Ratio, numberPF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_CauseIdleRoutinesToBeCalled: ::std::option::Option<unsafe extern "C" fn() -> A_Err>,
    pub AEGP_GetSuppressInteractiveUI:
        ::std::option::Option<unsafe extern "C" fn(ui_is_suppressedPB: *mut A_Boolean) -> A_Err>,
    pub AEGP_WriteToOSConsole:
        ::std::option::Option<unsafe extern "C" fn(textZ: *const A_char) -> A_Err>,
    pub AEGP_WriteToDebugLog: ::std::option::Option<
        unsafe extern "C" fn(
            subsystemZ: *const A_char,
            event_typeZ: *const A_char,
            infoZ: *const A_char,
        ) -> A_Err,
    >,
    pub AEGP_IsScriptingAvailable:
        ::std::option::Option<unsafe extern "C" fn(outAvailablePB: *mut A_Boolean) -> A_Err>,
    pub AEGP_ExecuteScript: ::std::option::Option<
        unsafe extern "C" fn(
            inPlugin_id: AEGP_PluginID,
            inScriptZ: *const A_char,
            platform_encodingB: A_Boolean,
            outResultPH0: *mut AEGP_MemHandle,
            outErrorStringPH0: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_HostIsActivated:
        ::std::option::Option<unsafe extern "C" fn(is_activatedPB: *mut A_Boolean) -> A_Err>,
    pub AEGP_GetPluginPlatformRef: ::std::option::Option<
        unsafe extern "C" fn(
            plug_id: AEGP_PluginID,
            plat_refPPV: *mut *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_UpdateFontList: ::std::option::Option<unsafe extern "C" fn() -> A_Err>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_UtilitySuite4 {
    pub AEGP_ReportInfo: ::std::option::Option<
        unsafe extern "C" fn(aegp_plugin_id: AEGP_PluginID, info_stringZ: *const A_char) -> A_Err,
    >,
    pub AEGP_GetDriverPluginInitFuncVersion: ::std::option::Option<
        unsafe extern "C" fn(major_versionPS: *mut A_short, minor_versionPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_GetDriverImplementationVersion: ::std::option::Option<
        unsafe extern "C" fn(major_versionPS: *mut A_short, minor_versionPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_StartQuietErrors:
        ::std::option::Option<unsafe extern "C" fn(err_stateP: *mut AEGP_ErrReportState) -> A_Err>,
    pub AEGP_EndQuietErrors: ::std::option::Option<
        unsafe extern "C" fn(
            report_quieted_errorsB: A_Boolean,
            err_stateP: *mut AEGP_ErrReportState,
        ) -> A_Err,
    >,
    pub AEGP_GetLastErrorMessage: ::std::option::Option<
        unsafe extern "C" fn(
            buffer_size: A_long,
            error_string: *mut A_char,
            error_num: *mut A_Err,
        ) -> A_Err,
    >,
    pub AEGP_StartUndoGroup:
        ::std::option::Option<unsafe extern "C" fn(undo_nameZ: *const A_char) -> A_Err>,
    pub AEGP_EndUndoGroup: ::std::option::Option<unsafe extern "C" fn() -> A_Err>,
    pub AEGP_RegisterWithAEGP: ::std::option::Option<
        unsafe extern "C" fn(
            global_refcon: AEGP_GlobalRefcon,
            plugin_nameZ: *const A_char,
            plugin_id: *mut AEGP_PluginID,
        ) -> A_Err,
    >,
    pub AEGP_GetMainHWND: ::std::option::Option<
        unsafe extern "C" fn(main_hwnd: *mut ::std::os::raw::c_void) -> A_Err,
    >,
    pub AEGP_ShowHideAllFloaters:
        ::std::option::Option<unsafe extern "C" fn(include_tool_palB: A_Boolean) -> A_Err>,
    pub AEGP_PaintPalGetForeColor:
        ::std::option::Option<unsafe extern "C" fn(fore_colorP: *mut AEGP_ColorVal) -> A_Err>,
    pub AEGP_PaintPalGetBackColor:
        ::std::option::Option<unsafe extern "C" fn(back_colorP: *mut AEGP_ColorVal) -> A_Err>,
    pub AEGP_PaintPalSetForeColor:
        ::std::option::Option<unsafe extern "C" fn(fore_colorP: *const AEGP_ColorVal) -> A_Err>,
    pub AEGP_PaintPalSetBackColor:
        ::std::option::Option<unsafe extern "C" fn(back_colorP: *const AEGP_ColorVal) -> A_Err>,
    pub AEGP_CharPalGetFillColor: ::std::option::Option<
        unsafe extern "C" fn(
            is_fill_color_definedPB: *mut A_Boolean,
            fill_colorP: *mut AEGP_ColorVal,
        ) -> A_Err,
    >,
    pub AEGP_CharPalGetStrokeColor: ::std::option::Option<
        unsafe extern "C" fn(
            is_stroke_color_definedPB: *mut A_Boolean,
            stroke_colorP: *mut AEGP_ColorVal,
        ) -> A_Err,
    >,
    pub AEGP_CharPalSetFillColor:
        ::std::option::Option<unsafe extern "C" fn(fill_colorP: *const AEGP_ColorVal) -> A_Err>,
    pub AEGP_CharPalSetStrokeColor:
        ::std::option::Option<unsafe extern "C" fn(stroke_colorP: *const AEGP_ColorVal) -> A_Err>,
    pub AEGP_CharPalIsFillColorUIFrontmost: ::std::option::Option<
        unsafe extern "C" fn(is_fill_color_selectedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_ConvertFpLongToHSFRatio: ::std::option::Option<
        unsafe extern "C" fn(numberF: A_FpLong, ratioPR: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_ConvertHSFRatioToFpLong: ::std::option::Option<
        unsafe extern "C" fn(ratioR: A_Ratio, numberPF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_CauseIdleRoutinesToBeCalled: ::std::option::Option<unsafe extern "C" fn() -> A_Err>,
    pub AEGP_GetSuppressInteractiveUI:
        ::std::option::Option<unsafe extern "C" fn(ui_is_suppressedPB: *mut A_Boolean) -> A_Err>,
    pub AEGP_WriteToOSConsole:
        ::std::option::Option<unsafe extern "C" fn(textZ: *const A_char) -> A_Err>,
    pub AEGP_WriteToDebugLog: ::std::option::Option<
        unsafe extern "C" fn(
            subsystemZ: *const A_char,
            event_typeZ: *const A_char,
            infoZ: *const A_char,
        ) -> A_Err,
    >,
    pub AEGP_IsScriptingAvailable:
        ::std::option::Option<unsafe extern "C" fn(outAvailablePB: *mut A_Boolean) -> A_Err>,
    pub AEGP_ExecuteScript: ::std::option::Option<
        unsafe extern "C" fn(
            inPlugin_id: AEGP_PluginID,
            inScriptZ: *const A_char,
            platform_encodingB: A_Boolean,
            outResultPH0: *mut AEGP_MemHandle,
            outErrorStringPH0: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_HostIsActivated:
        ::std::option::Option<unsafe extern "C" fn(is_activatedPB: *mut A_Boolean) -> A_Err>,
    pub AEGP_GetPluginPlatformRef: ::std::option::Option<
        unsafe extern "C" fn(
            plug_id: AEGP_PluginID,
            plat_refPPV: *mut *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_UtilitySuite3 {
    pub AEGP_ReportInfo: ::std::option::Option<
        unsafe extern "C" fn(aegp_plugin_id: AEGP_PluginID, info_stringZ: *const A_char) -> A_Err,
    >,
    pub AEGP_GetDriverPluginInitFuncVersion: ::std::option::Option<
        unsafe extern "C" fn(major_versionPS: *mut A_short, minor_versionPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_GetDriverImplementationVersion: ::std::option::Option<
        unsafe extern "C" fn(major_versionPS: *mut A_short, minor_versionPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_StartQuietErrors:
        ::std::option::Option<unsafe extern "C" fn(err_stateP: *mut AEGP_ErrReportState) -> A_Err>,
    pub AEGP_EndQuietErrors: ::std::option::Option<
        unsafe extern "C" fn(
            report_quieted_errorsB: A_Boolean,
            err_stateP: *mut AEGP_ErrReportState,
        ) -> A_Err,
    >,
    pub AEGP_StartUndoGroup:
        ::std::option::Option<unsafe extern "C" fn(undo_nameZ: *const A_char) -> A_Err>,
    pub AEGP_EndUndoGroup: ::std::option::Option<unsafe extern "C" fn() -> A_Err>,
    pub AEGP_RegisterWithAEGP: ::std::option::Option<
        unsafe extern "C" fn(
            global_refcon: AEGP_GlobalRefcon,
            plugin_nameZ: *const A_char,
            plugin_id: *mut AEGP_PluginID,
        ) -> A_Err,
    >,
    pub AEGP_GetMainHWND: ::std::option::Option<
        unsafe extern "C" fn(main_hwnd: *mut ::std::os::raw::c_void) -> A_Err,
    >,
    pub AEGP_ShowHideAllFloaters:
        ::std::option::Option<unsafe extern "C" fn(include_tool_palB: A_Boolean) -> A_Err>,
    pub AEGP_PaintPalGetForeColor:
        ::std::option::Option<unsafe extern "C" fn(fore_colorP: *mut AEGP_ColorVal) -> A_Err>,
    pub AEGP_PaintPalGetBackColor:
        ::std::option::Option<unsafe extern "C" fn(back_colorP: *mut AEGP_ColorVal) -> A_Err>,
    pub AEGP_PaintPalSetForeColor:
        ::std::option::Option<unsafe extern "C" fn(fore_colorP: *const AEGP_ColorVal) -> A_Err>,
    pub AEGP_PaintPalSetBackColor:
        ::std::option::Option<unsafe extern "C" fn(back_colorP: *const AEGP_ColorVal) -> A_Err>,
    pub AEGP_CharPalGetFillColor: ::std::option::Option<
        unsafe extern "C" fn(
            is_fill_color_definedPB: *mut A_Boolean,
            fill_colorP: *mut AEGP_ColorVal,
        ) -> A_Err,
    >,
    pub AEGP_CharPalGetStrokeColor: ::std::option::Option<
        unsafe extern "C" fn(
            is_stroke_color_definedPB: *mut A_Boolean,
            stroke_colorP: *mut AEGP_ColorVal,
        ) -> A_Err,
    >,
    pub AEGP_CharPalSetFillColor:
        ::std::option::Option<unsafe extern "C" fn(fill_colorP: *const AEGP_ColorVal) -> A_Err>,
    pub AEGP_CharPalSetStrokeColor:
        ::std::option::Option<unsafe extern "C" fn(stroke_colorP: *const AEGP_ColorVal) -> A_Err>,
    pub AEGP_CharPalIsFillColorUIFrontmost: ::std::option::Option<
        unsafe extern "C" fn(is_fill_color_selectedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_ConvertFpLongToHSFRatio: ::std::option::Option<
        unsafe extern "C" fn(numberF: A_FpLong, ratioPR: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_ConvertHSFRatioToFpLong: ::std::option::Option<
        unsafe extern "C" fn(ratioR: A_Ratio, numberPF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_CauseIdleRoutinesToBeCalled: ::std::option::Option<unsafe extern "C" fn() -> A_Err>,
    pub AEGP_GetSuppressInteractiveUI:
        ::std::option::Option<unsafe extern "C" fn(ui_is_suppressedPB: *mut A_Boolean) -> A_Err>,
    pub AEGP_WriteToOSConsole:
        ::std::option::Option<unsafe extern "C" fn(textZ: *const A_char) -> A_Err>,
    pub AEGP_WriteToDebugLog: ::std::option::Option<
        unsafe extern "C" fn(
            subsystemZ: *const A_char,
            event_typeZ: *const A_char,
            infoZ: *const A_char,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_UtilitySuite2 {
    pub AEGP_ReportInfo: ::std::option::Option<
        unsafe extern "C" fn(aegp_plugin_id: AEGP_PluginID, info_stringZ: *const A_char) -> A_Err,
    >,
    pub AEGP_GetDriverPluginInitFuncVersion: ::std::option::Option<
        unsafe extern "C" fn(major_versionPS: *mut A_short, minor_versionPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_GetDriverImplementationVersion: ::std::option::Option<
        unsafe extern "C" fn(major_versionPS: *mut A_short, minor_versionPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_StartQuietErrors:
        ::std::option::Option<unsafe extern "C" fn(err_stateP: *mut AEGP_ErrReportState) -> A_Err>,
    pub AEGP_EndQuietErrors: ::std::option::Option<
        unsafe extern "C" fn(
            report_quieted_errorsB: A_Boolean,
            err_stateP: *mut AEGP_ErrReportState,
        ) -> A_Err,
    >,
    pub AEGP_StartUndoGroup:
        ::std::option::Option<unsafe extern "C" fn(undo_nameZ: *const A_char) -> A_Err>,
    pub AEGP_EndUndoGroup: ::std::option::Option<unsafe extern "C" fn() -> A_Err>,
    pub AEGP_RegisterWithAEGP: ::std::option::Option<
        unsafe extern "C" fn(
            global_refcon: AEGP_GlobalRefcon,
            plugin_nameZ: *const A_char,
            plugin_id: *mut AEGP_PluginID,
        ) -> A_Err,
    >,
    pub AEGP_GetMainHWND: ::std::option::Option<
        unsafe extern "C" fn(main_hwnd: *mut ::std::os::raw::c_void) -> A_Err,
    >,
    pub AEGP_ShowHideAllFloaters:
        ::std::option::Option<unsafe extern "C" fn(include_tool_palB: A_Boolean) -> A_Err>,
    pub AEGP_PaintPalGetForeColor:
        ::std::option::Option<unsafe extern "C" fn(fore_colorP: *mut AEGP_ColorVal) -> A_Err>,
    pub AEGP_PaintPalGetBackColor:
        ::std::option::Option<unsafe extern "C" fn(back_colorP: *mut AEGP_ColorVal) -> A_Err>,
    pub AEGP_PaintPalSetForeColor:
        ::std::option::Option<unsafe extern "C" fn(fore_colorP: *const AEGP_ColorVal) -> A_Err>,
    pub AEGP_PaintPalSetBackColor:
        ::std::option::Option<unsafe extern "C" fn(back_colorP: *const AEGP_ColorVal) -> A_Err>,
    pub AEGP_CharPalGetFillColor: ::std::option::Option<
        unsafe extern "C" fn(
            is_fill_color_definedPB: *mut A_Boolean,
            fill_colorP: *mut AEGP_ColorVal,
        ) -> A_Err,
    >,
    pub AEGP_CharPalGetStrokeColor: ::std::option::Option<
        unsafe extern "C" fn(
            is_stroke_color_definedPB: *mut A_Boolean,
            stroke_colorP: *mut AEGP_ColorVal,
        ) -> A_Err,
    >,
    pub AEGP_CharPalSetFillColor:
        ::std::option::Option<unsafe extern "C" fn(fill_colorP: *const AEGP_ColorVal) -> A_Err>,
    pub AEGP_CharPalSetStrokeColor:
        ::std::option::Option<unsafe extern "C" fn(stroke_colorP: *const AEGP_ColorVal) -> A_Err>,
    pub AEGP_CharPalIsFillColorUIFrontmost: ::std::option::Option<
        unsafe extern "C" fn(is_fill_color_selectedPB: *mut A_Boolean) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_UtilitySuite1 {
    pub AEGP_ReportInfo: ::std::option::Option<
        unsafe extern "C" fn(aegp_plugin_id: AEGP_PluginID, info_stringZ: *const A_char) -> A_Err,
    >,
    pub AEGP_GetDriverPluginInitFuncVersion: ::std::option::Option<
        unsafe extern "C" fn(major_versionPS: *mut A_short, minor_versionPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_GetDriverImplementationVersion: ::std::option::Option<
        unsafe extern "C" fn(major_versionPS: *mut A_short, minor_versionPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_StartQuietErrors:
        ::std::option::Option<unsafe extern "C" fn(err_stateP: *mut AEGP_ErrReportState) -> A_Err>,
    pub AEGP_EndQuietErrors: ::std::option::Option<
        unsafe extern "C" fn(
            report_quieted_errorsB: A_Boolean,
            err_stateP: *mut AEGP_ErrReportState,
        ) -> A_Err,
    >,
    pub AEGP_StartUndoGroup:
        ::std::option::Option<unsafe extern "C" fn(undo_nameZ: *const A_char) -> A_Err>,
    pub AEGP_EndUndoGroup: ::std::option::Option<unsafe extern "C" fn() -> A_Err>,
    pub AEGP_RegisterWithAEGP: ::std::option::Option<
        unsafe extern "C" fn(
            global_refcon: AEGP_GlobalRefcon,
            plugin_nameZ: *const A_char,
            plugin_id: *mut AEGP_PluginID,
        ) -> A_Err,
    >,
    pub AEGP_GetMainHWND: ::std::option::Option<
        unsafe extern "C" fn(main_hwnd: *mut ::std::os::raw::c_void) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_QueryXformSuite1 {
    pub AEGP_QueryXformGetSrcType: ::std::option::Option<
        unsafe extern "C" fn(
            query_contextH: PR_QueryContextH,
            src_type: *mut AEGP_QueryXformType,
        ) -> A_Err,
    >,
    pub AEGP_QueryXformGetDstType: ::std::option::Option<
        unsafe extern "C" fn(
            query_contextH: PR_QueryContextH,
            dst_type: *mut AEGP_QueryXformType,
        ) -> A_Err,
    >,
    pub AEGP_QueryXformGetLayer: ::std::option::Option<
        unsafe extern "C" fn(query_contextH: PR_QueryContextH, layerPH: *mut AEGP_LayerH) -> A_Err,
    >,
    pub AEGP_QueryXformGetComp: ::std::option::Option<
        unsafe extern "C" fn(query_contextH: PR_QueryContextH, compPH: *mut AEGP_CompH) -> A_Err,
    >,
    pub AEGP_QueryXformGetTransformTime: ::std::option::Option<
        unsafe extern "C" fn(query_contextH: PR_QueryContextH, time: *mut A_Time) -> A_Err,
    >,
    pub AEGP_QueryXformGetViewTime: ::std::option::Option<
        unsafe extern "C" fn(query_contextH: PR_QueryContextH, time: *mut A_Time) -> A_Err,
    >,
    pub AEGP_QueryXformGetCamera: ::std::option::Option<
        unsafe extern "C" fn(
            query_contextH: PR_QueryContextH,
            camera_layerPH: *mut AEGP_LayerH,
        ) -> A_Err,
    >,
    pub AEGP_QueryXformGetXform: ::std::option::Option<
        unsafe extern "C" fn(query_contextH: PR_QueryContextH, xform: *mut A_Matrix4) -> A_Err,
    >,
    pub AEGP_QueryXformSetXform: ::std::option::Option<
        unsafe extern "C" fn(query_contextH: PR_QueryContextH, xform: *mut A_Matrix4) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_RenderSuite1 {
    pub AEGP_RenderAndCheckoutFrame: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_RenderOptionsH,
            cancel_functionP0: AEGP_RenderSuiteCheckForCancel,
            cancel_function_refconP0: AEGP_CancelRefcon,
            receiptPH: *mut AEGP_FrameReceiptH,
        ) -> A_Err,
    >,
    pub AEGP_CheckinFrame:
        ::std::option::Option<unsafe extern "C" fn(receiptH: AEGP_FrameReceiptH) -> A_Err>,
    pub AEGP_GetReceiptWorld: ::std::option::Option<
        unsafe extern "C" fn(receiptH: AEGP_FrameReceiptH, worldPH: *mut AEGP_WorldH) -> A_Err,
    >,
    pub AEGP_GetRenderedRegion: ::std::option::Option<
        unsafe extern "C" fn(receiptH: AEGP_FrameReceiptH, rendered_regionP: *mut A_LRect) -> A_Err,
    >,
    pub AEGP_IsRenderedFrameSufficient: ::std::option::Option<
        unsafe extern "C" fn(
            rendered_optionsH: AEGP_RenderOptionsH,
            proposed_optionsH: AEGP_RenderOptionsH,
            rendered_is_sufficientPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_RenderNewItemSoundData: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            start_timePT: *const A_Time,
            durationPT: *const A_Time,
            sound_formatP: *const AEGP_SoundDataFormat,
            cancel_functionP0: AEGP_RenderSuiteCheckForCancel,
            cancel_function_refconP0: AEGP_CancelRefcon,
            new_sound_dataPH: *mut AEGP_SoundDataH,
        ) -> A_Err,
    >,
}
pub type AEGP_RenderSuiteCheckForCancelv1 = ::std::option::Option<
    unsafe extern "C" fn(refcon: *mut ::std::os::raw::c_void, cancelPB: *mut A_Boolean) -> A_Err,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_RenderSuite2 {
    pub AEGP_RenderAndCheckoutFrame: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_RenderOptionsH,
            cancel_functionP0: AEGP_RenderSuiteCheckForCancelv1,
            cancel_function_refconP0: AEGP_CancelRefcon,
            receiptPH: *mut AEGP_FrameReceiptH,
        ) -> A_Err,
    >,
    pub AEGP_CheckinFrame:
        ::std::option::Option<unsafe extern "C" fn(receiptH: AEGP_FrameReceiptH) -> A_Err>,
    pub AEGP_GetReceiptWorld: ::std::option::Option<
        unsafe extern "C" fn(receiptH: AEGP_FrameReceiptH, worldPH: *mut AEGP_WorldH) -> A_Err,
    >,
    pub AEGP_GetRenderedRegion: ::std::option::Option<
        unsafe extern "C" fn(receiptH: AEGP_FrameReceiptH, rendered_regionP: *mut A_LRect) -> A_Err,
    >,
    pub AEGP_IsRenderedFrameSufficient: ::std::option::Option<
        unsafe extern "C" fn(
            rendered_optionsH: AEGP_RenderOptionsH,
            proposed_optionsH: AEGP_RenderOptionsH,
            rendered_is_sufficientPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_RenderNewItemSoundData: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            start_timePT: *const A_Time,
            durationPT: *const A_Time,
            sound_formatP: *const AEGP_SoundDataFormat,
            cancel_functionP0: AEGP_RenderSuiteCheckForCancel,
            cancel_function_refconP0: AEGP_CancelRefcon,
            new_sound_dataPH: *mut AEGP_SoundDataH,
        ) -> A_Err,
    >,
    pub AEGP_GetCurrentTimestamp:
        ::std::option::Option<unsafe extern "C" fn(time_stampP: *mut AEGP_TimeStamp) -> A_Err>,
    pub AEGP_HasItemChangedSinceTimestamp: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            start_timeP: *const A_Time,
            durationP: *const A_Time,
            time_stampP: *const AEGP_TimeStamp,
            item_has_changedPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsItemWorthwhileToRender: ::std::option::Option<
        unsafe extern "C" fn(
            roH: AEGP_RenderOptionsH,
            time_stampP: *const AEGP_TimeStamp,
            worthwhile_to_renderPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_CheckinRenderedFrame: ::std::option::Option<
        unsafe extern "C" fn(
            roH: AEGP_RenderOptionsH,
            time_stampP: *const AEGP_TimeStamp,
            ticks_to_renderL: A_u_long,
            imageH: AEGP_PlatformWorldH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_RenderSuite3 {
    pub AEGP_RenderAndCheckoutFrame: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_RenderOptionsH,
            cancel_functionP0: AEGP_RenderSuiteCheckForCancel,
            cancel_function_refconP0: AEGP_CancelRefcon,
            receiptPH: *mut AEGP_FrameReceiptH,
        ) -> A_Err,
    >,
    pub AEGP_CheckinFrame:
        ::std::option::Option<unsafe extern "C" fn(receiptH: AEGP_FrameReceiptH) -> A_Err>,
    pub AEGP_GetReceiptWorld: ::std::option::Option<
        unsafe extern "C" fn(receiptH: AEGP_FrameReceiptH, worldPH: *mut AEGP_WorldH) -> A_Err,
    >,
    pub AEGP_GetRenderedRegion: ::std::option::Option<
        unsafe extern "C" fn(receiptH: AEGP_FrameReceiptH, rendered_regionP: *mut A_LRect) -> A_Err,
    >,
    pub AEGP_IsRenderedFrameSufficient: ::std::option::Option<
        unsafe extern "C" fn(
            rendered_optionsH: AEGP_RenderOptionsH,
            proposed_optionsH: AEGP_RenderOptionsH,
            rendered_is_sufficientPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_RenderNewItemSoundData: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            start_timePT: *const A_Time,
            durationPT: *const A_Time,
            sound_formatP: *const AEGP_SoundDataFormat,
            cancel_functionP0: AEGP_RenderSuiteCheckForCancel,
            cancel_function_refconP0: AEGP_CancelRefcon,
            new_sound_dataPH: *mut AEGP_SoundDataH,
        ) -> A_Err,
    >,
    pub AEGP_GetCurrentTimestamp:
        ::std::option::Option<unsafe extern "C" fn(time_stampP: *mut AEGP_TimeStamp) -> A_Err>,
    pub AEGP_HasItemChangedSinceTimestamp: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            start_timeP: *const A_Time,
            durationP: *const A_Time,
            time_stampP: *const AEGP_TimeStamp,
            item_has_changedPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsItemWorthwhileToRender: ::std::option::Option<
        unsafe extern "C" fn(
            roH: AEGP_RenderOptionsH,
            time_stampP: *const AEGP_TimeStamp,
            worthwhile_to_renderPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_CheckinRenderedFrame: ::std::option::Option<
        unsafe extern "C" fn(
            roH: AEGP_RenderOptionsH,
            time_stampP: *const AEGP_TimeStamp,
            ticks_to_renderL: A_u_long,
            imageH: AEGP_PlatformWorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetReceiptGuid: ::std::option::Option<
        unsafe extern "C" fn(receiptH: AEGP_FrameReceiptH, guidMH: *mut AEGP_MemHandle) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_RenderSuite4 {
    pub AEGP_RenderAndCheckoutFrame: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_RenderOptionsH,
            cancel_functionP0: AEGP_RenderSuiteCheckForCancel,
            cancel_function_refconP0: AEGP_CancelRefcon,
            receiptPH: *mut AEGP_FrameReceiptH,
        ) -> A_Err,
    >,
    pub AEGP_RenderAndCheckoutLayerFrame: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_LayerRenderOptionsH,
            render_plain_layer_frameB: A_Boolean,
            cancel_functionP0: AEGP_RenderSuiteCheckForCancel,
            cancel_function_refconP0: AEGP_CancelRefcon,
            receiptPH: *mut AEGP_FrameReceiptH,
        ) -> A_Err,
    >,
    pub AEGP_CheckinFrame:
        ::std::option::Option<unsafe extern "C" fn(receiptH: AEGP_FrameReceiptH) -> A_Err>,
    pub AEGP_GetReceiptWorld: ::std::option::Option<
        unsafe extern "C" fn(receiptH: AEGP_FrameReceiptH, worldPH: *mut AEGP_WorldH) -> A_Err,
    >,
    pub AEGP_GetRenderedRegion: ::std::option::Option<
        unsafe extern "C" fn(receiptH: AEGP_FrameReceiptH, rendered_regionP: *mut A_LRect) -> A_Err,
    >,
    pub AEGP_IsRenderedFrameSufficient: ::std::option::Option<
        unsafe extern "C" fn(
            rendered_optionsH: AEGP_RenderOptionsH,
            proposed_optionsH: AEGP_RenderOptionsH,
            rendered_is_sufficientPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_RenderNewItemSoundData: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            start_timePT: *const A_Time,
            durationPT: *const A_Time,
            sound_formatP: *const AEGP_SoundDataFormat,
            cancel_functionP0: AEGP_RenderSuiteCheckForCancel,
            cancel_function_refconP0: AEGP_CancelRefcon,
            new_sound_dataPH: *mut AEGP_SoundDataH,
        ) -> A_Err,
    >,
    pub AEGP_GetCurrentTimestamp:
        ::std::option::Option<unsafe extern "C" fn(time_stampP: *mut AEGP_TimeStamp) -> A_Err>,
    pub AEGP_HasItemChangedSinceTimestamp: ::std::option::Option<
        unsafe extern "C" fn(
            itemH: AEGP_ItemH,
            start_timeP: *const A_Time,
            durationP: *const A_Time,
            time_stampP: *const AEGP_TimeStamp,
            item_has_changedPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_IsItemWorthwhileToRender: ::std::option::Option<
        unsafe extern "C" fn(
            roH: AEGP_RenderOptionsH,
            time_stampP: *const AEGP_TimeStamp,
            worthwhile_to_renderPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_CheckinRenderedFrame: ::std::option::Option<
        unsafe extern "C" fn(
            roH: AEGP_RenderOptionsH,
            time_stampP: *const AEGP_TimeStamp,
            ticks_to_renderL: A_u_long,
            imageH: AEGP_PlatformWorldH,
        ) -> A_Err,
    >,
    pub AEGP_GetReceiptGuid: ::std::option::Option<
        unsafe extern "C" fn(receiptH: AEGP_FrameReceiptH, guidMH: *mut AEGP_MemHandle) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_WorldSuite2 {
    pub AEGP_New: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            type_: AEGP_WorldType,
            widthL: A_long,
            heightL: A_long,
            worldPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_Dispose: ::std::option::Option<unsafe extern "C" fn(worldH: AEGP_WorldH) -> A_Err>,
    pub AEGP_GetType: ::std::option::Option<
        unsafe extern "C" fn(worldH: AEGP_WorldH, typeP: *mut AEGP_WorldType) -> A_Err,
    >,
    pub AEGP_GetSize: ::std::option::Option<
        unsafe extern "C" fn(
            worldH: AEGP_WorldH,
            widthPL: *mut A_long,
            heightPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetRowBytes: ::std::option::Option<
        unsafe extern "C" fn(worldH: AEGP_WorldH, row_bytesPL: *mut A_u_long) -> A_Err,
    >,
    pub AEGP_GetBaseAddr8: ::std::option::Option<
        unsafe extern "C" fn(worldH: AEGP_WorldH, base_addrP: *mut *mut PF_Pixel8) -> A_Err,
    >,
    pub AEGP_GetBaseAddr16: ::std::option::Option<
        unsafe extern "C" fn(worldH: AEGP_WorldH, base_addrP: *mut *mut PF_Pixel16) -> A_Err,
    >,
    pub AEGP_FillOutPFEffectWorld: ::std::option::Option<
        unsafe extern "C" fn(worldH: AEGP_WorldH, pf_worldP: *mut PF_EffectWorld) -> A_Err,
    >,
    pub AEGP_FastBlur: ::std::option::Option<
        unsafe extern "C" fn(
            radiusF: A_FpLong,
            mode: PF_ModeFlags,
            quality: PF_Quality,
            worldH: AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_NewPlatformWorld: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            type_: AEGP_WorldType,
            widthL: A_long,
            heightL: A_long,
            worldPH: *mut AEGP_PlatformWorldH,
        ) -> A_Err,
    >,
    pub AEGP_DisposePlatformWorld:
        ::std::option::Option<unsafe extern "C" fn(worldH: AEGP_PlatformWorldH) -> A_Err>,
    pub AEGP_NewReferenceFromPlatformWorld: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            platform_worldH: AEGP_PlatformWorldH,
            worldPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_WorldSuite1 {
    pub AEGP_New: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            type_: AEGP_WorldType,
            widthL: A_long,
            heightL: A_long,
            worldPH: *mut AEGP_WorldH,
        ) -> A_Err,
    >,
    pub AEGP_Dispose: ::std::option::Option<unsafe extern "C" fn(worldH: AEGP_WorldH) -> A_Err>,
    pub AEGP_GetType: ::std::option::Option<
        unsafe extern "C" fn(worldH: AEGP_WorldH, typeP: *mut AEGP_WorldType) -> A_Err,
    >,
    pub AEGP_GetSize: ::std::option::Option<
        unsafe extern "C" fn(
            worldH: AEGP_WorldH,
            widthPL: *mut A_long,
            heightPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetRowBytes: ::std::option::Option<
        unsafe extern "C" fn(worldH: AEGP_WorldH, row_bytesPL: *mut A_u_long) -> A_Err,
    >,
    pub AEGP_GetBaseAddr8: ::std::option::Option<
        unsafe extern "C" fn(worldH: AEGP_WorldH, base_addrP: *mut *mut PF_Pixel8) -> A_Err,
    >,
    pub AEGP_GetBaseAddr16: ::std::option::Option<
        unsafe extern "C" fn(worldH: AEGP_WorldH, base_addrP: *mut *mut PF_Pixel16) -> A_Err,
    >,
    pub AEGP_FillOutPFEffectWorld: ::std::option::Option<
        unsafe extern "C" fn(worldH: AEGP_WorldH, pf_worldP: *mut PF_EffectWorld) -> A_Err,
    >,
    pub AEGP_FastBlur: ::std::option::Option<
        unsafe extern "C" fn(
            radiusF: A_FpLong,
            mode: PF_ModeFlags,
            quality: PF_Quality,
            worldH: AEGP_WorldH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AEGP_CollectionItem {
    pub type_: AEGP_CollectionItemType,
    pub u: AEGP_CollectionItem__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AEGP_CollectionItem__bindgen_ty_1 {
    pub layer: AEGP_LayerCollectionItem,
    pub mask: AEGP_MaskCollectionItem,
    pub effect: AEGP_EffectCollectionItem,
    pub stream: AEGP_StreamCollectionItem,
    pub mask_vertex: AEGP_MaskVertexCollectionItem,
    pub keyframe: AEGP_KeyframeCollectionItem,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_CollectionSuite1 {
    pub AEGP_NewCollection: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            collectionPH: *mut AEGP_CollectionH,
        ) -> A_Err,
    >,
    pub AEGP_DisposeCollection:
        ::std::option::Option<unsafe extern "C" fn(collectionH: AEGP_CollectionH) -> A_Err>,
    pub AEGP_GetCollectionNumItems: ::std::option::Option<
        unsafe extern "C" fn(collectionH: AEGP_CollectionH, num_itemsPL: *mut A_u_long) -> A_Err,
    >,
    pub AEGP_GetCollectionItemByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            collectionH: AEGP_CollectionH,
            indexL: A_u_long,
            collection_itemP: *mut AEGP_CollectionItem,
        ) -> A_Err,
    >,
    pub AEGP_CollectionPushBack: ::std::option::Option<
        unsafe extern "C" fn(
            collectionH: AEGP_CollectionH,
            collection_itemP: *const AEGP_CollectionItem,
        ) -> A_Err,
    >,
    pub AEGP_CollectionErase: ::std::option::Option<
        unsafe extern "C" fn(
            collectionH: AEGP_CollectionH,
            index_firstL: A_u_long,
            index_lastL: A_u_long,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_DynamicStreamSuite1 {
    pub AEGP_GetNewStreamRefForLayer: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamDepth: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, depthPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetStreamGroupingType: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            group_typeP: *mut AEGP_StreamGroupingType,
        ) -> A_Err,
    >,
    pub AEGP_GetNumStreamsInGroup: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, num_streamsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetDynamicStreamFlags: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            stream_flagsP: *mut AEGP_DynStreamFlags,
        ) -> A_Err,
    >,
    pub AEGP_SetDynamicStreamFlag: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            one_flag: AEGP_DynStreamFlags,
            setB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetNewStreamRefByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            parent_groupH: AEGP_StreamRefH,
            indexL: A_long,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewStreamRefByMatchname: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            parent_groupH: AEGP_StreamRefH,
            match_nameZ: *const A_char,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_DeleteStream:
        ::std::option::Option<unsafe extern "C" fn(streamH: AEGP_StreamRefH) -> A_Err>,
    pub AEGP_ReorderStream: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, new_indexL: A_long) -> A_Err,
    >,
    pub AEGP_DuplicateStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            new_indexPL0: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_SetStreamName: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, nameZ: *const A_char) -> A_Err,
    >,
    pub AEGP_CanAddStream: ::std::option::Option<
        unsafe extern "C" fn(
            group_streamH: AEGP_StreamRefH,
            match_nameZ: *const A_char,
            can_addPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_AddStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            indexed_group_streamH: AEGP_StreamRefH,
            match_nameZ: *const A_char,
            streamPH0: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetMatchName: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, nameZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_GetNewParentStreamRef: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            parent_streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamIsModified: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, modifiedPB: *mut A_Boolean) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_DynamicStreamSuite2 {
    pub AEGP_GetNewStreamRefForLayer: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamDepth: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, depthPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetStreamGroupingType: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            group_typeP: *mut AEGP_StreamGroupingType,
        ) -> A_Err,
    >,
    pub AEGP_GetNumStreamsInGroup: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, num_streamsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetDynamicStreamFlags: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            stream_flagsP: *mut AEGP_DynStreamFlags,
        ) -> A_Err,
    >,
    pub AEGP_SetDynamicStreamFlag: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            one_flag: AEGP_DynStreamFlags,
            undoableB: A_Boolean,
            setB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetNewStreamRefByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            parent_groupH: AEGP_StreamRefH,
            indexL: A_long,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewStreamRefByMatchname: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            parent_groupH: AEGP_StreamRefH,
            match_nameZ: *const A_char,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_DeleteStream:
        ::std::option::Option<unsafe extern "C" fn(streamH: AEGP_StreamRefH) -> A_Err>,
    pub AEGP_ReorderStream: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, new_indexL: A_long) -> A_Err,
    >,
    pub AEGP_DuplicateStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            new_indexPL0: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_SetStreamName: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, nameZ: *const A_char) -> A_Err,
    >,
    pub AEGP_CanAddStream: ::std::option::Option<
        unsafe extern "C" fn(
            group_streamH: AEGP_StreamRefH,
            match_nameZ: *const A_char,
            can_addPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_AddStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            indexed_group_streamH: AEGP_StreamRefH,
            match_nameZ: *const A_char,
            streamPH0: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetMatchName: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, nameZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_GetNewParentStreamRef: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            parent_streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamIsModified: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, modifiedPB: *mut A_Boolean) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_DynamicStreamSuite3 {
    pub AEGP_GetNewStreamRefForLayer: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamDepth: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, depthPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetStreamGroupingType: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            group_typeP: *mut AEGP_StreamGroupingType,
        ) -> A_Err,
    >,
    pub AEGP_GetNumStreamsInGroup: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, num_streamsPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetDynamicStreamFlags: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            stream_flagsP: *mut AEGP_DynStreamFlags,
        ) -> A_Err,
    >,
    pub AEGP_SetDynamicStreamFlag: ::std::option::Option<
        unsafe extern "C" fn(
            streamH: AEGP_StreamRefH,
            one_flag: AEGP_DynStreamFlags,
            undoableB: A_Boolean,
            setB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetNewStreamRefByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            parent_groupH: AEGP_StreamRefH,
            indexL: A_long,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetNewStreamRefByMatchname: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            parent_groupH: AEGP_StreamRefH,
            match_nameZ: *const A_char,
            streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_DeleteStream:
        ::std::option::Option<unsafe extern "C" fn(streamH: AEGP_StreamRefH) -> A_Err>,
    pub AEGP_ReorderStream: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, new_indexL: A_long) -> A_Err,
    >,
    pub AEGP_DuplicateStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            new_indexPL0: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_SetStreamName: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, nameZ: *const A_char) -> A_Err,
    >,
    pub AEGP_CanAddStream: ::std::option::Option<
        unsafe extern "C" fn(
            group_streamH: AEGP_StreamRefH,
            match_nameZ: *const A_char,
            can_addPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_AddStream: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            indexed_group_streamH: AEGP_StreamRefH,
            match_nameZ: *const A_char,
            streamPH0: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetMatchName: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, nameZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_GetNewParentStreamRef: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            streamH: AEGP_StreamRefH,
            parent_streamPH: *mut AEGP_StreamRefH,
        ) -> A_Err,
    >,
    pub AEGP_GetStreamIsModified: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, modifiedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetStreamIndexInParent: ::std::option::Option<
        unsafe extern "C" fn(streamH: AEGP_StreamRefH, indexPL: *mut A_long) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_RenderOptionsSuite3 {
    pub AEGP_NewFromItem: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            itemH: AEGP_ItemH,
            optionsPH: *mut AEGP_RenderOptionsH,
        ) -> A_Err,
    >,
    pub AEGP_Duplicate: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            optionsH: AEGP_RenderOptionsH,
            copyPH: *mut AEGP_RenderOptionsH,
        ) -> A_Err,
    >,
    pub AEGP_Dispose:
        ::std::option::Option<unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH) -> A_Err>,
    pub AEGP_SetTime: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, time: A_Time) -> A_Err,
    >,
    pub AEGP_GetTime: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, timeP: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetTimeStep: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, time_step: A_Time) -> A_Err,
    >,
    pub AEGP_GetTimeStep: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetFieldRender: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, field_render: PF_Field) -> A_Err,
    >,
    pub AEGP_GetFieldRender: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, field_renderP: *mut PF_Field) -> A_Err,
    >,
    pub AEGP_SetWorldType: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, type_: AEGP_WorldType) -> A_Err,
    >,
    pub AEGP_GetWorldType: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, typeP: *mut AEGP_WorldType) -> A_Err,
    >,
    pub AEGP_SetDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, x: A_short, y: A_short) -> A_Err,
    >,
    pub AEGP_GetDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_RenderOptionsH,
            xP: *mut A_short,
            yP: *mut A_short,
        ) -> A_Err,
    >,
    pub AEGP_SetRegionOfInterest: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, roiP: *const A_LRect) -> A_Err,
    >,
    pub AEGP_GetRegionOfInterest: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, roiP: *mut A_LRect) -> A_Err,
    >,
    pub AEGP_SetMatteMode: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, mode: AEGP_MatteMode) -> A_Err,
    >,
    pub AEGP_GetMatteMode: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, modeP: *mut AEGP_MatteMode) -> A_Err,
    >,
    pub AEGP_SetChannelOrder: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_RenderOptionsH,
            channel_order: AEGP_ChannelOrder,
        ) -> A_Err,
    >,
    pub AEGP_GetChannelOrder: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_RenderOptionsH,
            channelP: *mut AEGP_ChannelOrder,
        ) -> A_Err,
    >,
    pub AEGP_GetRenderGuideLayers: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, will_renderPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetRenderGuideLayers: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, render_themB: A_Boolean) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_RenderOptionsSuite2 {
    pub AEGP_NewFromItem: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            itemH: AEGP_ItemH,
            optionsPH: *mut AEGP_RenderOptionsH,
        ) -> A_Err,
    >,
    pub AEGP_Duplicate: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            optionsH: AEGP_RenderOptionsH,
            copyPH: *mut AEGP_RenderOptionsH,
        ) -> A_Err,
    >,
    pub AEGP_Dispose:
        ::std::option::Option<unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH) -> A_Err>,
    pub AEGP_SetTime: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, time: A_Time) -> A_Err,
    >,
    pub AEGP_GetTime: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, timeP: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetTimeStep: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, time_step: A_Time) -> A_Err,
    >,
    pub AEGP_GetTimeStep: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetFieldRender: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, field_render: PF_Field) -> A_Err,
    >,
    pub AEGP_GetFieldRender: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, field_renderP: *mut PF_Field) -> A_Err,
    >,
    pub AEGP_SetWorldType: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, type_: AEGP_WorldType) -> A_Err,
    >,
    pub AEGP_GetWorldType: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, typeP: *mut AEGP_WorldType) -> A_Err,
    >,
    pub AEGP_SetDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, x: A_short, y: A_short) -> A_Err,
    >,
    pub AEGP_GetDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_RenderOptionsH,
            xP: *mut A_short,
            yP: *mut A_short,
        ) -> A_Err,
    >,
    pub AEGP_SetRegionOfInterest: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, roiP: *const A_LRect) -> A_Err,
    >,
    pub AEGP_GetRegionOfInterest: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, roiP: *mut A_LRect) -> A_Err,
    >,
    pub AEGP_SetMatteMode: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, mode: AEGP_MatteMode) -> A_Err,
    >,
    pub AEGP_GetMatteMode: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, modeP: *mut AEGP_MatteMode) -> A_Err,
    >,
    pub AEGP_SetChannelOrder: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_RenderOptionsH,
            channel_order: AEGP_ChannelOrder,
        ) -> A_Err,
    >,
    pub AEGP_GetChannelOrder: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_RenderOptionsH,
            channelP: *mut AEGP_ChannelOrder,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_RenderOptionsSuite1 {
    pub AEGP_NewFromItem: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            itemH: AEGP_ItemH,
            optionsPH: *mut AEGP_RenderOptionsH,
        ) -> A_Err,
    >,
    pub AEGP_Duplicate: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            optionsH: AEGP_RenderOptionsH,
            copyPH: *mut AEGP_RenderOptionsH,
        ) -> A_Err,
    >,
    pub AEGP_Dispose:
        ::std::option::Option<unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH) -> A_Err>,
    pub AEGP_SetTime: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, time: A_Time) -> A_Err,
    >,
    pub AEGP_GetTime: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, timeP: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetTimeStep: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, time_step: A_Time) -> A_Err,
    >,
    pub AEGP_GetTimeStep: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetFieldRender: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, field_render: PF_Field) -> A_Err,
    >,
    pub AEGP_GetFieldRender: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, field_renderP: *mut PF_Field) -> A_Err,
    >,
    pub AEGP_SetWorldType: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, type_: AEGP_WorldType) -> A_Err,
    >,
    pub AEGP_GetWorldType: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, typeP: *mut AEGP_WorldType) -> A_Err,
    >,
    pub AEGP_SetDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, x: A_short, y: A_short) -> A_Err,
    >,
    pub AEGP_GetDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_RenderOptionsH,
            xP: *mut A_short,
            yP: *mut A_short,
        ) -> A_Err,
    >,
    pub AEGP_SetRegionOfInterest: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, roiP: *const A_LRect) -> A_Err,
    >,
    pub AEGP_GetRegionOfInterest: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, roiP: *mut A_LRect) -> A_Err,
    >,
    pub AEGP_SetMatteMode: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, mode: AEGP_MatteMode) -> A_Err,
    >,
    pub AEGP_GetMatteMode: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_RenderOptionsH, modeP: *mut AEGP_MatteMode) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_LayerRenderOptionsSuite1 {
    pub AEGP_NewFromLayer: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            layerH: AEGP_LayerH,
            optionsPH: *mut AEGP_LayerRenderOptionsH,
        ) -> A_Err,
    >,
    pub AEGP_NewFromUpstreamOfEffect: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            effectH: AEGP_EffectRefH,
            optionsPH: *mut AEGP_LayerRenderOptionsH,
        ) -> A_Err,
    >,
    pub AEGP_Duplicate: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            optionsH: AEGP_LayerRenderOptionsH,
            copyPH: *mut AEGP_LayerRenderOptionsH,
        ) -> A_Err,
    >,
    pub AEGP_Dispose:
        ::std::option::Option<unsafe extern "C" fn(optionsH: AEGP_LayerRenderOptionsH) -> A_Err>,
    pub AEGP_SetTime: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_LayerRenderOptionsH, time: A_Time) -> A_Err,
    >,
    pub AEGP_GetTime: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_LayerRenderOptionsH, timeP: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetTimeStep: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_LayerRenderOptionsH, time_step: A_Time) -> A_Err,
    >,
    pub AEGP_GetTimeStep: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_LayerRenderOptionsH, timePT: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetWorldType: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_LayerRenderOptionsH, type_: AEGP_WorldType) -> A_Err,
    >,
    pub AEGP_GetWorldType: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_LayerRenderOptionsH,
            typeP: *mut AEGP_WorldType,
        ) -> A_Err,
    >,
    pub AEGP_SetDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_LayerRenderOptionsH, x: A_short, y: A_short) -> A_Err,
    >,
    pub AEGP_GetDownsampleFactor: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_LayerRenderOptionsH,
            xP: *mut A_short,
            yP: *mut A_short,
        ) -> A_Err,
    >,
    pub AEGP_SetMatteMode: ::std::option::Option<
        unsafe extern "C" fn(optionsH: AEGP_LayerRenderOptionsH, mode: AEGP_MatteMode) -> A_Err,
    >,
    pub AEGP_GetMatteMode: ::std::option::Option<
        unsafe extern "C" fn(
            optionsH: AEGP_LayerRenderOptionsH,
            modeP: *mut AEGP_MatteMode,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ColorSettingsSuite1 {
    pub AEGP_GetBlendingTables: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            blending_tables: *mut PF_EffectBlendingTables,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ColorSettingsSuite2 {
    pub AEGP_GetBlendingTables: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            blending_tables: *mut PF_EffectBlendingTables,
        ) -> A_Err,
    >,
    pub AEGP_DoesViewHaveColorSpaceXform: ::std::option::Option<
        unsafe extern "C" fn(viewP: AEGP_ItemViewP, has_xformPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_XformWorkingToViewColorSpace: ::std::option::Option<
        unsafe extern "C" fn(viewP: AEGP_ItemViewP, srcH: AEGP_WorldH, dstH: AEGP_WorldH) -> A_Err,
    >,
    pub AEGP_GetNewWorkingSpaceColorProfile: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            compH: AEGP_CompH,
            color_profilePP: *mut AEGP_ColorProfileP,
        ) -> A_Err,
    >,
    pub AEGP_GetNewColorProfileFromICCProfile: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            icc_sizeL: A_long,
            icc_dataPV: *const ::std::os::raw::c_void,
            color_profilePP: *mut AEGP_ColorProfileP,
        ) -> A_Err,
    >,
    pub AEGP_GetNewICCProfileFromColorProfile: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            color_profileP: AEGP_ConstColorProfileP,
            icc_profilePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetNewColorProfileDescription: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            color_profileP: AEGP_ConstColorProfileP,
            unicode_descPH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_DisposeColorProfile:
        ::std::option::Option<unsafe extern "C" fn(color_profileP: AEGP_ColorProfileP) -> A_Err>,
    pub AEGP_GetColorProfileApproximateGamma: ::std::option::Option<
        unsafe extern "C" fn(
            color_profileP: AEGP_ConstColorProfileP,
            approx_gammaP: *mut A_FpShort,
        ) -> A_Err,
    >,
    pub AEGP_IsRGBColorProfile: ::std::option::Option<
        unsafe extern "C" fn(
            color_profileP: AEGP_ConstColorProfileP,
            is_rgbPB: *mut A_Boolean,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ColorSettingsSuite3 {
    pub AEGP_GetBlendingTables: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            blending_tables: *mut PF_EffectBlendingTables,
        ) -> A_Err,
    >,
    pub AEGP_DoesViewHaveColorSpaceXform: ::std::option::Option<
        unsafe extern "C" fn(viewP: AEGP_ItemViewP, has_xformPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_XformWorkingToViewColorSpace: ::std::option::Option<
        unsafe extern "C" fn(viewP: AEGP_ItemViewP, srcH: AEGP_WorldH, dstH: AEGP_WorldH) -> A_Err,
    >,
    pub AEGP_GetNewWorkingSpaceColorProfile: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            compH: AEGP_CompH,
            color_profilePP: *mut AEGP_ColorProfileP,
        ) -> A_Err,
    >,
    pub AEGP_GetNewColorProfileFromICCProfile: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            icc_sizeL: A_long,
            icc_dataPV: *const ::std::os::raw::c_void,
            color_profilePP: *mut AEGP_ColorProfileP,
        ) -> A_Err,
    >,
    pub AEGP_GetNewICCProfileFromColorProfile: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            color_profileP: AEGP_ConstColorProfileP,
            icc_profilePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetNewColorProfileDescription: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            color_profileP: AEGP_ConstColorProfileP,
            unicode_descPH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_DisposeColorProfile:
        ::std::option::Option<unsafe extern "C" fn(color_profileP: AEGP_ColorProfileP) -> A_Err>,
    pub AEGP_GetColorProfileApproximateGamma: ::std::option::Option<
        unsafe extern "C" fn(
            color_profileP: AEGP_ConstColorProfileP,
            approx_gammaP: *mut A_FpShort,
        ) -> A_Err,
    >,
    pub AEGP_IsRGBColorProfile: ::std::option::Option<
        unsafe extern "C" fn(
            color_profileP: AEGP_ConstColorProfileP,
            is_rgbPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_SetWorkingColorSpace: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            compH: AEGP_CompH,
            color_profileP: AEGP_ConstColorProfileP,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ColorSettingsSuite4 {
    pub AEGP_GetBlendingTables: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            blending_tables: *mut PF_EffectBlendingTables,
        ) -> A_Err,
    >,
    pub AEGP_DoesViewHaveColorSpaceXform: ::std::option::Option<
        unsafe extern "C" fn(viewP: AEGP_ItemViewP, has_xformPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_XformWorkingToViewColorSpace: ::std::option::Option<
        unsafe extern "C" fn(viewP: AEGP_ItemViewP, srcH: AEGP_WorldH, dstH: AEGP_WorldH) -> A_Err,
    >,
    pub AEGP_GetNewWorkingSpaceColorProfile: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            compH: AEGP_CompH,
            color_profilePP: *mut AEGP_ColorProfileP,
        ) -> A_Err,
    >,
    pub AEGP_GetNewColorProfileFromICCProfile: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            icc_sizeL: A_long,
            icc_dataPV: *const ::std::os::raw::c_void,
            color_profilePP: *mut AEGP_ColorProfileP,
        ) -> A_Err,
    >,
    pub AEGP_GetNewICCProfileFromColorProfile: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            color_profileP: AEGP_ConstColorProfileP,
            icc_profilePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetNewColorProfileDescription: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            color_profileP: AEGP_ConstColorProfileP,
            unicode_descPH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_DisposeColorProfile:
        ::std::option::Option<unsafe extern "C" fn(color_profileP: AEGP_ColorProfileP) -> A_Err>,
    pub AEGP_GetColorProfileApproximateGamma: ::std::option::Option<
        unsafe extern "C" fn(
            color_profileP: AEGP_ConstColorProfileP,
            approx_gammaP: *mut A_FpShort,
        ) -> A_Err,
    >,
    pub AEGP_IsRGBColorProfile: ::std::option::Option<
        unsafe extern "C" fn(
            color_profileP: AEGP_ConstColorProfileP,
            is_rgbPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_SetWorkingColorSpace: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            compH: AEGP_CompH,
            color_profileP: AEGP_ConstColorProfileP,
        ) -> A_Err,
    >,
    pub AEGP_IsOCIOColorManagementUsed: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            is_OCIOColorManagementUsedPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetOCIOConfigurationFile: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            config_filePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ColorSettingsSuite5 {
    pub AEGP_GetBlendingTables: ::std::option::Option<
        unsafe extern "C" fn(
            render_contextH: PR_RenderContextH,
            blending_tables: *mut PF_EffectBlendingTables,
        ) -> A_Err,
    >,
    pub AEGP_DoesViewHaveColorSpaceXform: ::std::option::Option<
        unsafe extern "C" fn(viewP: AEGP_ItemViewP, has_xformPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_XformWorkingToViewColorSpace: ::std::option::Option<
        unsafe extern "C" fn(viewP: AEGP_ItemViewP, srcH: AEGP_WorldH, dstH: AEGP_WorldH) -> A_Err,
    >,
    pub AEGP_GetNewWorkingSpaceColorProfile: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            compH: AEGP_CompH,
            color_profilePP: *mut AEGP_ColorProfileP,
        ) -> A_Err,
    >,
    pub AEGP_GetNewColorProfileFromICCProfile: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            icc_sizeL: A_long,
            icc_dataPV: *const ::std::os::raw::c_void,
            color_profilePP: *mut AEGP_ColorProfileP,
        ) -> A_Err,
    >,
    pub AEGP_GetNewICCProfileFromColorProfile: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            color_profileP: AEGP_ConstColorProfileP,
            icc_profilePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetNewColorProfileDescription: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            color_profileP: AEGP_ConstColorProfileP,
            unicode_descPH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_DisposeColorProfile:
        ::std::option::Option<unsafe extern "C" fn(color_profileP: AEGP_ColorProfileP) -> A_Err>,
    pub AEGP_GetColorProfileApproximateGamma: ::std::option::Option<
        unsafe extern "C" fn(
            color_profileP: AEGP_ConstColorProfileP,
            approx_gammaP: *mut A_FpShort,
        ) -> A_Err,
    >,
    pub AEGP_IsRGBColorProfile: ::std::option::Option<
        unsafe extern "C" fn(
            color_profileP: AEGP_ConstColorProfileP,
            is_rgbPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_SetWorkingColorSpace: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            compH: AEGP_CompH,
            color_profileP: AEGP_ConstColorProfileP,
        ) -> A_Err,
    >,
    pub AEGP_IsOCIOColorManagementUsed: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            is_OCIOColorManagementUsedPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetOCIOConfigurationFile: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            config_filePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetOCIOConfigurationFilePath: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            config_filePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGPD_GetOCIOWorkingColorSpace: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            ocio_working_colorspaceH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGPD_GetOCIODisplayColorSpace: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            ocio_displayH: *mut AEGP_MemHandle,
            ocio_viewH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_MarkerSuite1 {
    pub AEGP_NewMarker:
        ::std::option::Option<unsafe extern "C" fn(markerPP: *mut AEGP_MarkerValP) -> A_Err>,
    pub AEGP_DisposeMarker:
        ::std::option::Option<unsafe extern "C" fn(markerP: AEGP_MarkerValP) -> A_Err>,
    pub AEGP_DuplicateMarker: ::std::option::Option<
        unsafe extern "C" fn(markerP: AEGP_MarkerValP, new_markerP: *mut AEGP_MarkerValP) -> A_Err,
    >,
    pub AEGP_SetMarkerFlag: ::std::option::Option<
        unsafe extern "C" fn(
            markerP: AEGP_MarkerValP,
            flagType: AEGP_MarkerFlagType,
            valueB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetMarkerFlag: ::std::option::Option<
        unsafe extern "C" fn(
            markerP: AEGP_ConstMarkerValP,
            flagType: AEGP_MarkerFlagType,
            valueBP: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetMarkerString: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            markerP: AEGP_ConstMarkerValP,
            strType: AEGP_MarkerStringType,
            unicodePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_SetMarkerString: ::std::option::Option<
        unsafe extern "C" fn(
            markerP: AEGP_MarkerValP,
            strType: AEGP_MarkerStringType,
            unicodeP: *const A_u_short,
            lengthL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_CountCuePointParams: ::std::option::Option<
        unsafe extern "C" fn(markerP: AEGP_ConstMarkerValP, paramsLP: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetIndCuePointParam: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            markerP: AEGP_ConstMarkerValP,
            param_indexL: A_long,
            unicodeKeyPH: *mut AEGP_MemHandle,
            unicodeValuePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_SetIndCuePointParam: ::std::option::Option<
        unsafe extern "C" fn(
            markerP: AEGP_MarkerValP,
            param_indexL: A_long,
            unicodeKeyP: *const A_u_short,
            key_lengthL: A_long,
            unicodeValueP: *const A_u_short,
            value_lengthL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_InsertCuePointParam: ::std::option::Option<
        unsafe extern "C" fn(markerP: AEGP_MarkerValP, param_indexL: A_long) -> A_Err,
    >,
    pub AEGP_DeleteIndCuePointParam: ::std::option::Option<
        unsafe extern "C" fn(markerP: AEGP_MarkerValP, param_indexL: A_long) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_MarkerSuite2 {
    pub AEGP_NewMarker:
        ::std::option::Option<unsafe extern "C" fn(markerPP: *mut AEGP_MarkerValP) -> A_Err>,
    pub AEGP_DisposeMarker:
        ::std::option::Option<unsafe extern "C" fn(markerP: AEGP_MarkerValP) -> A_Err>,
    pub AEGP_DuplicateMarker: ::std::option::Option<
        unsafe extern "C" fn(markerP: AEGP_MarkerValP, new_markerP: *mut AEGP_MarkerValP) -> A_Err,
    >,
    pub AEGP_SetMarkerFlag: ::std::option::Option<
        unsafe extern "C" fn(
            markerP: AEGP_MarkerValP,
            flagType: AEGP_MarkerFlagType,
            valueB: A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetMarkerFlag: ::std::option::Option<
        unsafe extern "C" fn(
            markerP: AEGP_ConstMarkerValP,
            flagType: AEGP_MarkerFlagType,
            valueBP: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetMarkerString: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            markerP: AEGP_ConstMarkerValP,
            strType: AEGP_MarkerStringType,
            unicodePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_SetMarkerString: ::std::option::Option<
        unsafe extern "C" fn(
            markerP: AEGP_MarkerValP,
            strType: AEGP_MarkerStringType,
            unicodeP: *const A_u_short,
            lengthL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_CountCuePointParams: ::std::option::Option<
        unsafe extern "C" fn(markerP: AEGP_ConstMarkerValP, paramsLP: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetIndCuePointParam: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            markerP: AEGP_ConstMarkerValP,
            param_indexL: A_long,
            unicodeKeyPH: *mut AEGP_MemHandle,
            unicodeValuePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_SetIndCuePointParam: ::std::option::Option<
        unsafe extern "C" fn(
            markerP: AEGP_MarkerValP,
            param_indexL: A_long,
            unicodeKeyP: *const A_u_short,
            key_lengthL: A_long,
            unicodeValueP: *const A_u_short,
            value_lengthL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_InsertCuePointParam: ::std::option::Option<
        unsafe extern "C" fn(markerP: AEGP_MarkerValP, param_indexL: A_long) -> A_Err,
    >,
    pub AEGP_DeleteIndCuePointParam: ::std::option::Option<
        unsafe extern "C" fn(markerP: AEGP_MarkerValP, param_indexL: A_long) -> A_Err,
    >,
    pub AEGP_SetMarkerDuration: ::std::option::Option<
        unsafe extern "C" fn(markerP: AEGP_MarkerValP, durationPT: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetMarkerDuration: ::std::option::Option<
        unsafe extern "C" fn(markerP: AEGP_ConstMarkerValP, durationPT: *mut A_Time) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_ProjSuite5 {
    pub AEGP_GetNumProjects:
        ::std::option::Option<unsafe extern "C" fn(num_projPL: *mut A_long) -> A_Err>,
    pub AEGP_GetProjectByIndex: ::std::option::Option<
        unsafe extern "C" fn(proj_indexL: A_long, projPH: *mut AEGP_ProjectH) -> A_Err,
    >,
    pub AEGP_GetProjectName: ::std::option::Option<
        unsafe extern "C" fn(projH: AEGP_ProjectH, nameZ: *mut A_char) -> A_Err,
    >,
    pub AEGP_GetProjectPath: ::std::option::Option<
        unsafe extern "C" fn(projH: AEGP_ProjectH, unicode_pathPH: *mut AEGP_MemHandle) -> A_Err,
    >,
    pub AEGP_GetProjectRootFolder: ::std::option::Option<
        unsafe extern "C" fn(projH: AEGP_ProjectH, root_folderPH: *mut AEGP_ItemH) -> A_Err,
    >,
    pub AEGP_SaveProjectToPath: ::std::option::Option<
        unsafe extern "C" fn(projH: AEGP_ProjectH, pathZ: *const A_UTF16Char) -> A_Err,
    >,
    pub AEGP_GetProjectTimeDisplay: ::std::option::Option<
        unsafe extern "C" fn(projH: AEGP_ProjectH, time_displayP: *mut AEGP_TimeDisplay2) -> A_Err,
    >,
    pub AEGP_SetProjectTimeDisplay: ::std::option::Option<
        unsafe extern "C" fn(
            projH: AEGP_ProjectH,
            time_displayP: *const AEGP_TimeDisplay2,
        ) -> A_Err,
    >,
    pub AEGP_ProjectIsDirty: ::std::option::Option<
        unsafe extern "C" fn(projH: AEGP_ProjectH, is_dirtyPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SaveProjectAs: ::std::option::Option<
        unsafe extern "C" fn(projH: AEGP_ProjectH, pathZ: *const A_UTF16Char) -> A_Err,
    >,
    pub AEGP_NewProject:
        ::std::option::Option<unsafe extern "C" fn(new_projectPH: *mut AEGP_ProjectH) -> A_Err>,
    pub AEGP_OpenProjectFromPath: ::std::option::Option<
        unsafe extern "C" fn(pathZ: *const A_UTF16Char, projectPH: *mut AEGP_ProjectH) -> A_Err,
    >,
    pub AEGP_GetProjectBitDepth: ::std::option::Option<
        unsafe extern "C" fn(projectH: AEGP_ProjectH, bit_depthP: *mut AEGP_ProjBitDepth) -> A_Err,
    >,
    pub AEGP_SetProjectBitDepth: ::std::option::Option<
        unsafe extern "C" fn(projectH: AEGP_ProjectH, bit_depth: AEGP_ProjBitDepth) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_PersistentDataSuite3 {
    pub AEGP_GetApplicationBlob:
        ::std::option::Option<unsafe extern "C" fn(blobPH: *mut AEGP_PersistentBlobH) -> A_Err>,
    pub AEGP_GetNumSections: ::std::option::Option<
        unsafe extern "C" fn(blobH: AEGP_PersistentBlobH, num_sectionPL: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetSectionKeyByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_index: A_long,
            max_section_size: A_long,
            section_keyZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_DoesKeyExist: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            existsPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetNumKeys: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            num_keysPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetValueKeyByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            key_index: A_long,
            max_key_size: A_long,
            value_keyZ: *mut A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetDataHandle: ::std::option::Option<
        unsafe extern "C" fn(
            plugin_id: AEGP_PluginID,
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            defaultH0: AEGP_MemHandle,
            valuePH: *mut AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_GetData: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            data_sizeLu: A_u_long,
            defaultPV0: *const ::std::os::raw::c_void,
            bufPV: *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_GetString: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            defaultZ0: *const A_char,
            buf_sizeLu: A_u_long,
            bufZ: *mut A_char,
            actual_buf_sizeLu0: *mut A_u_long,
        ) -> A_Err,
    >,
    pub AEGP_GetLong: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            defaultL: A_long,
            valuePL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetFpLong: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            defaultF: A_FpLong,
            valuePF: *mut A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_SetDataHandle: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            valueH: AEGP_MemHandle,
        ) -> A_Err,
    >,
    pub AEGP_SetData: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            data_sizeLu: A_u_long,
            dataPV: *const ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_SetString: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            strZ: *const A_char,
        ) -> A_Err,
    >,
    pub AEGP_SetLong: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            valueL: A_long,
        ) -> A_Err,
    >,
    pub AEGP_SetFpLong: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
            valueF: A_FpLong,
        ) -> A_Err,
    >,
    pub AEGP_DeleteEntry: ::std::option::Option<
        unsafe extern "C" fn(
            blobH: AEGP_PersistentBlobH,
            section_keyZ: *const A_char,
            value_keyZ: *const A_char,
        ) -> A_Err,
    >,
    pub AEGP_GetPrefsDirectory:
        ::std::option::Option<unsafe extern "C" fn(unicode_pathPH: *mut AEGP_MemHandle) -> A_Err>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_IterateSuite1 {
    pub AEGP_GetNumThreads:
        ::std::option::Option<unsafe extern "C" fn(num_threadsPL: *mut A_long) -> A_Err>,
    pub AEGP_IterateGeneric: ::std::option::Option<
        unsafe extern "C" fn(
            iterationsL: A_long,
            refconPV: *mut ::std::os::raw::c_void,
            fn_func: ::std::option::Option<
                unsafe extern "C" fn(
                    refconPV: *mut ::std::os::raw::c_void,
                    thread_indexL: A_long,
                    i: A_long,
                    iterationsL: A_long,
                ) -> A_Err,
            >,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_IOInSuite5 {
    pub AEGP_GetInSpecOptionsHandle: ::std::option::Option<
        unsafe extern "C" fn(
            inH: AEIO_InSpecH,
            optionsPPV: *mut *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_SetInSpecOptionsHandle: ::std::option::Option<
        unsafe extern "C" fn(
            inH: AEIO_InSpecH,
            optionsPV: *mut ::std::os::raw::c_void,
            old_optionsPPV: *mut *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_GetInSpecFilePath: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, unicode_pathPH: *mut AEGP_MemHandle) -> A_Err,
    >,
    pub AEGP_GetInSpecNativeFPS: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, native_fpsP: *mut A_Fixed) -> A_Err,
    >,
    pub AEGP_SetInSpecNativeFPS: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, native_fps: A_Fixed) -> A_Err,
    >,
    pub AEGP_GetInSpecDepth: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, depthPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_SetInSpecDepth:
        ::std::option::Option<unsafe extern "C" fn(inH: AEIO_InSpecH, depthS: A_short) -> A_Err>,
    pub AEGP_GetInSpecSize: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, sizePL: *mut AEIO_FileSize) -> A_Err,
    >,
    pub AEGP_SetInSpecSize: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, sizeL: AEIO_FileSize) -> A_Err,
    >,
    pub AEGP_GetInSpecInterlaceLabel: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, interlaceP: *mut FIEL_Label) -> A_Err,
    >,
    pub AEGP_SetInSpecInterlaceLabel: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, interlaceP: *const FIEL_Label) -> A_Err,
    >,
    pub AEGP_GetInSpecAlphaLabel: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, alphaP: *mut AEIO_AlphaLabel) -> A_Err,
    >,
    pub AEGP_SetInSpecAlphaLabel: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, alphaP: *const AEIO_AlphaLabel) -> A_Err,
    >,
    pub AEGP_GetInSpecDuration: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, durationP: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetInSpecDuration: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, durationP: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetInSpecDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            inH: AEIO_InSpecH,
            widthPL0: *mut A_long,
            heightPL0: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_SetInSpecDimensions: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, widthL: A_long, heightL: A_long) -> A_Err,
    >,
    pub AEGP_InSpecGetRationalDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            inH: AEIO_InSpecH,
            rs0: *const AEIO_RationalScale,
            width0: *mut A_long,
            height0: *mut A_long,
            r0: *mut A_Rect,
        ) -> A_Err,
    >,
    pub AEGP_GetInSpecHSF:
        ::std::option::Option<unsafe extern "C" fn(inH: AEIO_InSpecH, hsfP: *mut A_Ratio) -> A_Err>,
    pub AEGP_SetInSpecHSF: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, hsfP: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_GetInSpecSoundRate: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, ratePF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_SetInSpecSoundRate:
        ::std::option::Option<unsafe extern "C" fn(inH: AEIO_InSpecH, rateF: A_FpLong) -> A_Err>,
    pub AEGP_GetInSpecSoundEncoding: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, encodingP: *mut AEIO_SndEncoding) -> A_Err,
    >,
    pub AEGP_SetInSpecSoundEncoding: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, encoding: AEIO_SndEncoding) -> A_Err,
    >,
    pub AEGP_GetInSpecSoundSampleSize: ::std::option::Option<
        unsafe extern "C" fn(
            inH: AEIO_InSpecH,
            bytes_per_sampleP: *mut AEIO_SndSampleSize,
        ) -> A_Err,
    >,
    pub AEGP_SetInSpecSoundSampleSize: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, bytes_per_sample: AEIO_SndSampleSize) -> A_Err,
    >,
    pub AEGP_GetInSpecSoundChannels: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, num_channelsP: *mut AEIO_SndChannels) -> A_Err,
    >,
    pub AEGP_SetInSpecSoundChannels: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, num_channels: AEIO_SndChannels) -> A_Err,
    >,
    pub AEGP_AddAuxExtMap: ::std::option::Option<
        unsafe extern "C" fn(extension: *const A_char, file_type: A_long, creator: A_long) -> A_Err,
    >,
    pub AEGP_SetInSpecEmbeddedColorProfile: ::std::option::Option<
        unsafe extern "C" fn(
            inH: AEIO_InSpecH,
            color_profileP0: AEGP_ConstColorProfileP,
            profile_descP0: *const A_UTF16Char,
        ) -> A_Err,
    >,
    pub AEGP_SetInSpecAssignedColorProfile: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, color_profileP: AEGP_ConstColorProfileP) -> A_Err,
    >,
    pub AEGP_GetInSpecNativeStartTime: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, startTimeP: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetInSpecNativeStartTime: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, startTimeP: *const A_Time) -> A_Err,
    >,
    pub AEGP_ClearInSpecNativeStartTime:
        ::std::option::Option<unsafe extern "C" fn(inH: AEIO_InSpecH) -> A_Err>,
    pub AEGP_GetInSpecNativeDisplayDropFrame: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, displayDropFrameBP: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_SetInSpecNativeDisplayDropFrame: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, displayDropFrameB: A_Boolean) -> A_Err,
    >,
    pub AEGP_SetInSpecStillSequenceNativeFPS: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, native_still_seq_fps: A_Fixed) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_IOInSuite4 {
    pub AEGP_GetInSpecOptionsHandle: ::std::option::Option<
        unsafe extern "C" fn(
            inH: AEIO_InSpecH,
            optionsPPV: *mut *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_SetInSpecOptionsHandle: ::std::option::Option<
        unsafe extern "C" fn(
            inH: AEIO_InSpecH,
            optionsPV: *mut ::std::os::raw::c_void,
            old_optionsPPV: *mut *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_GetInSpecFilePath: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, unicode_pathPH: *mut AEGP_MemHandle) -> A_Err,
    >,
    pub AEGP_GetInSpecNativeFPS: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, native_fpsP: *mut A_Fixed) -> A_Err,
    >,
    pub AEGP_SetInSpecNativeFPS: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, native_fps: A_Fixed) -> A_Err,
    >,
    pub AEGP_GetInSpecDepth: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, depthPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_SetInSpecDepth:
        ::std::option::Option<unsafe extern "C" fn(inH: AEIO_InSpecH, depthS: A_short) -> A_Err>,
    pub AEGP_GetInSpecSize: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, sizePL: *mut AEIO_FileSize) -> A_Err,
    >,
    pub AEGP_SetInSpecSize: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, sizeL: AEIO_FileSize) -> A_Err,
    >,
    pub AEGP_GetInSpecInterlaceLabel: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, interlaceP: *mut FIEL_Label) -> A_Err,
    >,
    pub AEGP_SetInSpecInterlaceLabel: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, interlaceP: *const FIEL_Label) -> A_Err,
    >,
    pub AEGP_GetInSpecAlphaLabel: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, alphaP: *mut AEIO_AlphaLabel) -> A_Err,
    >,
    pub AEGP_SetInSpecAlphaLabel: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, alphaP: *const AEIO_AlphaLabel) -> A_Err,
    >,
    pub AEGP_GetInSpecDuration: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, durationP: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetInSpecDuration: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, durationP: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetInSpecDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            inH: AEIO_InSpecH,
            widthPL0: *mut A_long,
            heightPL0: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_SetInSpecDimensions: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, widthL: A_long, heightL: A_long) -> A_Err,
    >,
    pub AEGP_InSpecGetRationalDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            inH: AEIO_InSpecH,
            rs0: *const AEIO_RationalScale,
            width0: *mut A_long,
            height0: *mut A_long,
            r0: *mut A_Rect,
        ) -> A_Err,
    >,
    pub AEGP_GetInSpecHSF:
        ::std::option::Option<unsafe extern "C" fn(inH: AEIO_InSpecH, hsfP: *mut A_Ratio) -> A_Err>,
    pub AEGP_SetInSpecHSF: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, hsfP: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_GetInSpecSoundRate: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, ratePF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_SetInSpecSoundRate:
        ::std::option::Option<unsafe extern "C" fn(inH: AEIO_InSpecH, rateF: A_FpLong) -> A_Err>,
    pub AEGP_GetInSpecSoundEncoding: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, encodingP: *mut AEIO_SndEncoding) -> A_Err,
    >,
    pub AEGP_SetInSpecSoundEncoding: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, encoding: AEIO_SndEncoding) -> A_Err,
    >,
    pub AEGP_GetInSpecSoundSampleSize: ::std::option::Option<
        unsafe extern "C" fn(
            inH: AEIO_InSpecH,
            bytes_per_sampleP: *mut AEIO_SndSampleSize,
        ) -> A_Err,
    >,
    pub AEGP_SetInSpecSoundSampleSize: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, bytes_per_sample: AEIO_SndSampleSize) -> A_Err,
    >,
    pub AEGP_GetInSpecSoundChannels: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, num_channelsP: *mut AEIO_SndChannels) -> A_Err,
    >,
    pub AEGP_SetInSpecSoundChannels: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, num_channels: AEIO_SndChannels) -> A_Err,
    >,
    pub AEGP_AddAuxExtMap: ::std::option::Option<
        unsafe extern "C" fn(extension: *const A_char, file_type: A_long, creator: A_long) -> A_Err,
    >,
    pub AEGP_SetInSpecEmbeddedColorProfile: ::std::option::Option<
        unsafe extern "C" fn(
            inH: AEIO_InSpecH,
            color_profileP0: AEGP_ConstColorProfileP,
            profile_descP0: *const A_UTF16Char,
        ) -> A_Err,
    >,
    pub AEGP_SetInSpecAssignedColorProfile: ::std::option::Option<
        unsafe extern "C" fn(inH: AEIO_InSpecH, color_profileP: AEGP_ConstColorProfileP) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_IOOutSuite4 {
    pub AEGP_GetOutSpecOptionsHandle: ::std::option::Option<
        unsafe extern "C" fn(
            outH: AEIO_OutSpecH,
            optionsPPV: *mut *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_SetOutSpecOptionsHandle: ::std::option::Option<
        unsafe extern "C" fn(
            outH: AEIO_OutSpecH,
            optionsPV: *mut ::std::os::raw::c_void,
            old_optionsPPVO: *mut *mut ::std::os::raw::c_void,
        ) -> A_Err,
    >,
    pub AEGP_GetOutSpecFilePath: ::std::option::Option<
        unsafe extern "C" fn(
            outH: AEIO_OutSpecH,
            unicode_pathPH: *mut AEGP_MemHandle,
            file_reservedPB: *mut A_Boolean,
        ) -> A_Err,
    >,
    pub AEGP_GetOutSpecFPS: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, native_fpsP: *mut A_Fixed) -> A_Err,
    >,
    pub AEGP_SetOutSpecNativeFPS: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, native_fpsP: A_Fixed) -> A_Err,
    >,
    pub AEGP_GetOutSpecDepth: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, depthPS: *mut A_short) -> A_Err,
    >,
    pub AEGP_SetOutSpecDepth:
        ::std::option::Option<unsafe extern "C" fn(outH: AEIO_OutSpecH, depthPS: A_short) -> A_Err>,
    pub AEGP_GetOutSpecInterlaceLabel: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, interlaceP: *mut FIEL_Label) -> A_Err,
    >,
    pub AEGP_SetOutSpecInterlaceLabel: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, interlaceP: *const FIEL_Label) -> A_Err,
    >,
    pub AEGP_GetOutSpecAlphaLabel: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, alphaP: *mut AEIO_AlphaLabel) -> A_Err,
    >,
    pub AEGP_SetOutSpecAlphaLabel: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, alphaP: *const AEIO_AlphaLabel) -> A_Err,
    >,
    pub AEGP_GetOutSpecDuration: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, durationP: *mut A_Time) -> A_Err,
    >,
    pub AEGP_SetOutSpecDuration: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, durationP: *const A_Time) -> A_Err,
    >,
    pub AEGP_GetOutSpecDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            outH: AEIO_OutSpecH,
            widthPL: *mut A_long,
            heightPL: *mut A_long,
        ) -> A_Err,
    >,
    pub AEGP_GetOutSpecHSF: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, hsfP: *mut A_Ratio) -> A_Err,
    >,
    pub AEGP_SetOutSpecHSF: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, hsfP: *const A_Ratio) -> A_Err,
    >,
    pub AEGP_GetOutSpecSoundRate: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, ratePF: *mut A_FpLong) -> A_Err,
    >,
    pub AEGP_SetOutSpecSoundRate:
        ::std::option::Option<unsafe extern "C" fn(outH: AEIO_OutSpecH, rateF: A_FpLong) -> A_Err>,
    pub AEGP_GetOutSpecSoundEncoding: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, encodingP: *mut AEIO_SndEncoding) -> A_Err,
    >,
    pub AEGP_SetOutSpecSoundEncoding: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, encoding: AEIO_SndEncoding) -> A_Err,
    >,
    pub AEGP_GetOutSpecSoundSampleSize: ::std::option::Option<
        unsafe extern "C" fn(
            outH: AEIO_OutSpecH,
            bytes_per_sampleP: *mut AEIO_SndSampleSize,
        ) -> A_Err,
    >,
    pub AEGP_SetOutSpecSoundSampleSize: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, bytes_per_sample: AEIO_SndSampleSize) -> A_Err,
    >,
    pub AEGP_GetOutSpecSoundChannels: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, num_channelsP: *mut AEIO_SndChannels) -> A_Err,
    >,
    pub AEGP_SetOutSpecSoundChannels: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, num_channels: AEIO_SndChannels) -> A_Err,
    >,
    pub AEGP_GetOutSpecIsStill: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, is_stillPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetOutSpecPosterTime: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, poster_timeP: *mut A_Time) -> A_Err,
    >,
    pub AEGP_GetOutSpecStartFrame: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, start_frameP: *mut A_long) -> A_Err,
    >,
    pub AEGP_GetOutSpecPullDown: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, pulldownP: *mut AEIO_Pulldown) -> A_Err,
    >,
    pub AEGP_GetOutSpecIsMissing: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, missingPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetOutSpecShouldEmbedICCProfile: ::std::option::Option<
        unsafe extern "C" fn(outH: AEIO_OutSpecH, embedPB: *mut A_Boolean) -> A_Err,
    >,
    pub AEGP_GetNewOutSpecColorProfile: ::std::option::Option<
        unsafe extern "C" fn(
            aegp_plugin_id: AEGP_PluginID,
            outH: AEIO_OutSpecH,
            color_profilePP: *mut AEGP_ColorProfileP,
        ) -> A_Err,
    >,
    pub AEGP_GetOutSpecOutputModule: ::std::option::Option<
        unsafe extern "C" fn(
            outH: AEIO_OutSpecH,
            rq_itemP: *mut AEGP_RQItemRefH,
            om_refP: *mut AEGP_OutputModuleRefH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AEGP_FIMSuite3 {
    pub AEGP_RegisterImportFlavor: ::std::option::Option<
        unsafe extern "C" fn(nameZ: *const A_char, imp_refP: *mut AE_FIM_ImportFlavorRef) -> A_Err,
    >,
    pub AEGP_RegisterImportFlavorFileTypes: ::std::option::Option<
        unsafe extern "C" fn(
            imp_ref: AE_FIM_ImportFlavorRef,
            num_filekindsL: A_long,
            kindsAP: *const AEIO_FileKind,
            num_fileextsL: A_long,
            extsAP: *const AEIO_FileKind,
        ) -> A_Err,
    >,
    pub AEGP_RegisterImportFlavorImportCallbacks: ::std::option::Option<
        unsafe extern "C" fn(
            imp_ref: AE_FIM_ImportFlavorRef,
            single_flag: AE_FIM_ImportFlags,
            imp_cbsP: *const AE_FIM_ImportCallbacks,
        ) -> A_Err,
    >,
    pub AEGP_SetImportedItem: ::std::option::Option<
        unsafe extern "C" fn(
            imp_options: AE_FIM_ImportOptions,
            imported_itemH: AEGP_ItemH,
        ) -> A_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_PluginData {
    _unused: [u8; 0],
}
pub type PF_PluginDataPtr = *mut PF_PluginData;
pub type PF_PluginDataCB2 = ::std::option::Option<
    unsafe extern "C" fn(
        inPtr: PF_PluginDataPtr,
        inNamePtr: *const A_u_char,
        inMatchNamePtr: *const A_u_char,
        inCategoryPtr: *const A_u_char,
        inEntryPointNamePtr: *const A_u_char,
        inkind: A_long,
        inApiVersionMajor: A_long,
        inApiVersionMinor: A_long,
        inReservedInfo: A_long,
        inSupportURLPtr: *const A_u_char,
    ) -> A_Err,
>;
pub type PF_PluginDataCB = ::std::option::Option<
    unsafe extern "C" fn(
        inPtr: PF_PluginDataPtr,
        inNamePtr: *const A_u_char,
        inMatchNamePtr: *const A_u_char,
        inCategoryPtr: *const A_u_char,
        inEntryPointNamePtr: *const A_u_char,
        inkind: A_long,
        inApiVersionMajor: A_long,
        inApiVersionMinor: A_long,
        inReservedInfo: A_long,
    ) -> A_Err,
>;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_BGRA_4444_8u: PrPixelFormat = 1634887522;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_VUYA_4444_8u: PrPixelFormat = 1635349878;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_VUYA_4444_8u_709: PrPixelFormat = 1096373590;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_ARGB_4444_8u: PrPixelFormat = 1650946657;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_BGRX_4444_8u: PrPixelFormat = 2020763490;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_VUYX_4444_8u: PrPixelFormat = 2021225846;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_VUYX_4444_8u_709: PrPixelFormat = 930641270;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_XRGB_4444_8u: PrPixelFormat = 1650946680;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_BGRP_4444_8u: PrPixelFormat = 1886545762;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_VUYP_4444_8u: PrPixelFormat = 1887008118;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_VUYP_4444_8u_709: PrPixelFormat = 930116982;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_PRGB_4444_8u: PrPixelFormat = 1650946672;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_BGRA_4444_16u: PrPixelFormat = 1634887490;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_VUYA_4444_16u: PrPixelFormat = 1635349846;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_ARGB_4444_16u: PrPixelFormat = 1650946625;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_BGRX_4444_16u: PrPixelFormat = 2020763458;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_XRGB_4444_16u: PrPixelFormat = 1650946648;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_BGRP_4444_16u: PrPixelFormat = 1886545730;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_PRGB_4444_16u: PrPixelFormat = 1650946640;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_BGRA_4444_32f: PrPixelFormat = 1634879298;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_VUYA_4444_32f: PrPixelFormat = 1635341654;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_VUYA_4444_32f_709: PrPixelFormat = 1633244534;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_ARGB_4444_32f: PrPixelFormat = 1650938433;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_BGRX_4444_32f: PrPixelFormat = 2020755266;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_VUYX_4444_32f: PrPixelFormat = 2021217622;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_VUYX_4444_32f_709: PrPixelFormat = 930633046;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_XRGB_4444_32f: PrPixelFormat = 1650938456;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_BGRP_4444_32f: PrPixelFormat = 1886537538;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_VUYP_4444_32f: PrPixelFormat = 1886999894;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_VUYP_4444_32f_709: PrPixelFormat = 930108758;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_PRGB_4444_32f: PrPixelFormat = 1650938448;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_RGB_444_10u: PrPixelFormat = 826427218;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_YUYV_422_8u_601: PrPixelFormat = 846820729;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_YUYV_422_8u_709: PrPixelFormat = 863597945;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_UYVY_422_8u_601: PrPixelFormat = 2037807477;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_UYVY_422_8u_709: PrPixelFormat = 930511221;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_V210_422_10u_601: PrPixelFormat = 808530550;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_V210_422_10u_709: PrPixelFormat = 825307766;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_UYVY_422_32f_601: PrPixelFormat = 2037799253;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_UYVY_422_32f_709: PrPixelFormat = 930502997;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_BGRA_4444_32f_Linear: PrPixelFormat = 1281443650;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_BGRP_4444_32f_Linear: PrPixelFormat = 1282426690;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_BGRX_4444_32f_Linear: PrPixelFormat = 1282950978;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_ARGB_4444_32f_Linear: PrPixelFormat = 1281839681;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_PRGB_4444_32f_Linear: PrPixelFormat = 1281839696;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_XRGB_4444_32f_Linear: PrPixelFormat = 1281839704;
#[doc = "\tCurrently supported types"]
pub const PrPixelFormat_PrPixelFormat_RGB_444_12u_PQ_709: PrPixelFormat = 928075840;
pub const PrPixelFormat_PrPixelFormat_RGB_444_12u_PQ_P3: PrPixelFormat = 1347506240;
pub const PrPixelFormat_PrPixelFormat_RGB_444_12u_PQ_2020: PrPixelFormat = 844189760;
pub const PrPixelFormat_PrPixelFormat_YUV_420_MPEG2_FRAME_PICTURE_PLANAR_8u_601: PrPixelFormat =
    842102393;
pub const PrPixelFormat_PrPixelFormat_YUV_420_MPEG2_FIELD_PICTURE_PLANAR_8u_601: PrPixelFormat =
    845772409;
pub const PrPixelFormat_PrPixelFormat_YUV_420_MPEG2_FRAME_PICTURE_PLANAR_8u_601_FullRange:
    PrPixelFormat = 1714517625;
pub const PrPixelFormat_PrPixelFormat_YUV_420_MPEG2_FIELD_PICTURE_PLANAR_8u_601_FullRange:
    PrPixelFormat = 1718187641;
pub const PrPixelFormat_PrPixelFormat_YUV_420_MPEG2_FRAME_PICTURE_PLANAR_8u_709: PrPixelFormat =
    925988473;
pub const PrPixelFormat_PrPixelFormat_YUV_420_MPEG2_FIELD_PICTURE_PLANAR_8u_709: PrPixelFormat =
    929658489;
pub const PrPixelFormat_PrPixelFormat_YUV_420_MPEG2_FRAME_PICTURE_PLANAR_8u_709_FullRange:
    PrPixelFormat = 1177646713;
pub const PrPixelFormat_PrPixelFormat_YUV_420_MPEG2_FIELD_PICTURE_PLANAR_8u_709_FullRange:
    PrPixelFormat = 1181316729;
pub const PrPixelFormat_PrPixelFormat_YUV_420_MPEG4_FRAME_PICTURE_PLANAR_8u_601: PrPixelFormat =
    842102361;
pub const PrPixelFormat_PrPixelFormat_YUV_420_MPEG4_FIELD_PICTURE_PLANAR_8u_601: PrPixelFormat =
    845772377;
pub const PrPixelFormat_PrPixelFormat_YUV_420_MPEG4_FRAME_PICTURE_PLANAR_8u_601_FullRange:
    PrPixelFormat = 1714517593;
pub const PrPixelFormat_PrPixelFormat_YUV_420_MPEG4_FIELD_PICTURE_PLANAR_8u_601_FullRange:
    PrPixelFormat = 1718187609;
pub const PrPixelFormat_PrPixelFormat_YUV_420_MPEG4_FRAME_PICTURE_PLANAR_8u_709: PrPixelFormat =
    925988441;
pub const PrPixelFormat_PrPixelFormat_YUV_420_MPEG4_FIELD_PICTURE_PLANAR_8u_709: PrPixelFormat =
    929658457;
pub const PrPixelFormat_PrPixelFormat_YUV_420_MPEG4_FRAME_PICTURE_PLANAR_8u_709_FullRange:
    PrPixelFormat = 1177646681;
pub const PrPixelFormat_PrPixelFormat_YUV_420_MPEG4_FIELD_PICTURE_PLANAR_8u_709_FullRange:
    PrPixelFormat = 1181316697;
pub const PrPixelFormat_PrPixelFormat_NTSCDV25: PrPixelFormat = 846100068;
pub const PrPixelFormat_PrPixelFormat_PALDV25: PrPixelFormat = 846231140;
pub const PrPixelFormat_PrPixelFormat_NTSCDV50: PrPixelFormat = 896431716;
pub const PrPixelFormat_PrPixelFormat_PALDV50: PrPixelFormat = 896562788;
pub const PrPixelFormat_PrPixelFormat_NTSCDV100_720p: PrPixelFormat = 929986148;
pub const PrPixelFormat_PrPixelFormat_PALDV100_720p: PrPixelFormat = 930117220;
pub const PrPixelFormat_PrPixelFormat_NTSCDV100_1080i: PrPixelFormat = 829322852;
pub const PrPixelFormat_PrPixelFormat_PALDV100_1080i: PrPixelFormat = 829453924;
pub const PrPixelFormat_PrPixelFormat_Raw: PrPixelFormat = 2004312434;
pub const PrPixelFormat_PrPixelFormat_Invalid: PrPixelFormat = 1717854562;
pub const PrPixelFormat_PrPixelFormat_Any: PrPixelFormat = 0;
#[doc = "\tPremiere supported pixel formats for RenderFrame and PPixs"]
pub type PrPixelFormat = ::std::os::raw::c_int;
pub type csSDK_uint32 = ::std::os::raw::c_uint;
pub type csSDK_int32 = ::std::os::raw::c_int;
pub type csSDK_int64 = ::std::os::raw::c_longlong;
pub type prInt64 = csSDK_int64;
pub type prFieldType = csSDK_int32;
pub type PrTimelineID = csSDK_int32;
pub type PrClipID = csSDK_int32;
pub type PrTime = prInt64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PrSDKString {
    pub opaque: [csSDK_int64; 2usize],
}
pub const PF_TimeDisplay_24: _bindgen_ty_169 = 1;
pub const PF_TimeDisplay_25: _bindgen_ty_169 = 2;
pub const PF_TimeDisplay_30Drop: _bindgen_ty_169 = 3;
pub const PF_TimeDisplay_30NonDrop: _bindgen_ty_169 = 4;
pub const PF_TimeDisplay_50: _bindgen_ty_169 = 5;
pub const PF_TimeDisplay_60Drop: _bindgen_ty_169 = 6;
pub const PF_TimeDisplay_60NonDrop: _bindgen_ty_169 = 7;
pub const PF_TimeDisplay_NonStandard: _bindgen_ty_169 = 8;
pub const PF_TimeDisplay_Invalid: _bindgen_ty_169 = 9;
pub type _bindgen_ty_169 = ::std::os::raw::c_int;
pub type PF_TimeDisplay = csSDK_uint32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_PixelFormatSuite {
    pub AddSupportedPixelFormat: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, pixelFormat: PrPixelFormat) -> PF_Err,
    >,
    pub ClearSupportedPixelFormats:
        ::std::option::Option<unsafe extern "C" fn(effect_ref: PF_ProgPtr) -> PF_Err>,
    pub NewWorldOfPixelFormat: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            width: A_u_long,
            height: A_u_long,
            flags: PF_NewWorldFlags,
            pixelFormat: PrPixelFormat,
            world: *mut PF_EffectWorld,
        ) -> PF_Err,
    >,
    pub DisposeWorld: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, world: *mut PF_EffectWorld) -> PF_Err,
    >,
    pub GetPixelFormat: ::std::option::Option<
        unsafe extern "C" fn(
            inWorld: *mut PF_EffectWorld,
            pixelFormat: *mut PrPixelFormat,
        ) -> PF_Err,
    >,
    pub GetBlackForPixelFormat: ::std::option::Option<
        unsafe extern "C" fn(
            pixelFormat: PrPixelFormat,
            pixelData: *mut ::std::os::raw::c_void,
        ) -> PF_Err,
    >,
    pub GetWhiteForPixelFormat: ::std::option::Option<
        unsafe extern "C" fn(
            pixelFormat: PrPixelFormat,
            pixelData: *mut ::std::os::raw::c_void,
        ) -> PF_Err,
    >,
    pub ConvertColorToPixelFormattedData: ::std::option::Option<
        unsafe extern "C" fn(
            pixelFormat: PrPixelFormat,
            alpha: f32,
            red: f32,
            green: f32,
            blue: f32,
            pixelData: *mut ::std::os::raw::c_void,
        ) -> PF_Err,
    >,
}
pub type PF_PixelFormatSuite1 = PF_PixelFormatSuite;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_BackgroundFrameSuite {
    pub AddSupportedBackgroundTransferMode: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            supportedTransferMode: PF_TransferMode,
            supportedPixelFormat: PrPixelFormat,
        ) -> PF_Err,
    >,
    pub GetBackgroundFrame: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            backgroundFrame: *mut *mut PF_LayerDef,
            backgroundTransferMode: *mut PF_TransferMode,
        ) -> PF_Err,
    >,
}
pub type PF_BackgroundFrameSuite1 = PF_BackgroundFrameSuite;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_UtilitySuite4 {
    pub GetFilterInstanceID: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, outFilterInstanceID: *mut A_long) -> PF_Err,
    >,
    pub GetMediaTimecode: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            outCurrentFrame: *mut A_long,
            outTimeDisplay: *mut PF_TimeDisplay,
        ) -> PF_Err,
    >,
    pub GetClipSpeed: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, speed: *mut f64) -> PF_Err,
    >,
    pub GetClipDuration: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, frameDuration: *mut A_long) -> PF_Err,
    >,
    pub GetClipStart: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, frameDuration: *mut A_long) -> PF_Err,
    >,
    pub GetUnscaledClipDuration: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, frameDuration: *mut A_long) -> PF_Err,
    >,
    pub GetUnscaledClipStart: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, frameDuration: *mut A_long) -> PF_Err,
    >,
    pub GetTrackItemStart: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, frameDuration: *mut A_long) -> PF_Err,
    >,
    pub GetMediaFieldType: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, outFieldType: *mut prFieldType) -> PF_Err,
    >,
    pub GetMediaFrameRate: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, outTicksPerFrame: *mut PrTime) -> PF_Err,
    >,
    pub GetContainingTimelineID: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, outTimelineID: *mut PrTimelineID) -> PF_Err,
    >,
    pub GetClipName: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, outSDKString: *mut PrSDKString) -> PF_Err,
    >,
    pub EffectWantsCheckedOutFramesToMatchRenderPixelFormat:
        ::std::option::Option<unsafe extern "C" fn(effect_ref: PF_ProgPtr) -> PF_Err>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_UtilitySuite {
    pub GetFilterInstanceID: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, outFilterInstanceID: *mut A_long) -> PF_Err,
    >,
    pub GetMediaTimecode: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            outCurrentFrame: *mut A_long,
            outTimeDisplay: *mut PF_TimeDisplay,
        ) -> PF_Err,
    >,
    pub GetClipSpeed: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, speed: *mut f64) -> PF_Err,
    >,
    pub GetClipDuration: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, frameDuration: *mut A_long) -> PF_Err,
    >,
    pub GetClipStart: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, frameDuration: *mut A_long) -> PF_Err,
    >,
    pub GetUnscaledClipDuration: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, frameDuration: *mut A_long) -> PF_Err,
    >,
    pub GetUnscaledClipStart: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, frameDuration: *mut A_long) -> PF_Err,
    >,
    pub GetTrackItemStart: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, frameDuration: *mut A_long) -> PF_Err,
    >,
    pub GetMediaFieldType: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, outFieldType: *mut prFieldType) -> PF_Err,
    >,
    pub GetMediaFrameRate: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, outTicksPerFrame: *mut PrTime) -> PF_Err,
    >,
    pub GetContainingTimelineID: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, outTimelineID: *mut PrTimelineID) -> PF_Err,
    >,
    pub GetClipName: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            inGetMasterClipName: A_Boolean,
            outSDKString: *mut PrSDKString,
        ) -> PF_Err,
    >,
    pub EffectWantsCheckedOutFramesToMatchRenderPixelFormat:
        ::std::option::Option<unsafe extern "C" fn(effect_ref: PF_ProgPtr) -> PF_Err>,
    pub EffectDependsOnClipName: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, inDependsOnClipName: A_Boolean) -> PF_Err,
    >,
    pub SetEffectInstanceName: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, inSDKString: *const PrSDKString) -> PF_Err,
    >,
    pub GetFileName: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, outSDKString: *mut PrSDKString) -> PF_Err,
    >,
    pub GetOriginalClipFrameRate: ::std::option::Option<
        unsafe extern "C" fn(effect_ref: PF_ProgPtr, outTicksPerFrame: *mut PrTime) -> PF_Err,
    >,
    pub GetSourceTrackMediaTimecode: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            inLayerParamIndex: csSDK_uint32,
            inApplyTransform: bool,
            inAddStartTimeOffset: bool,
            outCurrentFrame: *mut A_long,
        ) -> PF_Err,
    >,
    pub GetSourceTrackClipName: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            inLayerParamIndex: csSDK_uint32,
            inGetMasterClipName: A_Boolean,
            outSDKString: *mut PrSDKString,
        ) -> PF_Err,
    >,
    pub GetSourceTrackFileName: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            inLayerParamIndex: csSDK_uint32,
            outSDKString: *mut PrSDKString,
        ) -> PF_Err,
    >,
    pub EffectDependsOnClipName2: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            inDependsOnClipName: A_Boolean,
            inLayerParamIndex: csSDK_uint32,
        ) -> PF_Err,
    >,
    pub GetMediaTimecode2: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            inApplyTrim: bool,
            outCurrentFrame: *mut A_long,
            outTimeDisplay: *mut PF_TimeDisplay,
        ) -> PF_Err,
    >,
    pub GetSourceTrackMediaTimecode2: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            inLayerParamIndex: csSDK_uint32,
            inApplyTransform: bool,
            inAddStartTimeOffset: bool,
            inSequenceTime: PrTime,
            outCurrentFrame: *mut A_long,
        ) -> PF_Err,
    >,
    pub GetSourceTrackClipName2: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            inLayerParamIndex: csSDK_uint32,
            inGetMasterClipName: A_Boolean,
            outSDKString: *mut PrSDKString,
            inSequenceTime: PrTime,
        ) -> PF_Err,
    >,
    pub GetSourceTrackFileName2: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            inLayerParamIndex: csSDK_uint32,
            outSDKString: *mut PrSDKString,
            inSequenceTime: PrTime,
        ) -> PF_Err,
    >,
    pub GetCommentString: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            inSourceTrack: i32,
            inSequenceTime: PrTime,
            outSDKString: *mut PrSDKString,
        ) -> PF_Err,
    >,
    pub GetLogNoteString: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            inSourceTrack: i32,
            inSequenceTime: PrTime,
            outSDKString: *mut PrSDKString,
        ) -> PF_Err,
    >,
    pub GetCameraRollString: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            inSourceTrack: i32,
            inSequenceTime: PrTime,
            outSDKString: *mut PrSDKString,
        ) -> PF_Err,
    >,
    pub GetClientMetadataString: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            inSourceTrack: i32,
            inSequenceTime: PrTime,
            outSDKString: *mut PrSDKString,
        ) -> PF_Err,
    >,
    pub GetDailyRollString: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            inSourceTrack: i32,
            inSequenceTime: PrTime,
            outSDKString: *mut PrSDKString,
        ) -> PF_Err,
    >,
    pub GetDescriptionString: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            inSourceTrack: i32,
            inSequenceTime: PrTime,
            outSDKString: *mut PrSDKString,
        ) -> PF_Err,
    >,
    pub GetLabRollString: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            inSourceTrack: i32,
            inSequenceTime: PrTime,
            outSDKString: *mut PrSDKString,
        ) -> PF_Err,
    >,
    pub GetSceneString: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            inSourceTrack: i32,
            inSequenceTime: PrTime,
            outSDKString: *mut PrSDKString,
        ) -> PF_Err,
    >,
    pub GetShotString: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            inSourceTrack: i32,
            inSequenceTime: PrTime,
            outSDKString: *mut PrSDKString,
        ) -> PF_Err,
    >,
    pub GetTapeNameString: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            inSourceTrack: i32,
            inSequenceTime: PrTime,
            outSDKString: *mut PrSDKString,
        ) -> PF_Err,
    >,
    pub GetVideoCodecString: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            inSourceTrack: i32,
            inSequenceTime: PrTime,
            outSDKString: *mut PrSDKString,
        ) -> PF_Err,
    >,
    pub GetGoodMetadataString: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            inSourceTrack: i32,
            inSequenceTime: PrTime,
            outSDKString: *mut PrSDKString,
        ) -> PF_Err,
    >,
    pub GetSoundRollString: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            inSourceTrack: i32,
            inSequenceTime: PrTime,
            outSDKString: *mut PrSDKString,
        ) -> PF_Err,
    >,
    pub GetSequenceTime: ::std::option::Option<
        unsafe extern "C" fn(inEffectRef: PF_ProgPtr, outSequenceTime: *mut PrTime) -> PF_Err,
    >,
    pub GetSoundTimecode: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            inSourceTrack: i32,
            inSequenceTime: PrTime,
            outCurrentFrame: *mut A_long,
        ) -> PF_Err,
    >,
    pub GetOriginalClipFrameRateForSourceTrack: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            inSourceTrack: i32,
            outTicksPerFrame: *mut PrTime,
        ) -> PF_Err,
    >,
    pub GetMediaFrameRateForSourceTrack: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            inSourceTrack: i32,
            inSequenceTime: PrTime,
            outTicksPerFrame: *mut PrTime,
        ) -> PF_Err,
    >,
    pub GetSourceTrackMediaActualStartTime: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            inLayerParamIndex: csSDK_uint32,
            inSequenceTime: PrTime,
            outClipActualStartTime: *mut PrTime,
        ) -> PF_Err,
    >,
    pub IsSourceTrackMediaTrimmed: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            inLayerParamIndex: csSDK_uint32,
            inSequenceTime: PrTime,
            outTrimApplied: *mut bool,
        ) -> PF_Err,
    >,
    pub IsMediaTrimmed: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            inSequenceTime: PrTime,
            outTrimApplied: *mut bool,
        ) -> PF_Err,
    >,
    pub IsTrackEmpty: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            inLayerParamIndex: csSDK_uint32,
            inSequenceTime: PrTime,
            outIsTrackEmpty: *mut bool,
        ) -> PF_Err,
    >,
    pub IsTrackItemEffectAppliedToSynthetic: ::std::option::Option<
        unsafe extern "C" fn(
            inEffectRef: PF_ProgPtr,
            outIsTrackItemEffectAppliedToSynthetic: *mut bool,
        ) -> PF_Err,
    >,
}
pub type PF_UtilitySuiteVersion1 = PF_UtilitySuite;
pub type PF_UtilitySuite2 = PF_UtilitySuite;
pub type PF_UtilitySuite3 = PF_UtilitySuite;
pub type PF_UtilitySuite5 = PF_UtilitySuite;
pub type PF_UtilitySuite6 = PF_UtilitySuite;
pub type PF_UtilitySuite7 = PF_UtilitySuite;
pub type PF_UtilitySuite8 = PF_UtilitySuite;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_SourceSettingsSuite {
    pub PerformSourceSettingsCommand: ::std::option::Option<
        unsafe extern "C" fn(
            effect_ref: PF_ProgPtr,
            ioCommandStruct: *mut ::std::os::raw::c_void,
            inDataSize: csSDK_uint32,
        ) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PF_TransitionSuite {
    #[doc = "\tRegister an effect as a transition using the passed in\n\tinput layer as the outgoing clip. When registered the effect\n\twill be available to be dragged directly onto clip ends rather\n\tthan only applied to layers."]
    pub RegisterTransitionInputParam: ::std::option::Option<
        unsafe extern "C" fn(inEffectRef: PF_ProgPtr, inIndex: PF_ParamIndex) -> PF_Err,
    >,
    #[doc = "\tRegister a PF_ADD_FLOAT_SLIDER parameter to receive\n\tchanges to the start of the transition region through the\n\tPF_Cmd_USER_CHANGED_PARAM command."]
    pub RegisterTransitionStartParam: ::std::option::Option<
        unsafe extern "C" fn(inEffectRef: PF_ProgPtr, inIndex: PF_ParamIndex) -> PF_Err,
    >,
    #[doc = "\tRegister a PF_ADD_FLOAT_SLIDER parameter to receive\n\tchanges to the end of the transition region through the\n\tPF_Cmd_USER_CHANGED_PARAM command."]
    pub RegisterTransitionEndParam: ::std::option::Option<
        unsafe extern "C" fn(inEffectRef: PF_ProgPtr, inIndex: PF_ParamIndex) -> PF_Err,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __std_exception_data {
    pub _What: *const ::std::os::raw::c_char,
    pub _DoFree: bool,
}
pub type ADOBESDK_UTF16Char = u16;
pub type ADOBESDK_Boolean = u8;
pub type DRAWBOT_UTF16Char = ADOBESDK_UTF16Char;
pub type DRAWBOT_Boolean = ADOBESDK_Boolean;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DRAWBOT_DrawbotSuite1 {
    pub GetSupplier: ::std::option::Option<
        unsafe extern "C" fn(
            in_drawbot_ref: DRAWBOT_DrawRef,
            out_supplierP: *mut DRAWBOT_SupplierRef,
        ) -> SPErr,
    >,
    pub GetSurface: ::std::option::Option<
        unsafe extern "C" fn(
            in_drawbot_ref: DRAWBOT_DrawRef,
            out_surfaceP: *mut DRAWBOT_SurfaceRef,
        ) -> SPErr,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DRAWBOT_SupplierSuite1 {
    pub NewPen: ::std::option::Option<
        unsafe extern "C" fn(
            in_supplier_ref: DRAWBOT_SupplierRef,
            in_colorP: *const DRAWBOT_ColorRGBA,
            in_size: f32,
            out_penP: *mut DRAWBOT_PenRef,
        ) -> SPErr,
    >,
    pub NewBrush: ::std::option::Option<
        unsafe extern "C" fn(
            in_supplier_ref: DRAWBOT_SupplierRef,
            in_colorP: *const DRAWBOT_ColorRGBA,
            out_brushP: *mut DRAWBOT_BrushRef,
        ) -> SPErr,
    >,
    pub SupportsText: ::std::option::Option<
        unsafe extern "C" fn(
            in_supplier_ref: DRAWBOT_SupplierRef,
            out_supports_textPB: *mut DRAWBOT_Boolean,
        ) -> SPErr,
    >,
    pub GetDefaultFontSize: ::std::option::Option<
        unsafe extern "C" fn(
            in_supplier_ref: DRAWBOT_SupplierRef,
            out_font_sizeF: *mut f32,
        ) -> SPErr,
    >,
    pub NewDefaultFont: ::std::option::Option<
        unsafe extern "C" fn(
            in_supplier_ref: DRAWBOT_SupplierRef,
            in_font_sizeF: f32,
            out_fontP: *mut DRAWBOT_FontRef,
        ) -> SPErr,
    >,
    pub NewImageFromBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            in_supplier_ref: DRAWBOT_SupplierRef,
            in_width: ::std::os::raw::c_int,
            in_height: ::std::os::raw::c_int,
            in_row_bytes: ::std::os::raw::c_int,
            in_pl: DRAWBOT_PixelLayout,
            in_dataP: *const ::std::os::raw::c_void,
            out_imageP: *mut DRAWBOT_ImageRef,
        ) -> SPErr,
    >,
    pub NewPath: ::std::option::Option<
        unsafe extern "C" fn(
            in_supplier_ref: DRAWBOT_SupplierRef,
            out_pathP: *mut DRAWBOT_PathRef,
        ) -> SPErr,
    >,
    pub SupportsPixelLayoutBGRA: ::std::option::Option<
        unsafe extern "C" fn(
            in_supplier_ref: DRAWBOT_SupplierRef,
            out_supports_bgraPB: *mut DRAWBOT_Boolean,
        ) -> SPErr,
    >,
    pub PrefersPixelLayoutBGRA: ::std::option::Option<
        unsafe extern "C" fn(
            in_supplier_ref: DRAWBOT_SupplierRef,
            out_prefers_bgraPB: *mut DRAWBOT_Boolean,
        ) -> SPErr,
    >,
    pub SupportsPixelLayoutARGB: ::std::option::Option<
        unsafe extern "C" fn(
            in_supplier_ref: DRAWBOT_SupplierRef,
            out_supports_argbPB: *mut DRAWBOT_Boolean,
        ) -> SPErr,
    >,
    pub PrefersPixelLayoutARGB: ::std::option::Option<
        unsafe extern "C" fn(
            in_supplier_ref: DRAWBOT_SupplierRef,
            out_prefers_argbPB: *mut DRAWBOT_Boolean,
        ) -> SPErr,
    >,
    pub RetainObject:
        ::std::option::Option<unsafe extern "C" fn(in_obj_ref: DRAWBOT_ObjectRef) -> SPErr>,
    pub ReleaseObject:
        ::std::option::Option<unsafe extern "C" fn(in_obj_ref: DRAWBOT_ObjectRef) -> SPErr>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DRAWBOT_SurfaceSuite1 {
    pub PushStateStack:
        ::std::option::Option<unsafe extern "C" fn(in_surface_ref: DRAWBOT_SurfaceRef) -> SPErr>,
    pub PopStateStack:
        ::std::option::Option<unsafe extern "C" fn(in_surface_ref: DRAWBOT_SurfaceRef) -> SPErr>,
    pub PaintRect: ::std::option::Option<
        unsafe extern "C" fn(
            in_surface_ref: DRAWBOT_SurfaceRef,
            in_colorP: *const DRAWBOT_ColorRGBA,
            in_rectPR: *const DRAWBOT_RectF32,
        ) -> SPErr,
    >,
    pub FillPath: ::std::option::Option<
        unsafe extern "C" fn(
            in_surface_ref: DRAWBOT_SurfaceRef,
            in_brush_ref: DRAWBOT_BrushRef,
            in_path_ref: DRAWBOT_PathRef,
            in_fill_type: DRAWBOT_FillType,
        ) -> SPErr,
    >,
    pub StrokePath: ::std::option::Option<
        unsafe extern "C" fn(
            in_surface_ref: DRAWBOT_SurfaceRef,
            in_pen_ref: DRAWBOT_PenRef,
            in_path_ref: DRAWBOT_PathRef,
        ) -> SPErr,
    >,
    pub Clip: ::std::option::Option<
        unsafe extern "C" fn(
            in_surface_ref: DRAWBOT_SurfaceRef,
            in_supplier_ref: DRAWBOT_SupplierRef,
            in_rectPR: *const DRAWBOT_Rect32,
        ) -> SPErr,
    >,
    pub GetClipBounds: ::std::option::Option<
        unsafe extern "C" fn(
            in_surface_ref: DRAWBOT_SurfaceRef,
            out_rectPR: *mut DRAWBOT_Rect32,
        ) -> SPErr,
    >,
    pub IsWithinClipBounds: ::std::option::Option<
        unsafe extern "C" fn(
            in_surface_ref: DRAWBOT_SurfaceRef,
            in_rectPR: *const DRAWBOT_Rect32,
            out_withinPB: *mut DRAWBOT_Boolean,
        ) -> SPErr,
    >,
    pub Transform: ::std::option::Option<
        unsafe extern "C" fn(
            in_surface_ref: DRAWBOT_SurfaceRef,
            in_matrixP: *const DRAWBOT_MatrixF32,
        ) -> SPErr,
    >,
    pub DrawString: ::std::option::Option<
        unsafe extern "C" fn(
            in_surface_ref: DRAWBOT_SurfaceRef,
            in_brush_ref: DRAWBOT_BrushRef,
            in_font_ref: DRAWBOT_FontRef,
            in_stringP: *const DRAWBOT_UTF16Char,
            in_originP: *const DRAWBOT_PointF32,
            in_alignment_style: DRAWBOT_TextAlignment,
            in_truncation_style: DRAWBOT_TextTruncation,
            in_truncation_width: f32,
        ) -> SPErr,
    >,
    pub DrawImage: ::std::option::Option<
        unsafe extern "C" fn(
            in_surface_ref: DRAWBOT_SurfaceRef,
            in_image_ref: DRAWBOT_ImageRef,
            in_originP: *const DRAWBOT_PointF32,
            in_alpha: f32,
        ) -> SPErr,
    >,
    pub SetInterpolationPolicy: ::std::option::Option<
        unsafe extern "C" fn(
            in_surface_ref: DRAWBOT_SurfaceRef,
            in_interp: DRAWBOT_InterpolationPolicy,
        ) -> SPErr,
    >,
    pub GetInterpolationPolicy: ::std::option::Option<
        unsafe extern "C" fn(
            in_surface_ref: DRAWBOT_SurfaceRef,
            out_interpP: *mut DRAWBOT_InterpolationPolicy,
        ) -> SPErr,
    >,
    pub SetAntiAliasPolicy: ::std::option::Option<
        unsafe extern "C" fn(
            in_surface_ref: DRAWBOT_SurfaceRef,
            in_policy: DRAWBOT_AntiAliasPolicy,
        ) -> SPErr,
    >,
    pub GetAntiAliasPolicy: ::std::option::Option<
        unsafe extern "C" fn(
            in_surface_ref: DRAWBOT_SurfaceRef,
            out_policyP: *mut DRAWBOT_AntiAliasPolicy,
        ) -> SPErr,
    >,
    pub Flush:
        ::std::option::Option<unsafe extern "C" fn(in_surface_ref: DRAWBOT_SurfaceRef) -> SPErr>,
    pub GetTransformToScreenScale: ::std::option::Option<
        unsafe extern "C" fn(in_surface_ref: DRAWBOT_SurfaceRef, out_scale: *mut f32) -> SPErr,
    >,
}
pub type DRAWBOT_SurfaceSuite2 = DRAWBOT_SurfaceSuite1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DRAWBOT_PathSuite1 {
    pub MoveTo: ::std::option::Option<
        unsafe extern "C" fn(in_path_ref: DRAWBOT_PathRef, in_x: f32, in_y: f32) -> SPErr,
    >,
    pub LineTo: ::std::option::Option<
        unsafe extern "C" fn(in_path_ref: DRAWBOT_PathRef, in_x: f32, in_y: f32) -> SPErr,
    >,
    pub BezierTo: ::std::option::Option<
        unsafe extern "C" fn(
            in_path_ref: DRAWBOT_PathRef,
            in_pt1P: *const DRAWBOT_PointF32,
            in_pt2P: *const DRAWBOT_PointF32,
            in_pt3P: *const DRAWBOT_PointF32,
        ) -> SPErr,
    >,
    pub AddRect: ::std::option::Option<
        unsafe extern "C" fn(
            in_path_ref: DRAWBOT_PathRef,
            in_rectPR: *const DRAWBOT_RectF32,
        ) -> SPErr,
    >,
    pub AddArc: ::std::option::Option<
        unsafe extern "C" fn(
            in_path_ref: DRAWBOT_PathRef,
            in_centerP: *const DRAWBOT_PointF32,
            in_radius: f32,
            in_start_angle: f32,
            in_sweep: f32,
        ) -> SPErr,
    >,
    pub Close: ::std::option::Option<unsafe extern "C" fn(in_path_ref: DRAWBOT_PathRef) -> SPErr>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DRAWBOT_PenSuite1 {
    pub SetDashPattern: ::std::option::Option<
        unsafe extern "C" fn(
            in_pen_ref: DRAWBOT_PenRef,
            in_dashesP: *const f32,
            in_pattern_size: ::std::os::raw::c_int,
        ) -> SPErr,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DRAWBOT_ImageSuite1 {
    pub SetScaleFactor: ::std::option::Option<
        unsafe extern "C" fn(in_image_ref: DRAWBOT_ImageRef, in_scale_factor: f32) -> SPErr,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DRAWBOT_Suites {
    pub drawbot_suiteP: *mut DRAWBOT_DrawbotSuite1,
    pub supplier_suiteP: *mut DRAWBOT_SupplierSuite1,
    pub surface_suiteP: *mut DRAWBOT_SurfaceSuite2,
    pub path_suiteP: *mut DRAWBOT_PathSuite1,
    pub pen_suiteP: *mut DRAWBOT_PenSuite1,
    pub image_suiteP: *mut DRAWBOT_ImageSuite1,
}
#[repr(C)]
#[derive(Debug)]
pub struct DRAWBOT_Exception {
    pub _base: std_exception,
    pub mErr: SPErr,
}
#[repr(C)]
pub struct SharedRefImpl__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct SharedRefImpl<REF_T> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<REF_T>>,
    pub vtable_: *const SharedRefImpl__bindgen_vtable,
    pub mRef: REF_T,
    pub mSuiteP: *mut DRAWBOT_SupplierSuite1,
}
#[repr(C)]
#[derive(Debug)]
pub struct DRAWBOT_PenP {
    pub _base: SharedRefImpl<DRAWBOT_PenRef>,
}
pub type DRAWBOT_PenP__inherited = SharedRefImpl<DRAWBOT_PenRef>;
#[repr(C)]
#[derive(Debug)]
pub struct DRAWBOT_PathP {
    pub _base: SharedRefImpl<DRAWBOT_PathRef>,
}
pub type DRAWBOT_PathP__inherited = SharedRefImpl<DRAWBOT_PathRef>;
#[repr(C)]
#[derive(Debug)]
pub struct DRAWBOT_BrushP {
    pub _base: SharedRefImpl<DRAWBOT_BrushRef>,
}
pub type DRAWBOT_BrushP__inherited = SharedRefImpl<DRAWBOT_BrushRef>;
#[repr(C)]
#[derive(Debug)]
pub struct DRAWBOT_FontP {
    pub _base: SharedRefImpl<DRAWBOT_FontRef>,
}
pub type DRAWBOT_FontP__inherited = SharedRefImpl<DRAWBOT_FontRef>;
#[repr(C)]
#[derive(Debug)]
pub struct DRAWBOT_SaveAndRestoreStateStack {
    pub mSurfaceRef: DRAWBOT_SurfaceRef,
    pub mSuiteP: *mut DRAWBOT_SurfaceSuite2,
}
pub type prSuiteError = csSDK_int32;
pub const suiteError_InvalidParms: _bindgen_ty_173 = -2147483647;
pub const suiteError_StringNotFound: _bindgen_ty_173 = -2146828288;
pub const suiteError_StringBufferTooSmall: _bindgen_ty_173 = -2146828287;
pub type _bindgen_ty_173 = ::std::os::raw::c_int;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct PrSDKStringSuite {
    pub DisposeString: ::std::option::Option<
        unsafe extern "C" fn(inSDKString: *const PrSDKString) -> prSuiteError,
    >,
    pub AllocateFromUTF8: ::std::option::Option<
        unsafe extern "C" fn(
            inUTF8String: *const u8,
            outSDKString: *mut PrSDKString,
        ) -> prSuiteError,
    >,
    pub CopyToUTF8String: ::std::option::Option<
        unsafe extern "C" fn(
            inSDKString: *const PrSDKString,
            outUTF8StringBuffer: *mut u8,
            ioUTF8StringBufferSizeInElements: *mut csSDK_uint32,
        ) -> prSuiteError,
    >,
    pub AllocateFromUTF16: ::std::option::Option<
        unsafe extern "C" fn(
            inUTF16String: *const u16,
            outSDKString: *mut PrSDKString,
        ) -> prSuiteError,
    >,
    pub CopyToUTF16String: ::std::option::Option<
        unsafe extern "C" fn(
            inSDKString: *const PrSDKString,
            outUTF16StringBuffer: *mut u16,
            ioUTF16StringBufferSizeInElements: *mut csSDK_uint32,
        ) -> prSuiteError,
    >,
}
